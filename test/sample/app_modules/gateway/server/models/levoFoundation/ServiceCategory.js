"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServiceCategorySpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ServiceCategorySpec.db = db;
  ServiceCategorySpec.meta = {
    "schemaName": "levoFoundation",
    "name": "serviceCategory",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 100,
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "indexes": [{
      "fields": ["name"],
      "unique": true
    }],
    "features": {
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"], ["name"]],
    "fieldDependencies": {}
  };
  return Object.assign(ServiceCategorySpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU2VydmljZUNhdGVnb3J5LmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVHlwZXMiLCJWYWxpZGF0b3JzIiwiUHJvY2Vzc29ycyIsIkdlbmVyYXRvcnMiLCJFcnJvcnMiLCJCdXNpbmVzc0Vycm9yIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIkRzT3BlcmF0aW9uRXJyb3IiLCJVdGlscyIsIkxhbmciLCJpc05vdGhpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJCYXNlRW50aXR5TW9kZWwiLCJTZXJ2aWNlQ2F0ZWdvcnlTcGVjIiwiYXBwbHlNb2RpZmllcnNfIiwiY29udGV4dCIsImlzVXBkYXRpbmciLCJyYXciLCJsYXRlc3QiLCJleGlzdGluZyIsImkxOG4iLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU07QUFDRkMsRUFBQUEsS0FERTtBQUVGQyxFQUFBQSxVQUZFO0FBR0ZDLEVBQUFBLFVBSEU7QUFJRkMsRUFBQUEsVUFKRTtBQUtGQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsYUFBRjtBQUFpQkMsSUFBQUEsbUJBQWpCO0FBQXNDQyxJQUFBQTtBQUF0QyxHQUxOO0FBTUZDLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUE7QUFBRjtBQUFSO0FBTkwsSUFPRlgsT0FBTyxDQUFDLGlCQUFELENBUFg7O0FBVUFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxFQUFELEVBQUtDLGVBQUwsS0FBeUI7QUFDdEMsUUFBTUMsbUJBQW1CLEdBQUcsY0FBY0QsZUFBZCxDQUE4QjtBQU90RCxpQkFBYUUsZUFBYixDQUE2QkMsT0FBN0IsRUFBc0NDLFVBQXRDLEVBQWtEO0FBQzlDLFVBQUk7QUFBQ0MsUUFBQUEsR0FBRDtBQUFNQyxRQUFBQSxNQUFOO0FBQWNDLFFBQUFBLFFBQWQ7QUFBd0JDLFFBQUFBO0FBQXhCLFVBQWdDTCxPQUFwQztBQUNBSSxNQUFBQSxRQUFRLEtBQUtBLFFBQVEsR0FBRyxFQUFoQixDQUFSO0FBQ0EsYUFBT0osT0FBUDtBQUNIOztBQVhxRCxHQUExRDtBQWNBRixFQUFBQSxtQkFBbUIsQ0FBQ0YsRUFBcEIsR0FBeUJBLEVBQXpCO0FBQ0FFLEVBQUFBLG1CQUFtQixDQUFDUSxJQUFwQixHQUEyQjtBQUMzQixrQkFBYyxnQkFEYTtBQUUzQixZQUFRLGlCQUZtQjtBQUczQixnQkFBWSxNQUhlO0FBSTNCLGNBQVU7QUFDTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLHFCQUFhLEVBRlQ7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlLE1BTlg7QUFPSixzQkFBYztBQVBWLE9BREY7QUFVTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLHFCQUFhLEdBRlQ7QUFHSix1QkFBZSxNQUhYO0FBSUosc0JBQWM7QUFKVixPQVZGO0FBZ0JOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUosb0JBQVksSUFGUjtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWU7QUFOWCxPQWhCRjtBQXdCTixtQkFBYTtBQUNULGdCQUFRLFNBREM7QUFFVCxtQkFBVyxLQUZGO0FBR1Qsb0JBQVksSUFISDtBQUlULHVCQUFlO0FBSk47QUF4QlAsS0FKaUI7QUFtQzNCLGVBQVcsQ0FDUDtBQUNJLGdCQUFVLENBQ04sTUFETSxDQURkO0FBSUksZ0JBQVU7QUFKZCxLQURPLENBbkNnQjtBQTJDM0IsZ0JBQVk7QUFDUix5QkFBbUI7QUFDZixpQkFBUyxXQURNO0FBRWYsaUJBQVM7QUFGTTtBQURYLEtBM0NlO0FBaUQzQixrQkFBYyxDQUNWLENBQ0ksTUFESixDQURVLEVBSVYsQ0FDSSxNQURKLENBSlUsQ0FqRGE7QUF5RDNCLHlCQUFxQjtBQXpETSxHQUEzQjtBQTREQSxTQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsbUJBQWQsQ0FBUDtBQUNILENBN0VEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jb25zdCB7IFxuICAgIFR5cGVzLFxuICAgIFZhbGlkYXRvcnMsIFxuICAgIFByb2Nlc3NvcnMsIFxuICAgIEdlbmVyYXRvcnMsIFxuICAgIEVycm9yczogeyBCdXNpbmVzc0Vycm9yLCBEYXRhVmFsaWRhdGlvbkVycm9yLCBEc09wZXJhdGlvbkVycm9yIH0sIFxuICAgIFV0aWxzOiB7IExhbmc6IHsgaXNOb3RoaW5nIH0gfSBcbn0gPSByZXF1aXJlKCdAay1zdWl0ZS9vb2xvbmcnKTtcbiBcblxubW9kdWxlLmV4cG9ydHMgPSAoZGIsIEJhc2VFbnRpdHlNb2RlbCkgPT4ge1xuICAgIGNvbnN0IFNlcnZpY2VDYXRlZ29yeVNwZWMgPSBjbGFzcyBleHRlbmRzIEJhc2VFbnRpdHlNb2RlbCB7ICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHlpbmcgcHJlZGVmaW5lZCBtb2RpZmllcnMgdG8gZW50aXR5IGZpZWxkcy5cbiAgICAgICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgICAgICogQHBhcmFtIGlzVXBkYXRpbmdcbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgYXN5bmMgYXBwbHlNb2RpZmllcnNfKGNvbnRleHQsIGlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIGxldCB7cmF3LCBsYXRlc3QsIGV4aXN0aW5nLCBpMThufSA9IGNvbnRleHQ7XG4gICAgICAgICAgICBleGlzdGluZyB8fCAoZXhpc3RpbmcgPSB7fSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTZXJ2aWNlQ2F0ZWdvcnlTcGVjLmRiID0gZGI7XG4gICAgU2VydmljZUNhdGVnb3J5U3BlYy5tZXRhID0ge1xuICAgIFwic2NoZW1hTmFtZVwiOiBcImxldm9Gb3VuZGF0aW9uXCIsXG4gICAgXCJuYW1lXCI6IFwic2VydmljZUNhdGVnb3J5XCIsXG4gICAgXCJrZXlGaWVsZFwiOiBcImNvZGVcIixcbiAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgIFwiY29kZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMCxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwiY29kZVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNvZGVcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAxMDAsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTmFtZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwiZGVzY1wiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkRlc2NcIlxuICAgICAgICB9LFxuICAgICAgICBcImlzRGVsZXRlZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2UsXG4gICAgICAgICAgICBcInJlYWRPbmx5XCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXMgRGVsZXRlZFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiaW5kZXhlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZmllbGRzXCI6IFtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidW5pcXVlXCI6IHRydWVcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgIFwibG9naWNhbERlbGV0aW9uXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJpc0RlbGV0ZWRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgICBcImNvZGVcIlxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICBdXG4gICAgXSxcbiAgICBcImZpZWxkRGVwZW5kZW5jaWVzXCI6IHt9XG59O1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oU2VydmljZUNhdGVnb3J5U3BlYywgKTtcbn07Il19