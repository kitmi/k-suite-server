"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ReviewReplySpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ReviewReplySpec.db = db;
  ReviewReplySpec.meta = {
    "schemaName": "levoFoundation",
    "name": "reviewReply",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "replyContent": {
        "type": "text",
        "displayName": "Reply Content"
      },
      "createdAt": {
        "type": "datetime",
        "auto": true,
        "readOnly": true,
        "writeOnce": true,
        "displayName": "Created At",
        "isCreateTimestamp": true,
        "createByDb": true
      },
      "reviewTopic": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id"
      },
      "parentReply": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "optional": true
      }
    },
    "indexes": [],
    "features": {
      "autoId": {
        "field": "id"
      },
      "createTimestamp": {
        "field": "createdAt"
      }
    },
    "uniqueKeys": [["id"]],
    "fieldDependencies": {}
  };
  return Object.assign(ReviewReplySpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vUmV2aWV3UmVwbHkuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIlJldmlld1JlcGx5U3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwibWV0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLGVBQWUsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBT2xELGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWGlELEdBQXREO0FBY0FGLEVBQUFBLGVBQWUsQ0FBQ0YsRUFBaEIsR0FBcUJBLEVBQXJCO0FBQ0FFLEVBQUFBLGVBQWUsQ0FBQ1EsSUFBaEIsR0FBdUI7QUFDdkIsa0JBQWMsZ0JBRFM7QUFFdkIsWUFBUSxhQUZlO0FBR3ZCLGdCQUFZLElBSFc7QUFJdkIsY0FBVTtBQUNOLFlBQU07QUFDRixnQkFBUSxTQUROO0FBRUYsZ0JBQVEsSUFGTjtBQUdGLHFCQUFhLElBSFg7QUFJRix1QkFBZSxJQUpiO0FBS0YsMkJBQW1CLElBTGpCO0FBTUYsc0JBQWM7QUFOWixPQURBO0FBU04sc0JBQWdCO0FBQ1osZ0JBQVEsTUFESTtBQUVaLHVCQUFlO0FBRkgsT0FUVjtBQWFOLG1CQUFhO0FBQ1QsZ0JBQVEsVUFEQztBQUVULGdCQUFRLElBRkM7QUFHVCxvQkFBWSxJQUhIO0FBSVQscUJBQWEsSUFKSjtBQUtULHVCQUFlLFlBTE47QUFNVCw2QkFBcUIsSUFOWjtBQU9ULHNCQUFjO0FBUEwsT0FiUDtBQXNCTixxQkFBZTtBQUNYLGdCQUFRLFNBREc7QUFFWCxnQkFBUSxJQUZHO0FBR1gscUJBQWEsSUFIRjtBQUlYLHVCQUFlO0FBSkosT0F0QlQ7QUE0Qk4scUJBQWU7QUFDWCxnQkFBUSxTQURHO0FBRVgsZ0JBQVEsSUFGRztBQUdYLHFCQUFhLElBSEY7QUFJWCx1QkFBZSxJQUpKO0FBS1gsb0JBQVk7QUFMRDtBQTVCVCxLQUphO0FBd0N2QixlQUFXLEVBeENZO0FBeUN2QixnQkFBWTtBQUNSLGdCQUFVO0FBQ04saUJBQVM7QUFESCxPQURGO0FBSVIseUJBQW1CO0FBQ2YsaUJBQVM7QUFETTtBQUpYLEtBekNXO0FBaUR2QixrQkFBYyxDQUNWLENBQ0ksSUFESixDQURVLENBakRTO0FBc0R2Qix5QkFBcUI7QUF0REUsR0FBdkI7QUF5REEsU0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWNWLGVBQWQsQ0FBUDtBQUNILENBMUVEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jb25zdCB7IFxuICAgIFR5cGVzLFxuICAgIFZhbGlkYXRvcnMsIFxuICAgIFByb2Nlc3NvcnMsIFxuICAgIEdlbmVyYXRvcnMsIFxuICAgIEVycm9yczogeyBCdXNpbmVzc0Vycm9yLCBEYXRhVmFsaWRhdGlvbkVycm9yLCBEc09wZXJhdGlvbkVycm9yIH0sIFxuICAgIFV0aWxzOiB7IExhbmc6IHsgaXNOb3RoaW5nIH0gfSBcbn0gPSByZXF1aXJlKCdAay1zdWl0ZS9vb2xvbmcnKTtcbiBcblxubW9kdWxlLmV4cG9ydHMgPSAoZGIsIEJhc2VFbnRpdHlNb2RlbCkgPT4ge1xuICAgIGNvbnN0IFJldmlld1JlcGx5U3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFJldmlld1JlcGx5U3BlYy5kYiA9IGRiO1xuICAgIFJldmlld1JlcGx5U3BlYy5tZXRhID0ge1xuICAgIFwic2NoZW1hTmFtZVwiOiBcImxldm9Gb3VuZGF0aW9uXCIsXG4gICAgXCJuYW1lXCI6IFwicmV2aWV3UmVwbHlcIixcbiAgICBcImtleUZpZWxkXCI6IFwiaWRcIixcbiAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCIsXG4gICAgICAgICAgICBcImF1dG9JbmNyZW1lbnRJZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXBseUNvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlJlcGx5IENvbnRlbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcImNyZWF0ZWRBdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcInJlYWRPbmx5XCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNyZWF0ZWQgQXRcIixcbiAgICAgICAgICAgIFwiaXNDcmVhdGVUaW1lc3RhbXBcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwicmV2aWV3VG9waWNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJlbnRSZXBseVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImF1dG9cIjogdHJ1ZSxcbiAgICAgICAgICAgIFwid3JpdGVPbmNlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImluZGV4ZXNcIjogW10sXG4gICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgIFwiYXV0b0lkXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJpZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY3JlYXRlVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJjcmVhdGVkQXRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgICBcImlkXCJcbiAgICAgICAgXVxuICAgIF0sXG4gICAgXCJmaWVsZERlcGVuZGVuY2llc1wiOiB7fVxufTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFJldmlld1JlcGx5U3BlYywgKTtcbn07Il19