"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ReviewReplySpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ReviewReplySpec.db = db;
  ReviewReplySpec.meta = {
    "schemaName": "levoFoundation",
    "name": "reviewReply",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "replyContent": {
        "type": "text",
        "displayName": "Reply Content"
      },
      "createdAt": {
        "type": "datetime",
        "auto": true,
        "readOnly": true,
        "writeOnce": true,
        "displayName": "Created At",
        "isCreateTimestamp": true,
        "createByDb": true
      },
      "reviewTopic": {
        "type": "integer",
        "displayName": "serviceReviewId",
        "createByDb": true
      },
      "parentReply": {
        "type": "integer",
        "displayName": "reviewReplyId",
        "optional": true
      }
    },
    "features": {
      "autoId": {
        "field": "id"
      },
      "createTimestamp": {
        "field": "createdAt"
      }
    },
    "uniqueKeys": [["id"]],
    "associations": {
      "reviewTopic": {
        "entity": "serviceReview",
        "isList": false
      },
      "parentReply": {
        "entity": "reviewReply",
        "isList": false,
        "optional": true
      },
      "reviewReplies": {
        "entity": "reviewReply",
        "isList": true,
        "remoteField": "parentReply"
      }
    },
    "fieldDependencies": {
      "id": ["id"],
      "createdAt": ["createdAt"]
    }
  };
  return Object.assign(ReviewReplySpec, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vUmV2aWV3UmVwbHkuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIlJldmlld1JlcGx5U3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwibWV0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLGVBQWUsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBT2xELGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWGlELEdBQXREO0FBY0FGLEVBQUFBLGVBQWUsQ0FBQ0YsRUFBaEIsR0FBcUJBLEVBQXJCO0FBQ0FFLEVBQUFBLGVBQWUsQ0FBQ1EsSUFBaEIsR0FBdUI7QUFDbkIsa0JBQWMsZ0JBREs7QUFFbkIsWUFBUSxhQUZXO0FBR25CLGdCQUFZLElBSE87QUFJbkIsY0FBVTtBQUNOLFlBQU07QUFDRixnQkFBUSxTQUROO0FBRUYsZ0JBQVEsSUFGTjtBQUdGLHFCQUFhLElBSFg7QUFJRix1QkFBZSxJQUpiO0FBS0YsMkJBQW1CLElBTGpCO0FBTUYsc0JBQWM7QUFOWixPQURBO0FBU04sc0JBQWdCO0FBQ1osZ0JBQVEsTUFESTtBQUVaLHVCQUFlO0FBRkgsT0FUVjtBQWFOLG1CQUFhO0FBQ1QsZ0JBQVEsVUFEQztBQUVULGdCQUFRLElBRkM7QUFHVCxvQkFBWSxJQUhIO0FBSVQscUJBQWEsSUFKSjtBQUtULHVCQUFlLFlBTE47QUFNVCw2QkFBcUIsSUFOWjtBQU9ULHNCQUFjO0FBUEwsT0FiUDtBQXNCTixxQkFBZTtBQUNYLGdCQUFRLFNBREc7QUFFWCx1QkFBZSxpQkFGSjtBQUdYLHNCQUFjO0FBSEgsT0F0QlQ7QUEyQk4scUJBQWU7QUFDWCxnQkFBUSxTQURHO0FBRVgsdUJBQWUsZUFGSjtBQUdYLG9CQUFZO0FBSEQ7QUEzQlQsS0FKUztBQXFDbkIsZ0JBQVk7QUFDUixnQkFBVTtBQUNOLGlCQUFTO0FBREgsT0FERjtBQUlSLHlCQUFtQjtBQUNmLGlCQUFTO0FBRE07QUFKWCxLQXJDTztBQTZDbkIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQTdDSztBQWtEbkIsb0JBQWdCO0FBQ1oscUJBQWU7QUFDWCxrQkFBVSxlQURDO0FBRVgsa0JBQVU7QUFGQyxPQURIO0FBS1oscUJBQWU7QUFDWCxrQkFBVSxhQURDO0FBRVgsa0JBQVUsS0FGQztBQUdYLG9CQUFZO0FBSEQsT0FMSDtBQVVaLHVCQUFpQjtBQUNiLGtCQUFVLGFBREc7QUFFYixrQkFBVSxJQUZHO0FBR2IsdUJBQWU7QUFIRjtBQVZMLEtBbERHO0FBa0VuQix5QkFBcUI7QUFDakIsWUFBTSxDQUNGLElBREUsQ0FEVztBQUlqQixtQkFBYSxDQUNULFdBRFM7QUFKSTtBQWxFRixHQUF2QjtBQTRFQSxTQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsZUFBZCxFQUErQixFQUEvQixDQUFQO0FBQ0gsQ0E3RkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgUmV2aWV3UmVwbHlTcGVjID0gY2xhc3MgZXh0ZW5kcyBCYXNlRW50aXR5TW9kZWwgeyAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5aW5nIHByZWRlZmluZWQgbW9kaWZpZXJzIHRvIGVudGl0eSBmaWVsZHMuXG4gICAgICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSBpc1VwZGF0aW5nXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFzeW5jIGFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICBsZXQge3JhdywgbGF0ZXN0LCBleGlzdGluZywgaTE4bn0gPSBjb250ZXh0O1xuICAgICAgICAgICAgZXhpc3RpbmcgfHwgKGV4aXN0aW5nID0ge30pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUmV2aWV3UmVwbHlTcGVjLmRiID0gZGI7XG4gICAgUmV2aWV3UmVwbHlTcGVjLm1ldGEgPSB7XG4gICAgICAgIFwic2NoZW1hTmFtZVwiOiBcImxldm9Gb3VuZGF0aW9uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInJldmlld1JlcGx5XCIsXG4gICAgICAgIFwia2V5RmllbGRcIjogXCJpZFwiLFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIixcbiAgICAgICAgICAgICAgICBcImF1dG9JbmNyZW1lbnRJZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZXBseUNvbnRlbnRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUmVwbHkgQ29udGVudFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjcmVhdGVkQXRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkT25seVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwid3JpdGVPbmNlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNyZWF0ZWQgQXRcIixcbiAgICAgICAgICAgICAgICBcImlzQ3JlYXRlVGltZXN0YW1wXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJldmlld1RvcGljXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcInNlcnZpY2VSZXZpZXdJZFwiLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwYXJlbnRSZXBseVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJyZXZpZXdSZXBseUlkXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25hbFwiOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZmVhdHVyZXNcIjoge1xuICAgICAgICAgICAgXCJhdXRvSWRcIjoge1xuICAgICAgICAgICAgICAgIFwiZmllbGRcIjogXCJpZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjcmVhdGVUaW1lc3RhbXBcIjoge1xuICAgICAgICAgICAgICAgIFwiZmllbGRcIjogXCJjcmVhdGVkQXRcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFwiaWRcIlxuICAgICAgICAgICAgXVxuICAgICAgICBdLFxuICAgICAgICBcImFzc29jaWF0aW9uc1wiOiB7XG4gICAgICAgICAgICBcInJldmlld1RvcGljXCI6IHtcbiAgICAgICAgICAgICAgICBcImVudGl0eVwiOiBcInNlcnZpY2VSZXZpZXdcIixcbiAgICAgICAgICAgICAgICBcImlzTGlzdFwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicGFyZW50UmVwbHlcIjoge1xuICAgICAgICAgICAgICAgIFwiZW50aXR5XCI6IFwicmV2aWV3UmVwbHlcIixcbiAgICAgICAgICAgICAgICBcImlzTGlzdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcIm9wdGlvbmFsXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJldmlld1JlcGxpZXNcIjoge1xuICAgICAgICAgICAgICAgIFwiZW50aXR5XCI6IFwicmV2aWV3UmVwbHlcIixcbiAgICAgICAgICAgICAgICBcImlzTGlzdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVtb3RlRmllbGRcIjogXCJwYXJlbnRSZXBseVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZmllbGREZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBbXG4gICAgICAgICAgICAgICAgXCJpZFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjcmVhdGVkQXRcIjogW1xuICAgICAgICAgICAgICAgIFwiY3JlYXRlZEF0XCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihSZXZpZXdSZXBseVNwZWMsIHt9KTtcbn07Il19