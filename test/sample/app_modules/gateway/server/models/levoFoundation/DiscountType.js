"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const DiscountTypeSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  DiscountTypeSpec.db = db;
  DiscountTypeSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "discountType",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "indexes": [],
    "features": {
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"]],
    "fieldDependencies": {}
  };
  return Object.assign(DiscountTypeSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vRGlzY291bnRUeXBlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVHlwZXMiLCJWYWxpZGF0b3JzIiwiUHJvY2Vzc29ycyIsIkdlbmVyYXRvcnMiLCJFcnJvcnMiLCJCdXNpbmVzc0Vycm9yIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIkRzT3BlcmF0aW9uRXJyb3IiLCJVdGlscyIsIkxhbmciLCJpc05vdGhpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJCYXNlRW50aXR5TW9kZWwiLCJEaXNjb3VudFR5cGVTcGVjIiwiYXBwbHlNb2RpZmllcnNfIiwiY29udGV4dCIsImlzVXBkYXRpbmciLCJyYXciLCJsYXRlc3QiLCJleGlzdGluZyIsImkxOG4iLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU07QUFDRkMsRUFBQUEsS0FERTtBQUVGQyxFQUFBQSxVQUZFO0FBR0ZDLEVBQUFBLFVBSEU7QUFJRkMsRUFBQUEsVUFKRTtBQUtGQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsYUFBRjtBQUFpQkMsSUFBQUEsbUJBQWpCO0FBQXNDQyxJQUFBQTtBQUF0QyxHQUxOO0FBTUZDLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUE7QUFBRjtBQUFSO0FBTkwsSUFPRlgsT0FBTyxDQUFDLGlCQUFELENBUFg7O0FBVUFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxFQUFELEVBQUtDLGVBQUwsS0FBeUI7QUFDdEMsUUFBTUMsZ0JBQWdCLEdBQUcsY0FBY0QsZUFBZCxDQUE4QjtBQU9uRCxpQkFBYUUsZUFBYixDQUE2QkMsT0FBN0IsRUFBc0NDLFVBQXRDLEVBQWtEO0FBQzlDLFVBQUk7QUFBQ0MsUUFBQUEsR0FBRDtBQUFNQyxRQUFBQSxNQUFOO0FBQWNDLFFBQUFBLFFBQWQ7QUFBd0JDLFFBQUFBO0FBQXhCLFVBQWdDTCxPQUFwQztBQUNBSSxNQUFBQSxRQUFRLEtBQUtBLFFBQVEsR0FBRyxFQUFoQixDQUFSO0FBQ0EsYUFBT0osT0FBUDtBQUNIOztBQVhrRCxHQUF2RDtBQWNBRixFQUFBQSxnQkFBZ0IsQ0FBQ0YsRUFBakIsR0FBc0JBLEVBQXRCO0FBQ0FFLEVBQUFBLGdCQUFnQixDQUFDUSxJQUFqQixHQUF3QjtBQUN4QixrQkFBYyxnQkFEVTtBQUV4QixZQUFRLGNBRmdCO0FBR3hCLGdCQUFZLE1BSFk7QUFJeEIsY0FBVTtBQUNOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FERjtBQVVOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FWRjtBQW1CTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLG9CQUFZLElBRlI7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlO0FBTlgsT0FuQkY7QUEyQk4sbUJBQWE7QUFDVCxnQkFBUSxTQURDO0FBRVQsbUJBQVcsS0FGRjtBQUdULG9CQUFZLElBSEg7QUFJVCx1QkFBZTtBQUpOO0FBM0JQLEtBSmM7QUFzQ3hCLGVBQVcsRUF0Q2E7QUF1Q3hCLGdCQUFZO0FBQ1IseUJBQW1CO0FBQ2YsaUJBQVMsV0FETTtBQUVmLGlCQUFTO0FBRk07QUFEWCxLQXZDWTtBQTZDeEIsa0JBQWMsQ0FDVixDQUNJLE1BREosQ0FEVSxDQTdDVTtBQWtEeEIseUJBQXFCO0FBbERHLEdBQXhCO0FBcURBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixnQkFBZCxDQUFQO0FBQ0gsQ0F0RUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgRGlzY291bnRUeXBlU3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIERpc2NvdW50VHlwZVNwZWMuZGIgPSBkYjtcbiAgICBEaXNjb3VudFR5cGVTcGVjLm1ldGEgPSB7XG4gICAgXCJzY2hlbWFOYW1lXCI6IFwibGV2b0ZvdW5kYXRpb25cIixcbiAgICBcIm5hbWVcIjogXCJkaXNjb3VudFR5cGVcIixcbiAgICBcImtleUZpZWxkXCI6IFwiY29kZVwiLFxuICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgXCJjb2RlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDIwLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJjb2RlXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ29kZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDQwLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTmFtZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwiZGVzY1wiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkRlc2NcIlxuICAgICAgICB9LFxuICAgICAgICBcImlzRGVsZXRlZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2UsXG4gICAgICAgICAgICBcInJlYWRPbmx5XCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXMgRGVsZXRlZFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiaW5kZXhlc1wiOiBbXSxcbiAgICBcImZlYXR1cmVzXCI6IHtcbiAgICAgICAgXCJsb2dpY2FsRGVsZXRpb25cIjoge1xuICAgICAgICAgICAgXCJmaWVsZFwiOiBcImlzRGVsZXRlZFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidW5pcXVlS2V5c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIFwiY29kZVwiXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFwiZmllbGREZXBlbmRlbmNpZXNcIjoge31cbn07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihEaXNjb3VudFR5cGVTcGVjLCApO1xufTsiXX0=