"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const SupplierSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  SupplierSpec.db = db;
  SupplierSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "supplier",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 1001,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "legalName": {
        "type": "text",
        "maxLength": 100,
        "displayName": "Legal Name",
        "createByDb": true
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "features": {
      "autoId": {
        "field": "id"
      },
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["id"]],
    "associations": {
      "services": {
        "entity": "service",
        "isList": true,
        "remoteField": "supplier"
      }
    },
    "fieldDependencies": {
      "id": ["id"]
    }
  };
  return Object.assign(SupplierSpec, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU3VwcGxpZXIuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIlN1cHBsaWVyU3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwibWV0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLFlBQVksR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBTy9DLGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWDhDLEdBQW5EO0FBY0FGLEVBQUFBLFlBQVksQ0FBQ0YsRUFBYixHQUFrQkEsRUFBbEI7QUFDQUUsRUFBQUEsWUFBWSxDQUFDUSxJQUFiLEdBQW9CO0FBQ2hCLGtCQUFjLGdCQURFO0FBRWhCLFlBQVEsVUFGUTtBQUdoQixnQkFBWSxJQUhJO0FBSWhCLGNBQVU7QUFDTixZQUFNO0FBQ0YsZ0JBQVEsU0FETjtBQUVGLGdCQUFRLElBRk47QUFHRixxQkFBYSxJQUhYO0FBSUYscUJBQWEsSUFKWDtBQUtGLHVCQUFlLElBTGI7QUFNRiwyQkFBbUIsSUFOakI7QUFPRixzQkFBYztBQVBaLE9BREE7QUFVTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLHFCQUFhLEVBRlQ7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlLE1BTlg7QUFPSixzQkFBYztBQVBWLE9BVkY7QUFtQk4sbUJBQWE7QUFDVCxnQkFBUSxNQURDO0FBRVQscUJBQWEsR0FGSjtBQUdULHVCQUFlLFlBSE47QUFJVCxzQkFBYztBQUpMLE9BbkJQO0FBeUJOLG1CQUFhO0FBQ1QsZ0JBQVEsU0FEQztBQUVULG1CQUFXLEtBRkY7QUFHVCxvQkFBWSxJQUhIO0FBSVQsdUJBQWU7QUFKTjtBQXpCUCxLQUpNO0FBb0NoQixnQkFBWTtBQUNSLGdCQUFVO0FBQ04saUJBQVM7QUFESCxPQURGO0FBSVIseUJBQW1CO0FBQ2YsaUJBQVMsV0FETTtBQUVmLGlCQUFTO0FBRk07QUFKWCxLQXBDSTtBQTZDaEIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQTdDRTtBQWtEaEIsb0JBQWdCO0FBQ1osa0JBQVk7QUFDUixrQkFBVSxTQURGO0FBRVIsa0JBQVUsSUFGRjtBQUdSLHVCQUFlO0FBSFA7QUFEQSxLQWxEQTtBQXlEaEIseUJBQXFCO0FBQ2pCLFlBQU0sQ0FDRixJQURFO0FBRFc7QUF6REwsR0FBcEI7QUFnRUEsU0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWNWLFlBQWQsRUFBNEIsRUFBNUIsQ0FBUDtBQUNILENBakZEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jb25zdCB7IFxuICAgIFR5cGVzLFxuICAgIFZhbGlkYXRvcnMsIFxuICAgIFByb2Nlc3NvcnMsIFxuICAgIEdlbmVyYXRvcnMsIFxuICAgIEVycm9yczogeyBCdXNpbmVzc0Vycm9yLCBEYXRhVmFsaWRhdGlvbkVycm9yLCBEc09wZXJhdGlvbkVycm9yIH0sIFxuICAgIFV0aWxzOiB7IExhbmc6IHsgaXNOb3RoaW5nIH0gfSBcbn0gPSByZXF1aXJlKCdAay1zdWl0ZS9vb2xvbmcnKTtcbiBcblxubW9kdWxlLmV4cG9ydHMgPSAoZGIsIEJhc2VFbnRpdHlNb2RlbCkgPT4ge1xuICAgIGNvbnN0IFN1cHBsaWVyU3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFN1cHBsaWVyU3BlYy5kYiA9IGRiO1xuICAgIFN1cHBsaWVyU3BlYy5tZXRhID0ge1xuICAgICAgICBcInNjaGVtYU5hbWVcIjogXCJsZXZvRm91bmRhdGlvblwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzdXBwbGllclwiLFxuICAgICAgICBcImtleUZpZWxkXCI6IFwiaWRcIixcbiAgICAgICAgXCJmaWVsZHNcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwid3JpdGVPbmNlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJzdGFydEZyb21cIjogMTAwMSxcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIixcbiAgICAgICAgICAgICAgICBcImF1dG9JbmNyZW1lbnRJZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogNDAsXG4gICAgICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsZWdhbE5hbWVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcIm1heExlbmd0aFwiOiAxMDAsXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkxlZ2FsIE5hbWVcIixcbiAgICAgICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaXNEZWxldGVkXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIFwicmVhZE9ubHlcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXMgRGVsZXRlZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZmVhdHVyZXNcIjoge1xuICAgICAgICAgICAgXCJhdXRvSWRcIjoge1xuICAgICAgICAgICAgICAgIFwiZmllbGRcIjogXCJpZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsb2dpY2FsRGVsZXRpb25cIjoge1xuICAgICAgICAgICAgICAgIFwiZmllbGRcIjogXCJpc0RlbGV0ZWRcIixcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmlxdWVLZXlzXCI6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBcImlkXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgXCJhc3NvY2lhdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJzZXJ2aWNlc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJlbnRpdHlcIjogXCJzZXJ2aWNlXCIsXG4gICAgICAgICAgICAgICAgXCJpc0xpc3RcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlbW90ZUZpZWxkXCI6IFwic3VwcGxpZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImZpZWxkRGVwZW5kZW5jaWVzXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogW1xuICAgICAgICAgICAgICAgIFwiaWRcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFN1cHBsaWVyU3BlYywge30pO1xufTsiXX0=