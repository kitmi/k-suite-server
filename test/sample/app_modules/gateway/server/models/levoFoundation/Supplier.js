"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const SupplierSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  SupplierSpec.db = db;
  SupplierSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "supplier",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 1001,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "legalName": {
        "type": "text",
        "maxLength": 100,
        "displayName": "Legal Name",
        "createByDb": true
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "indexes": [],
    "features": {
      "autoId": {
        "field": "id"
      },
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["id"]],
    "fieldDependencies": {}
  };
  return Object.assign(SupplierSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU3VwcGxpZXIuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIlN1cHBsaWVyU3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwibWV0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLFlBQVksR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBTy9DLGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWDhDLEdBQW5EO0FBY0FGLEVBQUFBLFlBQVksQ0FBQ0YsRUFBYixHQUFrQkEsRUFBbEI7QUFDQUUsRUFBQUEsWUFBWSxDQUFDUSxJQUFiLEdBQW9CO0FBQ3BCLGtCQUFjLGdCQURNO0FBRXBCLFlBQVEsVUFGWTtBQUdwQixnQkFBWSxJQUhRO0FBSXBCLGNBQVU7QUFDTixZQUFNO0FBQ0YsZ0JBQVEsU0FETjtBQUVGLGdCQUFRLElBRk47QUFHRixxQkFBYSxJQUhYO0FBSUYscUJBQWEsSUFKWDtBQUtGLHVCQUFlLElBTGI7QUFNRiwyQkFBbUIsSUFOakI7QUFPRixzQkFBYztBQVBaLE9BREE7QUFVTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLHFCQUFhLEVBRlQ7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlLE1BTlg7QUFPSixzQkFBYztBQVBWLE9BVkY7QUFtQk4sbUJBQWE7QUFDVCxnQkFBUSxNQURDO0FBRVQscUJBQWEsR0FGSjtBQUdULHVCQUFlLFlBSE47QUFJVCxzQkFBYztBQUpMLE9BbkJQO0FBeUJOLG1CQUFhO0FBQ1QsZ0JBQVEsU0FEQztBQUVULG1CQUFXLEtBRkY7QUFHVCxvQkFBWSxJQUhIO0FBSVQsdUJBQWU7QUFKTjtBQXpCUCxLQUpVO0FBb0NwQixlQUFXLEVBcENTO0FBcUNwQixnQkFBWTtBQUNSLGdCQUFVO0FBQ04saUJBQVM7QUFESCxPQURGO0FBSVIseUJBQW1CO0FBQ2YsaUJBQVMsV0FETTtBQUVmLGlCQUFTO0FBRk07QUFKWCxLQXJDUTtBQThDcEIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQTlDTTtBQW1EcEIseUJBQXFCO0FBbkRELEdBQXBCO0FBc0RBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixZQUFkLENBQVA7QUFDSCxDQXZFRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgeyBcbiAgICBUeXBlcyxcbiAgICBWYWxpZGF0b3JzLCBcbiAgICBQcm9jZXNzb3JzLCBcbiAgICBHZW5lcmF0b3JzLCBcbiAgICBFcnJvcnM6IHsgQnVzaW5lc3NFcnJvciwgRGF0YVZhbGlkYXRpb25FcnJvciwgRHNPcGVyYXRpb25FcnJvciB9LCBcbiAgICBVdGlsczogeyBMYW5nOiB7IGlzTm90aGluZyB9IH0gXG59ID0gcmVxdWlyZSgnQGstc3VpdGUvb29sb25nJyk7XG4gXG5cbm1vZHVsZS5leHBvcnRzID0gKGRiLCBCYXNlRW50aXR5TW9kZWwpID0+IHtcbiAgICBjb25zdCBTdXBwbGllclNwZWMgPSBjbGFzcyBleHRlbmRzIEJhc2VFbnRpdHlNb2RlbCB7ICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHlpbmcgcHJlZGVmaW5lZCBtb2RpZmllcnMgdG8gZW50aXR5IGZpZWxkcy5cbiAgICAgICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgICAgICogQHBhcmFtIGlzVXBkYXRpbmdcbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgYXN5bmMgYXBwbHlNb2RpZmllcnNfKGNvbnRleHQsIGlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIGxldCB7cmF3LCBsYXRlc3QsIGV4aXN0aW5nLCBpMThufSA9IGNvbnRleHQ7XG4gICAgICAgICAgICBleGlzdGluZyB8fCAoZXhpc3RpbmcgPSB7fSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTdXBwbGllclNwZWMuZGIgPSBkYjtcbiAgICBTdXBwbGllclNwZWMubWV0YSA9IHtcbiAgICBcInNjaGVtYU5hbWVcIjogXCJsZXZvRm91bmRhdGlvblwiLFxuICAgIFwibmFtZVwiOiBcInN1cHBsaWVyXCIsXG4gICAgXCJrZXlGaWVsZFwiOiBcImlkXCIsXG4gICAgXCJmaWVsZHNcIjoge1xuICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3RhcnRGcm9tXCI6IDEwMDEsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIixcbiAgICAgICAgICAgIFwiYXV0b0luY3JlbWVudElkXCI6IHRydWUsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogNDAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJOYW1lXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImxlZ2FsTmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAxMDAsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTGVnYWwgTmFtZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJpc0RlbGV0ZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJyZWFkT25seVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklzIERlbGV0ZWRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImluZGV4ZXNcIjogW10sXG4gICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgIFwiYXV0b0lkXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJpZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibG9naWNhbERlbGV0aW9uXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJpc0RlbGV0ZWRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgICBcImlkXCJcbiAgICAgICAgXVxuICAgIF0sXG4gICAgXCJmaWVsZERlcGVuZGVuY2llc1wiOiB7fVxufTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFN1cHBsaWVyU3BlYywgKTtcbn07Il19