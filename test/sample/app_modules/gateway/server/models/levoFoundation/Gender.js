"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const GenderSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  GenderSpec.db = db;
  GenderSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "gender",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "indexes": [],
    "features": {
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"]],
    "fieldDependencies": {}
  };
  return Object.assign(GenderSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vR2VuZGVyLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVHlwZXMiLCJWYWxpZGF0b3JzIiwiUHJvY2Vzc29ycyIsIkdlbmVyYXRvcnMiLCJFcnJvcnMiLCJCdXNpbmVzc0Vycm9yIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIkRzT3BlcmF0aW9uRXJyb3IiLCJVdGlscyIsIkxhbmciLCJpc05vdGhpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJCYXNlRW50aXR5TW9kZWwiLCJHZW5kZXJTcGVjIiwiYXBwbHlNb2RpZmllcnNfIiwiY29udGV4dCIsImlzVXBkYXRpbmciLCJyYXciLCJsYXRlc3QiLCJleGlzdGluZyIsImkxOG4iLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU07QUFDRkMsRUFBQUEsS0FERTtBQUVGQyxFQUFBQSxVQUZFO0FBR0ZDLEVBQUFBLFVBSEU7QUFJRkMsRUFBQUEsVUFKRTtBQUtGQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsYUFBRjtBQUFpQkMsSUFBQUEsbUJBQWpCO0FBQXNDQyxJQUFBQTtBQUF0QyxHQUxOO0FBTUZDLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUE7QUFBRjtBQUFSO0FBTkwsSUFPRlgsT0FBTyxDQUFDLGlCQUFELENBUFg7O0FBVUFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxFQUFELEVBQUtDLGVBQUwsS0FBeUI7QUFDdEMsUUFBTUMsVUFBVSxHQUFHLGNBQWNELGVBQWQsQ0FBOEI7QUFPN0MsaUJBQWFFLGVBQWIsQ0FBNkJDLE9BQTdCLEVBQXNDQyxVQUF0QyxFQUFrRDtBQUM5QyxVQUFJO0FBQUNDLFFBQUFBLEdBQUQ7QUFBTUMsUUFBQUEsTUFBTjtBQUFjQyxRQUFBQSxRQUFkO0FBQXdCQyxRQUFBQTtBQUF4QixVQUFnQ0wsT0FBcEM7QUFDQUksTUFBQUEsUUFBUSxLQUFLQSxRQUFRLEdBQUcsRUFBaEIsQ0FBUjtBQUNBLGFBQU9KLE9BQVA7QUFDSDs7QUFYNEMsR0FBakQ7QUFjQUYsRUFBQUEsVUFBVSxDQUFDRixFQUFYLEdBQWdCQSxFQUFoQjtBQUNBRSxFQUFBQSxVQUFVLENBQUNRLElBQVgsR0FBa0I7QUFDbEIsa0JBQWMsZ0JBREk7QUFFbEIsWUFBUSxRQUZVO0FBR2xCLGdCQUFZLE1BSE07QUFJbEIsY0FBVTtBQUNOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FERjtBQVVOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FWRjtBQW1CTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLG9CQUFZLElBRlI7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlO0FBTlgsT0FuQkY7QUEyQk4sbUJBQWE7QUFDVCxnQkFBUSxTQURDO0FBRVQsbUJBQVcsS0FGRjtBQUdULG9CQUFZLElBSEg7QUFJVCx1QkFBZTtBQUpOO0FBM0JQLEtBSlE7QUFzQ2xCLGVBQVcsRUF0Q087QUF1Q2xCLGdCQUFZO0FBQ1IseUJBQW1CO0FBQ2YsaUJBQVMsV0FETTtBQUVmLGlCQUFTO0FBRk07QUFEWCxLQXZDTTtBQTZDbEIsa0JBQWMsQ0FDVixDQUNJLE1BREosQ0FEVSxDQTdDSTtBQWtEbEIseUJBQXFCO0FBbERILEdBQWxCO0FBcURBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixVQUFkLENBQVA7QUFDSCxDQXRFRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgeyBcbiAgICBUeXBlcyxcbiAgICBWYWxpZGF0b3JzLCBcbiAgICBQcm9jZXNzb3JzLCBcbiAgICBHZW5lcmF0b3JzLCBcbiAgICBFcnJvcnM6IHsgQnVzaW5lc3NFcnJvciwgRGF0YVZhbGlkYXRpb25FcnJvciwgRHNPcGVyYXRpb25FcnJvciB9LCBcbiAgICBVdGlsczogeyBMYW5nOiB7IGlzTm90aGluZyB9IH0gXG59ID0gcmVxdWlyZSgnQGstc3VpdGUvb29sb25nJyk7XG4gXG5cbm1vZHVsZS5leHBvcnRzID0gKGRiLCBCYXNlRW50aXR5TW9kZWwpID0+IHtcbiAgICBjb25zdCBHZW5kZXJTcGVjID0gY2xhc3MgZXh0ZW5kcyBCYXNlRW50aXR5TW9kZWwgeyAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5aW5nIHByZWRlZmluZWQgbW9kaWZpZXJzIHRvIGVudGl0eSBmaWVsZHMuXG4gICAgICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSBpc1VwZGF0aW5nXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFzeW5jIGFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICBsZXQge3JhdywgbGF0ZXN0LCBleGlzdGluZywgaTE4bn0gPSBjb250ZXh0O1xuICAgICAgICAgICAgZXhpc3RpbmcgfHwgKGV4aXN0aW5nID0ge30pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgR2VuZGVyU3BlYy5kYiA9IGRiO1xuICAgIEdlbmRlclNwZWMubWV0YSA9IHtcbiAgICBcInNjaGVtYU5hbWVcIjogXCJsZXZvRm91bmRhdGlvblwiLFxuICAgIFwibmFtZVwiOiBcImdlbmRlclwiLFxuICAgIFwia2V5RmllbGRcIjogXCJjb2RlXCIsXG4gICAgXCJmaWVsZHNcIjoge1xuICAgICAgICBcImNvZGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcImNvZGVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDb2RlXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogNDAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJOYW1lXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJvcHRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJkZXNjXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRGVzY1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNEZWxldGVkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwicmVhZE9ubHlcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJcyBEZWxldGVkXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJpbmRleGVzXCI6IFtdLFxuICAgIFwiZmVhdHVyZXNcIjoge1xuICAgICAgICBcImxvZ2ljYWxEZWxldGlvblwiOiB7XG4gICAgICAgICAgICBcImZpZWxkXCI6IFwiaXNEZWxldGVkXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IHRydWVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ1bmlxdWVLZXlzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgICAgXCJjb2RlXCJcbiAgICAgICAgXVxuICAgIF0sXG4gICAgXCJmaWVsZERlcGVuZGVuY2llc1wiOiB7fVxufTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKEdlbmRlclNwZWMsICk7XG59OyJdfQ==