"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServiceReviewSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});

      if (!isNothing(latest['rating'])) {
        if (!(Validators.min(latest['rating'], 1) && Validators.max(latest['rating'], 5))) {
          throw new DataValidationError('Invalid "rating".', {
            entity: this.meta.name,
            field: 'rating'
          });
        }
      }

      return context;
    }

  };
  ServiceReviewSpec.db = db;
  ServiceReviewSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "serviceReview",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "rating": {
        "type": "integer",
        "digits": 1,
        "optional": true,
        "modifiers": [{
          "oolType": "Validator",
          "name": "min",
          "args": [1]
        }, {
          "oolType": "Validator",
          "name": "max",
          "args": [5]
        }],
        "displayName": "Rating"
      },
      "comment": {
        "type": "text",
        "displayName": "Comment"
      },
      "createdAt": {
        "type": "datetime",
        "auto": true,
        "readOnly": true,
        "writeOnce": true,
        "displayName": "Created At",
        "isCreateTimestamp": true,
        "createByDb": true
      },
      "service": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 10002,
        "displayName": "Id"
      }
    },
    "indexes": [],
    "features": {
      "autoId": {
        "field": "id"
      },
      "createTimestamp": {
        "field": "createdAt"
      }
    },
    "uniqueKeys": [["id"]],
    "fieldDependencies": {
      "rating": []
    }
  };
  return Object.assign(ServiceReviewSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU2VydmljZVJldmlldy5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlR5cGVzIiwiVmFsaWRhdG9ycyIsIlByb2Nlc3NvcnMiLCJHZW5lcmF0b3JzIiwiRXJyb3JzIiwiQnVzaW5lc3NFcnJvciIsIkRhdGFWYWxpZGF0aW9uRXJyb3IiLCJEc09wZXJhdGlvbkVycm9yIiwiVXRpbHMiLCJMYW5nIiwiaXNOb3RoaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsImRiIiwiQmFzZUVudGl0eU1vZGVsIiwiU2VydmljZVJldmlld1NwZWMiLCJhcHBseU1vZGlmaWVyc18iLCJjb250ZXh0IiwiaXNVcGRhdGluZyIsInJhdyIsImxhdGVzdCIsImV4aXN0aW5nIiwiaTE4biIsIm1pbiIsIm1heCIsImVudGl0eSIsIm1ldGEiLCJuYW1lIiwiZmllbGQiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUEsTUFBTTtBQUNGQyxFQUFBQSxLQURFO0FBRUZDLEVBQUFBLFVBRkU7QUFHRkMsRUFBQUEsVUFIRTtBQUlGQyxFQUFBQSxVQUpFO0FBS0ZDLEVBQUFBLE1BQU0sRUFBRTtBQUFFQyxJQUFBQSxhQUFGO0FBQWlCQyxJQUFBQSxtQkFBakI7QUFBc0NDLElBQUFBO0FBQXRDLEdBTE47QUFNRkMsRUFBQUEsS0FBSyxFQUFFO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFFQyxNQUFBQTtBQUFGO0FBQVI7QUFOTCxJQU9GWCxPQUFPLENBQUMsaUJBQUQsQ0FQWDs7QUFVQVksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEVBQUQsRUFBS0MsZUFBTCxLQUF5QjtBQUN0QyxRQUFNQyxpQkFBaUIsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBT3BELGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7O0FBQ0EsVUFBSSxDQUFDWCxTQUFTLENBQUNVLE1BQU0sQ0FBQyxRQUFELENBQVAsQ0FBZCxFQUFrQztBQUU5QixZQUFJLEVBQUVuQixVQUFVLENBQUNzQixHQUFYLENBQWVILE1BQU0sQ0FBQyxRQUFELENBQXJCLEVBQWlDLENBQWpDLEtBQXVDbkIsVUFBVSxDQUFDdUIsR0FBWCxDQUFlSixNQUFNLENBQUMsUUFBRCxDQUFyQixFQUFpQyxDQUFqQyxDQUF6QyxDQUFKLEVBQW1GO0FBQy9FLGdCQUFNLElBQUlkLG1CQUFKLENBQXdCLG1CQUF4QixFQUE2QztBQUMvQ21CLFlBQUFBLE1BQU0sRUFBRSxLQUFLQyxJQUFMLENBQVVDLElBRDZCO0FBRS9DQyxZQUFBQSxLQUFLLEVBQUU7QUFGd0MsV0FBN0MsQ0FBTjtBQUlIO0FBQ0o7O0FBQ0QsYUFBT1gsT0FBUDtBQUNIOztBQXBCbUQsR0FBeEQ7QUF1QkFGLEVBQUFBLGlCQUFpQixDQUFDRixFQUFsQixHQUF1QkEsRUFBdkI7QUFDQUUsRUFBQUEsaUJBQWlCLENBQUNXLElBQWxCLEdBQXlCO0FBQ3pCLGtCQUFjLGdCQURXO0FBRXpCLFlBQVEsZUFGaUI7QUFHekIsZ0JBQVksSUFIYTtBQUl6QixjQUFVO0FBQ04sWUFBTTtBQUNGLGdCQUFRLFNBRE47QUFFRixnQkFBUSxJQUZOO0FBR0YscUJBQWEsSUFIWDtBQUlGLHVCQUFlLElBSmI7QUFLRiwyQkFBbUIsSUFMakI7QUFNRixzQkFBYztBQU5aLE9BREE7QUFTTixnQkFBVTtBQUNOLGdCQUFRLFNBREY7QUFFTixrQkFBVSxDQUZKO0FBR04sb0JBQVksSUFITjtBQUlOLHFCQUFhLENBQ1Q7QUFDSSxxQkFBVyxXQURmO0FBRUksa0JBQVEsS0FGWjtBQUdJLGtCQUFRLENBQ0osQ0FESTtBQUhaLFNBRFMsRUFRVDtBQUNJLHFCQUFXLFdBRGY7QUFFSSxrQkFBUSxLQUZaO0FBR0ksa0JBQVEsQ0FDSixDQURJO0FBSFosU0FSUyxDQUpQO0FBb0JOLHVCQUFlO0FBcEJULE9BVEo7QUErQk4saUJBQVc7QUFDUCxnQkFBUSxNQUREO0FBRVAsdUJBQWU7QUFGUixPQS9CTDtBQW1DTixtQkFBYTtBQUNULGdCQUFRLFVBREM7QUFFVCxnQkFBUSxJQUZDO0FBR1Qsb0JBQVksSUFISDtBQUlULHFCQUFhLElBSko7QUFLVCx1QkFBZSxZQUxOO0FBTVQsNkJBQXFCLElBTlo7QUFPVCxzQkFBYztBQVBMLE9BbkNQO0FBNENOLGlCQUFXO0FBQ1AsZ0JBQVEsU0FERDtBQUVQLGdCQUFRLElBRkQ7QUFHUCxxQkFBYSxJQUhOO0FBSVAscUJBQWEsS0FKTjtBQUtQLHVCQUFlO0FBTFI7QUE1Q0wsS0FKZTtBQXdEekIsZUFBVyxFQXhEYztBQXlEekIsZ0JBQVk7QUFDUixnQkFBVTtBQUNOLGlCQUFTO0FBREgsT0FERjtBQUlSLHlCQUFtQjtBQUNmLGlCQUFTO0FBRE07QUFKWCxLQXpEYTtBQWlFekIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQWpFVztBQXNFekIseUJBQXFCO0FBQ2pCLGdCQUFVO0FBRE87QUF0RUksR0FBekI7QUEyRUEsU0FBT0csTUFBTSxDQUFDQyxNQUFQLENBQWNmLGlCQUFkLENBQVA7QUFDSCxDQXJHRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgeyBcbiAgICBUeXBlcyxcbiAgICBWYWxpZGF0b3JzLCBcbiAgICBQcm9jZXNzb3JzLCBcbiAgICBHZW5lcmF0b3JzLCBcbiAgICBFcnJvcnM6IHsgQnVzaW5lc3NFcnJvciwgRGF0YVZhbGlkYXRpb25FcnJvciwgRHNPcGVyYXRpb25FcnJvciB9LCBcbiAgICBVdGlsczogeyBMYW5nOiB7IGlzTm90aGluZyB9IH0gXG59ID0gcmVxdWlyZSgnQGstc3VpdGUvb29sb25nJyk7XG4gXG5cbm1vZHVsZS5leHBvcnRzID0gKGRiLCBCYXNlRW50aXR5TW9kZWwpID0+IHtcbiAgICBjb25zdCBTZXJ2aWNlUmV2aWV3U3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIGlmICghaXNOb3RoaW5nKGxhdGVzdFsncmF0aW5nJ10pKSB7XG4gICAgICAgICAgICAgICAgLy9WYWxpZGF0aW5nIFwicmF0aW5nXCJcbiAgICAgICAgICAgICAgICBpZiAoIShWYWxpZGF0b3JzLm1pbihsYXRlc3RbJ3JhdGluZyddLCAxKSAmJiBWYWxpZGF0b3JzLm1heChsYXRlc3RbJ3JhdGluZyddLCA1KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERhdGFWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgXCJyYXRpbmdcIi4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IHRoaXMubWV0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICdyYXRpbmcnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNlcnZpY2VSZXZpZXdTcGVjLmRiID0gZGI7XG4gICAgU2VydmljZVJldmlld1NwZWMubWV0YSA9IHtcbiAgICBcInNjaGVtYU5hbWVcIjogXCJsZXZvRm91bmRhdGlvblwiLFxuICAgIFwibmFtZVwiOiBcInNlcnZpY2VSZXZpZXdcIixcbiAgICBcImtleUZpZWxkXCI6IFwiaWRcIixcbiAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCIsXG4gICAgICAgICAgICBcImF1dG9JbmNyZW1lbnRJZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJyYXRpbmdcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJkaWdpdHNcIjogMSxcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibW9kaWZpZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwib29sVHlwZVwiOiBcIlZhbGlkYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJtaW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm9vbFR5cGVcIjogXCJWYWxpZGF0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibWF4XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICA1XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlJhdGluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWVudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ29tbWVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY3JlYXRlZEF0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICBcImF1dG9cIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicmVhZE9ubHlcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwid3JpdGVPbmNlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ3JlYXRlZCBBdFwiLFxuICAgICAgICAgICAgXCJpc0NyZWF0ZVRpbWVzdGFtcFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXJ2aWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3RhcnRGcm9tXCI6IDEwMDAyLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJpbmRleGVzXCI6IFtdLFxuICAgIFwiZmVhdHVyZXNcIjoge1xuICAgICAgICBcImF1dG9JZFwiOiB7XG4gICAgICAgICAgICBcImZpZWxkXCI6IFwiaWRcIlxuICAgICAgICB9LFxuICAgICAgICBcImNyZWF0ZVRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcImZpZWxkXCI6IFwiY3JlYXRlZEF0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ1bmlxdWVLZXlzXCI6IFtcbiAgICAgICAgW1xuICAgICAgICAgICAgXCJpZFwiXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFwiZmllbGREZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcInJhdGluZ1wiOiBbXVxuICAgIH1cbn07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihTZXJ2aWNlUmV2aWV3U3BlYywgKTtcbn07Il19