"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServiceReviewSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});

      if (!isNothing(latest['rating'])) {
        if (!(Validators.min(latest['rating'], 1) && Validators.max(latest['rating'], 5))) {
          throw new DataValidationError('Invalid "rating".', {
            entity: this.meta.name,
            field: 'rating'
          });
        }
      }

      return context;
    }

  };
  ServiceReviewSpec.db = db;
  ServiceReviewSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "serviceReview",
    "keyField": "id",
    "fields": {
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "rating": {
        "type": "integer",
        "digits": 1,
        "optional": true,
        "modifiers": [{
          "oolType": "Validator",
          "name": "min",
          "args": [1]
        }, {
          "oolType": "Validator",
          "name": "max",
          "args": [5]
        }],
        "displayName": "Rating"
      },
      "comment": {
        "type": "text",
        "displayName": "Comment"
      },
      "createdAt": {
        "type": "datetime",
        "auto": true,
        "readOnly": true,
        "writeOnce": true,
        "displayName": "Created At",
        "isCreateTimestamp": true,
        "createByDb": true
      },
      "service": {
        "type": "integer",
        "displayName": "serviceId",
        "createByDb": true
      }
    },
    "features": {
      "autoId": {
        "field": "id"
      },
      "createTimestamp": {
        "field": "createdAt"
      }
    },
    "uniqueKeys": [["id"]],
    "associations": {
      "service": {
        "entity": "service",
        "isList": false
      },
      "replies": {
        "entity": "reviewReply",
        "isList": true,
        "remoteField": "reviewTopic",
        "optional": true
      }
    },
    "fieldDependencies": {
      "id": ["id"],
      "createdAt": ["createdAt"],
      "rating": []
    }
  };
  return Object.assign(ServiceReviewSpec, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,