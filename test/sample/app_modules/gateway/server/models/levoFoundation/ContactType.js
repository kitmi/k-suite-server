"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ContactTypeSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ContactTypeSpec.db = db;
  ContactTypeSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "contactType",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "features": {
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"]]
  };
  return Object.assign(ContactTypeSpec, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vQ29udGFjdFR5cGUuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIkNvbnRhY3RUeXBlU3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwibWV0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLGVBQWUsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBT2xELGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWGlELEdBQXREO0FBY0FGLEVBQUFBLGVBQWUsQ0FBQ0YsRUFBaEIsR0FBcUJBLEVBQXJCO0FBQ0FFLEVBQUFBLGVBQWUsQ0FBQ1EsSUFBaEIsR0FBdUI7QUFDbkIsa0JBQWMsZ0JBREs7QUFFbkIsWUFBUSxhQUZXO0FBR25CLGdCQUFZLE1BSE87QUFJbkIsY0FBVTtBQUNOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FERjtBQVVOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUoscUJBQWEsRUFGVDtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWUsTUFOWDtBQU9KLHNCQUFjO0FBUFYsT0FWRjtBQW1CTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLG9CQUFZLElBRlI7QUFHSixvQkFBWSxDQUNSLE1BRFEsQ0FIUjtBQU1KLHVCQUFlO0FBTlgsT0FuQkY7QUEyQk4sbUJBQWE7QUFDVCxnQkFBUSxTQURDO0FBRVQsbUJBQVcsS0FGRjtBQUdULG9CQUFZLElBSEg7QUFJVCx1QkFBZTtBQUpOO0FBM0JQLEtBSlM7QUFzQ25CLGdCQUFZO0FBQ1IseUJBQW1CO0FBQ2YsaUJBQVMsV0FETTtBQUVmLGlCQUFTO0FBRk07QUFEWCxLQXRDTztBQTRDbkIsa0JBQWMsQ0FDVixDQUNJLE1BREosQ0FEVTtBQTVDSyxHQUF2QjtBQW1EQSxTQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsZUFBZCxFQUErQixFQUEvQixDQUFQO0FBQ0gsQ0FwRUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgQ29udGFjdFR5cGVTcGVjID0gY2xhc3MgZXh0ZW5kcyBCYXNlRW50aXR5TW9kZWwgeyAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5aW5nIHByZWRlZmluZWQgbW9kaWZpZXJzIHRvIGVudGl0eSBmaWVsZHMuXG4gICAgICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSBpc1VwZGF0aW5nXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFzeW5jIGFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICBsZXQge3JhdywgbGF0ZXN0LCBleGlzdGluZywgaTE4bn0gPSBjb250ZXh0O1xuICAgICAgICAgICAgZXhpc3RpbmcgfHwgKGV4aXN0aW5nID0ge30pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29udGFjdFR5cGVTcGVjLmRiID0gZGI7XG4gICAgQ29udGFjdFR5cGVTcGVjLm1ldGEgPSB7XG4gICAgICAgIFwic2NoZW1hTmFtZVwiOiBcImxldm9Gb3VuZGF0aW9uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImNvbnRhY3RUeXBlXCIsXG4gICAgICAgIFwia2V5RmllbGRcIjogXCJjb2RlXCIsXG4gICAgICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgICAgIFwiY29kZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDIwLFxuICAgICAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImNvZGVcIlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNvZGVcIixcbiAgICAgICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDQwLFxuICAgICAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVzY1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEZXNjXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImlzRGVsZXRlZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcInJlYWRPbmx5XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklzIERlbGV0ZWRcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImZlYXR1cmVzXCI6IHtcbiAgICAgICAgICAgIFwibG9naWNhbERlbGV0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICBcImZpZWxkXCI6IFwiaXNEZWxldGVkXCIsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidW5pcXVlS2V5c1wiOiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgXCJjb2RlXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgIH07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihDb250YWN0VHlwZVNwZWMsIHt9KTtcbn07Il19