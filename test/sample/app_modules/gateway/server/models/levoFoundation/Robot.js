"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const RobotSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});

      if (!isNothing(latest['avatar'])) {
        if (!Validators.isURL(latest['avatar'])) {
          throw new DataValidationError('Invalid "avatar".', {
            entity: this.meta.name,
            field: 'avatar'
          });
        }
      }

      if (!isNothing(latest['video'])) {
        if (!Validators.isURL(latest['video'])) {
          throw new DataValidationError('Invalid "video".', {
            entity: this.meta.name,
            field: 'video'
          });
        }
      }

      if (!isNothing(latest['voice'])) {
        if (!Validators.isURL(latest['voice'])) {
          throw new DataValidationError('Invalid "voice".', {
            entity: this.meta.name,
            field: 'voice'
          });
        }
      }

      if (!isNothing(latest['email'])) {
        if (!Validators.isEmail(latest['email'])) {
          throw new DataValidationError('Invalid "email".', {
            entity: this.meta.name,
            field: 'email'
          });
        }
      }

      return context;
    }

  };
  RobotSpec.db = db;
  RobotSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "robot",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "introduction": {
        "type": "text",
        "displayName": "Introduction"
      },
      "voiceScript": {
        "type": "text",
        "displayName": "Voice Script"
      },
      "avatar": {
        "type": "text",
        "maxLength": 2000,
        "modifiers": [{
          "oolType": "Validator",
          "name": "isURL"
        }],
        "subClass": ["url"],
        "displayName": "Avatar",
        "createByDb": true
      },
      "images": {
        "type": "array",
        "optional": true,
        "displayName": "Images"
      },
      "video": {
        "type": "text",
        "maxLength": 2000,
        "optional": true,
        "modifiers": [{
          "oolType": "Validator",
          "name": "isURL"
        }],
        "subClass": ["url"],
        "displayName": "Video"
      },
      "voice": {
        "type": "text",
        "maxLength": 2000,
        "optional": true,
        "modifiers": [{
          "oolType": "Validator",
          "name": "isURL"
        }],
        "subClass": ["url"],
        "displayName": "Voice"
      },
      "email": {
        "type": "text",
        "maxLength": 200,
        "modifiers": [{
          "oolType": "Validator",
          "name": "isEmail"
        }],
        "subClass": ["email"],
        "displayName": "Email",
        "createByDb": true
      },
      "firstname": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Firstname",
        "createByDb": true
      },
      "lastname": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Lastname",
        "createByDb": true
      },
      "nickname": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Nickname",
        "createByDb": true
      },
      "expertTitle": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Expert Title",
        "createByDb": true
      },
      "address": {
        "type": "text",
        "maxLength": 200,
        "displayName": "Address",
        "createByDb": true
      },
      "createdAt": {
        "type": "datetime",
        "auto": true,
        "readOnly": true,
        "writeOnce": true,
        "displayName": "Created At",
        "isCreateTimestamp": true,
        "createByDb": true
      },
      "updatedAt": {
        "type": "datetime",
        "readOnly": true,
        "forceUpdate": true,
        "optional": true,
        "displayName": "Updated At",
        "isUpdateTimestamp": true,
        "updateByDb": true
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      },
      "service": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 10002,
        "displayName": "Id"
      },
      "gender": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      }
    },
    "indexes": [],
    "features": {
      "createTimestamp": {
        "field": "createdAt"
      },
      "updateTimestamp": {
        "field": "updatedAt"
      },
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"]],
    "fieldDependencies": {}
  };
  return Object.assign(RobotSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vUm9ib3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJUeXBlcyIsIlZhbGlkYXRvcnMiLCJQcm9jZXNzb3JzIiwiR2VuZXJhdG9ycyIsIkVycm9ycyIsIkJ1c2luZXNzRXJyb3IiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwiRHNPcGVyYXRpb25FcnJvciIsIlV0aWxzIiwiTGFuZyIsImlzTm90aGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkYiIsIkJhc2VFbnRpdHlNb2RlbCIsIlJvYm90U3BlYyIsImFwcGx5TW9kaWZpZXJzXyIsImNvbnRleHQiLCJpc1VwZGF0aW5nIiwicmF3IiwibGF0ZXN0IiwiZXhpc3RpbmciLCJpMThuIiwiaXNVUkwiLCJlbnRpdHkiLCJtZXRhIiwibmFtZSIsImZpZWxkIiwiaXNFbWFpbCIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLEtBREU7QUFFRkMsRUFBQUEsVUFGRTtBQUdGQyxFQUFBQSxVQUhFO0FBSUZDLEVBQUFBLFVBSkU7QUFLRkMsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLGFBQUY7QUFBaUJDLElBQUFBLG1CQUFqQjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FMTjtBQU1GQyxFQUFBQSxLQUFLLEVBQUU7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBO0FBQUY7QUFBUjtBQU5MLElBT0ZYLE9BQU8sQ0FBQyxpQkFBRCxDQVBYOztBQVVBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsRUFBRCxFQUFLQyxlQUFMLEtBQXlCO0FBQ3RDLFFBQU1DLFNBQVMsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBTzVDLGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMs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QUE0TGpCLHlCQUFxQjtBQTVMSixHQUFqQjtBQStMQSxTQUFPSSxNQUFNLENBQUNDLE1BQVAsQ0FBY2YsU0FBZCxDQUFQO0FBQ0gsQ0FwUEQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgUm9ib3RTcGVjID0gY2xhc3MgZXh0ZW5kcyBCYXNlRW50aXR5TW9kZWwgeyAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGx5aW5nIHByZWRlZmluZWQgbW9kaWZpZXJzIHRvIGVudGl0eSBmaWVsZHMuXG4gICAgICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSBpc1VwZGF0aW5nXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFzeW5jIGFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKSB7XG4gICAgICAgICAgICBsZXQge3JhdywgbGF0ZXN0LCBleGlzdGluZywgaTE4bn0gPSBjb250ZXh0O1xuICAgICAgICAgICAgZXhpc3RpbmcgfHwgKGV4aXN0aW5nID0ge30pO1xuICAgICAgICAgICAgaWYgKCFpc05vdGhpbmcobGF0ZXN0WydhdmF0YXInXSkpIHtcbiAgICAgICAgICAgICAgICAvL1ZhbGlkYXRpbmcgXCJhdmF0YXJcIlxuICAgICAgICAgICAgICAgIGlmICghVmFsaWRhdG9ycy5pc1VSTChsYXRlc3RbJ2F2YXRhciddKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YVZhbGlkYXRpb25FcnJvcignSW52YWxpZCBcImF2YXRhclwiLicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogdGhpcy5tZXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ2F2YXRhcidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc05vdGhpbmcobGF0ZXN0Wyd2aWRlbyddKSkge1xuICAgICAgICAgICAgICAgIC8vVmFsaWRhdGluZyBcInZpZGVvXCJcbiAgICAgICAgICAgICAgICBpZiAoIVZhbGlkYXRvcnMuaXNVUkwobGF0ZXN0Wyd2aWRlbyddKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YVZhbGlkYXRpb25FcnJvcignSW52YWxpZCBcInZpZGVvXCIuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiB0aGlzLm1ldGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiAndmlkZW8nXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNOb3RoaW5nKGxhdGVzdFsndm9pY2UnXSkpIHtcbiAgICAgICAgICAgICAgICAvL1ZhbGlkYXRpbmcgXCJ2b2ljZVwiXG4gICAgICAgICAgICAgICAgaWYgKCFWYWxpZGF0b3JzLmlzVVJMKGxhdGVzdFsndm9pY2UnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERhdGFWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgXCJ2b2ljZVwiLicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogdGhpcy5tZXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ3ZvaWNlJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTm90aGluZyhsYXRlc3RbJ2VtYWlsJ10pKSB7XG4gICAgICAgICAgICAgICAgLy9WYWxpZGF0aW5nIFwiZW1haWxcIlxuICAgICAgICAgICAgICAgIGlmICghVmFsaWRhdG9ycy5pc0VtYWlsKGxhdGVzdFsnZW1haWwnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERhdGFWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgXCJlbWFpbFwiLicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogdGhpcy5tZXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ2VtYWlsJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBSb2JvdFNwZWMuZGIgPSBkYjtcbiAgICBSb2JvdFNwZWMubWV0YSA9IHtcbiAgICBcInNjaGVtYU5hbWVcIjogXCJsZXZvRm91bmRhdGlvblwiLFxuICAgIFwibmFtZVwiOiBcInJvYm90XCIsXG4gICAgXCJrZXlGaWVsZFwiOiBcImNvZGVcIixcbiAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgIFwiY29kZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMCxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwiY29kZVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNvZGVcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW50cm9kdWN0aW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJbnRyb2R1Y3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcInZvaWNlU2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJWb2ljZSBTY3JpcHRcIlxuICAgICAgICB9LFxuICAgICAgICBcImF2YXRhclwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMDAwLFxuICAgICAgICAgICAgXCJtb2RpZmllcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJvb2xUeXBlXCI6IFwiVmFsaWRhdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImlzVVJMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ1cmxcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBdmF0YXJcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICBcIm9wdGlvbmFsXCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSW1hZ2VzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ2aWRlb1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMDAwLFxuICAgICAgICAgICAgXCJvcHRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtb2RpZmllcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJvb2xUeXBlXCI6IFwiVmFsaWRhdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImlzVVJMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ1cmxcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJWaWRlb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidm9pY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjAwMCxcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibW9kaWZpZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwib29sVHlwZVwiOiBcIlZhbGlkYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpc1VSTFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwidXJsXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVm9pY2VcIlxuICAgICAgICB9LFxuICAgICAgICBcImVtYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDIwMCxcbiAgICAgICAgICAgIFwibW9kaWZpZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwib29sVHlwZVwiOiBcIlZhbGlkYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpc0VtYWlsXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJlbWFpbFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVtYWlsXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImZpcnN0bmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiA0MCxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwibmFtZVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZpcnN0bmFtZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXN0bmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiA0MCxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwibmFtZVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkxhc3RuYW1lXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm5pY2tuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDQwLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTmlja25hbWVcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhwZXJ0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogNDAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFeHBlcnQgVGl0bGVcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWRkcmVzc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMDAsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQWRkcmVzc1wiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJjcmVhdGVkQXRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJyZWFkT25seVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDcmVhdGVkIEF0XCIsXG4gICAgICAgICAgICBcImlzQ3JlYXRlVGltZXN0YW1wXCI6IHRydWUsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInVwZGF0ZWRBdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgXCJyZWFkT25seVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJmb3JjZVVwZGF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJvcHRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlVwZGF0ZWQgQXRcIixcbiAgICAgICAgICAgIFwiaXNVcGRhdGVUaW1lc3RhbXBcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidXBkYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNEZWxldGVkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwicmVhZE9ubHlcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJcyBEZWxldGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXJ2aWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3RhcnRGcm9tXCI6IDEwMDAyLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZW5kZXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcImNvZGVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDb2RlXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImluZGV4ZXNcIjogW10sXG4gICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgIFwiY3JlYXRlVGltZXN0YW1wXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJjcmVhdGVkQXRcIlxuICAgICAgICB9LFxuICAgICAgICBcInVwZGF0ZVRpbWVzdGFtcFwiOiB7XG4gICAgICAgICAgICBcImZpZWxkXCI6IFwidXBkYXRlZEF0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsb2dpY2FsRGVsZXRpb25cIjoge1xuICAgICAgICAgICAgXCJmaWVsZFwiOiBcImlzRGVsZXRlZFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidW5pcXVlS2V5c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIFwiY29kZVwiXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFwiZmllbGREZXBlbmRlbmNpZXNcIjoge31cbn07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihSb2JvdFNwZWMsICk7XG59OyJdfQ==