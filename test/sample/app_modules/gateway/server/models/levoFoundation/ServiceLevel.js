"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServiceLevelSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ServiceLevelSpec.db = db;
  ServiceLevelSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "serviceLevel",
    "keyField": "code",
    "fields": {
      "code": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "isDeleted": {
        "type": "boolean",
        "default": false,
        "readOnly": true,
        "displayName": "Is Deleted"
      }
    },
    "features": {
      "logicalDeletion": {
        "field": "isDeleted",
        "value": true
      }
    },
    "uniqueKeys": [["code"]]
  };
  return Object.assign(ServiceLevelSpec, {});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU2VydmljZUxldmVsLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVHlwZXMiLCJWYWxpZGF0b3JzIiwiUHJvY2Vzc29ycyIsIkdlbmVyYXRvcnMiLCJFcnJvcnMiLCJCdXNpbmVzc0Vycm9yIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIkRzT3BlcmF0aW9uRXJyb3IiLCJVdGlscyIsIkxhbmciLCJpc05vdGhpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJCYXNlRW50aXR5TW9kZWwiLCJTZXJ2aWNlTGV2ZWxTcGVjIiwiYXBwbHlNb2RpZmllcnNfIiwiY29udGV4dCIsImlzVXBkYXRpbmciLCJyYXciLCJsYXRlc3QiLCJleGlzdGluZyIsImkxOG4iLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU07QUFDRkMsRUFBQUEsS0FERTtBQUVGQyxFQUFBQSxVQUZFO0FBR0ZDLEVBQUFBLFVBSEU7QUFJRkMsRUFBQUEsVUFKRTtBQUtGQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsYUFBRjtBQUFpQkMsSUFBQUEsbUJBQWpCO0FBQXNDQyxJQUFBQTtBQUF0QyxHQUxOO0FBTUZDLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUE7QUFBRjtBQUFSO0FBTkwsSUFPRlgsT0FBTyxDQUFDLGlCQUFELENBUFg7O0FBVUFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxFQUFELEVBQUtDLGVBQUwsS0FBeUI7QUFDdEMsUUFBTUMsZ0JBQWdCLEdBQUcsY0FBY0QsZUFBZCxDQUE4QjtBQU9uRCxpQkFBYUUsZUFBYixDQUE2QkMsT0FBN0IsRUFBc0NDLFVBQXRDLEVBQWtEO0FBQzlDLFVBQUk7QUFBQ0MsUUFBQUEsR0FBRDtBQUFNQyxRQUFBQSxNQUFOO0FBQWNDLFFBQUFBLFFBQWQ7QUFBd0JDLFFBQUFBO0FBQXhCLFVBQWdDTCxPQUFwQztBQUNBSSxNQUFBQSxRQUFRLEtBQUtBLFFBQVEsR0FBRyxFQUFoQixDQUFSO0FBQ0EsYUFBT0osT0FBUDtBQUNIOztBQVhrRCxHQUF2RDtBQWNBRixFQUFBQSxnQkFBZ0IsQ0FBQ0YsRUFBakIsR0FBc0JBLEVBQXRCO0FBQ0FFLEVBQUFBLGdCQUFnQixDQUFDUSxJQUFqQixHQUF3QjtBQUNwQixrQkFBYyxnQkFETTtBQUVwQixZQUFRLGNBRlk7QUFHcEIsZ0JBQVksTUFIUTtBQUlwQixjQUFVO0FBQ04sY0FBUTtBQUNKLGdCQUFRLE1BREo7QUFFSixxQkFBYSxFQUZUO0FBR0osb0JBQVksQ0FDUixNQURRLENBSFI7QUFNSix1QkFBZSxNQU5YO0FBT0osc0JBQWM7QUFQVixPQURGO0FBVU4sY0FBUTtBQUNKLGdCQUFRLE1BREo7QUFFSixxQkFBYSxFQUZUO0FBR0osb0JBQVksQ0FDUixNQURRLENBSFI7QUFNSix1QkFBZSxNQU5YO0FBT0osc0JBQWM7QUFQVixPQVZGO0FBbUJOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUosb0JBQVksSUFGUjtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWU7QUFOWCxPQW5CRjtBQTJCTixtQkFBYTtBQUNULGdCQUFRLFNBREM7QUFFVCxtQkFBVyxLQUZGO0FBR1Qsb0JBQVksSUFISDtBQUlULHVCQUFlO0FBSk47QUEzQlAsS0FKVTtBQXNDcEIsZ0JBQVk7QUFDUix5QkFBbUI7QUFDZixpQkFBUyxXQURNO0FBRWYsaUJBQVM7QUFGTTtBQURYLEtBdENRO0FBNENwQixrQkFBYyxDQUNWLENBQ0ksTUFESixDQURVO0FBNUNNLEdBQXhCO0FBbURBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixnQkFBZCxFQUFnQyxFQUFoQyxDQUFQO0FBQ0gsQ0FwRUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgU2VydmljZUxldmVsU3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNlcnZpY2VMZXZlbFNwZWMuZGIgPSBkYjtcbiAgICBTZXJ2aWNlTGV2ZWxTcGVjLm1ldGEgPSB7XG4gICAgICAgIFwic2NoZW1hTmFtZVwiOiBcImxldm9Gb3VuZGF0aW9uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNlcnZpY2VMZXZlbFwiLFxuICAgICAgICBcImtleUZpZWxkXCI6IFwiY29kZVwiLFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcImNvZGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcIm1heExlbmd0aFwiOiAyMCxcbiAgICAgICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJjb2RlXCJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDb2RlXCIsXG4gICAgICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcIm1heExlbmd0aFwiOiA0MCxcbiAgICAgICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRlc2NcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcIm9wdGlvbmFsXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRGVzY1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJpc0RlbGV0ZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJyZWFkT25seVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJcyBEZWxldGVkXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgICAgICBcImxvZ2ljYWxEZWxldGlvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJmaWVsZFwiOiBcImlzRGVsZXRlZFwiLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFwiY29kZVwiXG4gICAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oU2VydmljZUxldmVsU3BlYywge30pO1xufTsiXX0=