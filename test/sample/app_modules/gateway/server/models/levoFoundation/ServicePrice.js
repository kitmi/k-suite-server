"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServicePriceSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ServicePriceSpec.db = db;
  ServicePriceSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "servicePrice",
    "keyField": "id",
    "fields": {
      "startDate": {
        "type": "datetime",
        "default": {
          "oolType": "SymbolToken",
          "name": "now"
        },
        "displayName": "Start Date"
      },
      "endDate": {
        "type": "datetime",
        "optional": true,
        "displayName": "End Date"
      },
      "isValid": {
        "type": "boolean",
        "displayName": "Is Valid",
        "createByDb": true
      },
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "unit": {
        "type": "text",
        "maxLength": 20,
        "displayName": "Unit",
        "createByDb": true
      },
      "quantity": {
        "type": "integer",
        "displayName": "Quantity",
        "createByDb": true
      },
      "amount": {
        "type": "number",
        "subClass": ["money"],
        "displayName": "Amount",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "subClass": ["desc"],
        "displayName": "Desc"
      },
      "service": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 10002,
        "displayName": "Id"
      },
      "servicePackage": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "startFrom": 10002,
        "displayName": "Id",
        "optional": true
      },
      "serviceLevel": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      }
    },
    "indexes": [],
    "features": {
      "autoId": {
        "field": "id"
      }
    },
    "uniqueKeys": [["id"]],
    "fieldDependencies": {}
  };
  return Object.assign(ServicePriceSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU2VydmljZVByaWNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVHlwZXMiLCJWYWxpZGF0b3JzIiwiUHJvY2Vzc29ycyIsIkdlbmVyYXRvcnMiLCJFcnJvcnMiLCJCdXNpbmVzc0Vycm9yIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIkRzT3BlcmF0aW9uRXJyb3IiLCJVdGlscyIsIkxhbmciLCJpc05vdGhpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZGIiLCJCYXNlRW50aXR5TW9kZWwiLCJTZXJ2aWNlUHJpY2VTcGVjIiwiYXBwbHlNb2RpZmllcnNfIiwiY29udGV4dCIsImlzVXBkYXRpbmciLCJyYXciLCJsYXRlc3QiLCJleGlzdGluZyIsImkxOG4iLCJtZXRhIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU07QUFDRkMsRUFBQUEsS0FERTtBQUVGQyxFQUFBQSxVQUZFO0FBR0ZDLEVBQUFBLFVBSEU7QUFJRkMsRUFBQUEsVUFKRTtBQUtGQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsYUFBRjtBQUFpQkMsSUFBQUEsbUJBQWpCO0FBQXNDQyxJQUFBQTtBQUF0QyxHQUxOO0FBTUZDLEVBQUFBLEtBQUssRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUE7QUFBRjtBQUFSO0FBTkwsSUFPRlgsT0FBTyxDQUFDLGlCQUFELENBUFg7O0FBVUFZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxFQUFELEVBQUtDLGVBQUwsS0FBeUI7QUFDdEMsUUFBTUMsZ0JBQWdCLEdBQUcsY0FBY0QsZUFBZCxDQUE4QjtBQU9uRCxpQkFBYUUsZUFBYixDQUE2QkMsT0FBN0IsRUFBc0NDLFVBQXRDLEVBQWtEO0FBQzlDLFVBQUk7QUFBQ0MsUUFBQUEsR0FBRDtBQUFNQyxRQUFBQSxNQUFOO0FBQWNDLFFBQUFBLFFBQWQ7QUFBd0JDLFFBQUFBO0FBQXhCLFVBQWdDTCxPQUFwQztBQUNBSSxNQUFBQSxRQUFRLEtBQUtBLFFBQVEsR0FBRyxFQUFoQixDQUFSO0FBQ0EsYUFBT0osT0FBUDtBQUNIOztBQVhrRCxHQUF2RDtBQWNBRixFQUFBQSxnQkFBZ0IsQ0FBQ0YsRUFBakIsR0FBc0JBLEVBQXRCO0FBQ0FFLEVBQUFBLGdCQUFnQixDQUFDUSxJQUFqQixHQUF3QjtBQUN4QixrQkFBYyxnQkFEVTtBQUV4QixZQUFRLGNBRmdCO0FBR3hCLGdCQUFZLElBSFk7QUFJeEIsY0FBVTtBQUNOLG1CQUFhO0FBQ1QsZ0JBQVEsVUFEQztBQUVULG1CQUFXO0FBQ1AscUJBQVcsYUFESjtBQUVQLGtCQUFRO0FBRkQsU0FGRjtBQU1ULHVCQUFlO0FBTk4sT0FEUDtBQVNOLGlCQUFXO0FBQ1AsZ0JBQVEsVUFERDtBQUVQLG9CQUFZLElBRkw7QUFHUCx1QkFBZTtBQUhSLE9BVEw7QUFjTixpQkFBVztBQUNQLGdCQUFRLFNBREQ7QUFFUCx1QkFBZSxVQUZSO0FBR1Asc0JBQWM7QUFIUCxPQWRMO0FBbUJOLFlBQU07QUFDRixnQkFBUSxTQUROO0FBRUYsZ0JBQVEsSUFGTjtBQUdGLHFCQUFhLElBSFg7QUFJRix1QkFBZSxJQUpiO0FBS0YsMkJBQW1CLElBTGpCO0FBTUYsc0JBQWM7QUFOWixPQW5CQTtBQTJCTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLHFCQUFhLEVBRlQ7QUFHSix1QkFBZSxNQUhYO0FBSUosc0JBQWM7QUFKVixPQTNCRjtBQWlDTixrQkFBWTtBQUNSLGdCQUFRLFNBREE7QUFFUix1QkFBZSxVQUZQO0FBR1Isc0JBQWM7QUFITixPQWpDTjtBQXNDTixnQkFBVTtBQUNOLGdCQUFRLFFBREY7QUFFTixvQkFBWSxDQUNSLE9BRFEsQ0FGTjtBQUtOLHVCQUFlLFFBTFQ7QUFNTixzQkFBYztBQU5SLE9BdENKO0FBOENOLGNBQVE7QUFDSixnQkFBUSxNQURKO0FBRUosb0JBQVksSUFGUjtBQUdKLG9CQUFZLENBQ1IsTUFEUSxDQUhSO0FBTUosdUJBQWU7QUFOWCxPQTlDRjtBQXNETixpQkFBVztBQUNQLGdCQUFRLFNBREQ7QUFFUCxnQkFBUSxJQUZEO0FBR1AscUJBQWEsSUFITjtBQUlQLHFCQUFhLEtBSk47QUFLUCx1QkFBZTtBQUxSLE9BdERMO0FBNkROLHdCQUFrQjtBQUNkLGdCQUFRLFNBRE07QUFFZCxnQkFBUSxJQUZNO0FBR2QscUJBQWEsSUFIQztBQUlkLHFCQUFhLEtBSkM7QUFLZCx1QkFBZSxJQUxEO0FBTWQsb0JBQVk7QUFORSxPQTdEWjtBQXFFTixzQkFBZ0I7QUFDWixnQkFBUSxNQURJO0FBRVoscUJBQWEsRUFGRDtBQUdaLG9CQUFZLENBQ1IsTUFEUSxDQUhBO0FBTVosdUJBQWUsTUFOSDtBQU9aLHNCQUFjO0FBUEY7QUFyRVYsS0FKYztBQW1GeEIsZUFBVyxFQW5GYTtBQW9GeEIsZ0JBQVk7QUFDUixnQkFBVTtBQUNOLGlCQUFTO0FBREg7QUFERixLQXBGWTtBQXlGeEIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQXpGVTtBQThGeEIseUJBQXFCO0FBOUZHLEdBQXhCO0FBaUdBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixnQkFBZCxDQUFQO0FBQ0gsQ0FsSEQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgU2VydmljZVByaWNlU3BlYyA9IGNsYXNzIGV4dGVuZHMgQmFzZUVudGl0eU1vZGVsIHsgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBseWluZyBwcmVkZWZpbmVkIG1vZGlmaWVycyB0byBlbnRpdHkgZmllbGRzLlxuICAgICAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAgICAgKiBAcGFyYW0gaXNVcGRhdGluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyBhcHBseU1vZGlmaWVyc18oY29udGV4dCwgaXNVcGRhdGluZykge1xuICAgICAgICAgICAgbGV0IHtyYXcsIGxhdGVzdCwgZXhpc3RpbmcsIGkxOG59ID0gY29udGV4dDtcbiAgICAgICAgICAgIGV4aXN0aW5nIHx8IChleGlzdGluZyA9IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNlcnZpY2VQcmljZVNwZWMuZGIgPSBkYjtcbiAgICBTZXJ2aWNlUHJpY2VTcGVjLm1ldGEgPSB7XG4gICAgXCJzY2hlbWFOYW1lXCI6IFwibGV2b0ZvdW5kYXRpb25cIixcbiAgICBcIm5hbWVcIjogXCJzZXJ2aWNlUHJpY2VcIixcbiAgICBcImtleUZpZWxkXCI6IFwiaWRcIixcbiAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgIFwic3RhcnREYXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgICAgICAgIFwib29sVHlwZVwiOiBcIlN5bWJvbFRva2VuXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibm93XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3RhcnQgRGF0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW5kRGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgXCJvcHRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZCBEYXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJpc1ZhbGlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJcyBWYWxpZFwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImF1dG9cIjogdHJ1ZSxcbiAgICAgICAgICAgIFwid3JpdGVPbmNlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIixcbiAgICAgICAgICAgIFwiYXV0b0luY3JlbWVudElkXCI6IHRydWUsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInVuaXRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjAsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVW5pdFwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJxdWFudGl0eVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUXVhbnRpdHlcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiYW1vdW50XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJtb25leVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFtb3VudFwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3ViQ2xhc3NcIjogW1xuICAgICAgICAgICAgICAgIFwiZGVzY1wiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkRlc2NcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlcnZpY2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdGFydEZyb21cIjogMTAwMDIsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWRcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlcnZpY2VQYWNrYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3RhcnRGcm9tXCI6IDEwMDAyLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCIsXG4gICAgICAgICAgICBcIm9wdGlvbmFsXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXJ2aWNlTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJtYXhMZW5ndGhcIjogMjAsXG4gICAgICAgICAgICBcInN1YkNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgICBcImNvZGVcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDb2RlXCIsXG4gICAgICAgICAgICBcImNyZWF0ZUJ5RGJcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImluZGV4ZXNcIjogW10sXG4gICAgXCJmZWF0dXJlc1wiOiB7XG4gICAgICAgIFwiYXV0b0lkXCI6IHtcbiAgICAgICAgICAgIFwiZmllbGRcIjogXCJpZFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidW5pcXVlS2V5c1wiOiBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIFwiaWRcIlxuICAgICAgICBdXG4gICAgXSxcbiAgICBcImZpZWxkRGVwZW5kZW5jaWVzXCI6IHt9XG59O1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oU2VydmljZVByaWNlU3BlYywgKTtcbn07Il19