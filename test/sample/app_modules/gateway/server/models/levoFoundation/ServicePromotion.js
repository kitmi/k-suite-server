"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Types,
  Validators,
  Processors,
  Generators,
  Errors: {
    BusinessError,
    DataValidationError,
    DsOperationError
  },
  Utils: {
    Lang: {
      isNothing
    }
  }
} = require('@k-suite/oolong');

module.exports = (db, BaseEntityModel) => {
  const ServicePromotionSpec = class extends BaseEntityModel {
    static async applyModifiers_(context, isUpdating) {
      let {
        raw,
        latest,
        existing,
        i18n
      } = context;
      existing || (existing = {});
      return context;
    }

  };
  ServicePromotionSpec.db = db;
  ServicePromotionSpec.meta = {
    "schemaName": "levoFoundation",
    "name": "servicePromotion",
    "keyField": "id",
    "fields": {
      "startDate": {
        "type": "datetime",
        "default": {
          "oolType": "SymbolToken",
          "name": "now"
        },
        "displayName": "Start Date"
      },
      "endDate": {
        "type": "datetime",
        "optional": true,
        "displayName": "End Date"
      },
      "isValid": {
        "type": "boolean",
        "displayName": "Is Valid",
        "createByDb": true
      },
      "id": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id",
        "autoIncrementId": true,
        "createByDb": true
      },
      "name": {
        "type": "text",
        "maxLength": 40,
        "subClass": ["name"],
        "displayName": "Name",
        "createByDb": true
      },
      "desc": {
        "type": "text",
        "optional": true,
        "displayName": "Desc"
      },
      "discountAmount": {
        "type": "number",
        "optional": true,
        "displayName": "Discount Amount"
      },
      "price": {
        "type": "integer",
        "auto": true,
        "writeOnce": true,
        "displayName": "Id"
      },
      "discountType": {
        "type": "text",
        "maxLength": 20,
        "subClass": ["code"],
        "displayName": "Code",
        "createByDb": true
      }
    },
    "indexes": [],
    "features": {
      "autoId": {
        "field": "id"
      }
    },
    "uniqueKeys": [["id"]],
    "fieldDependencies": {}
  };
  return Object.assign(ServicePromotionSpec);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvbGV2b0ZvdW5kYXRpb24vU2VydmljZVByb21vdGlvbi5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlR5cGVzIiwiVmFsaWRhdG9ycyIsIlByb2Nlc3NvcnMiLCJHZW5lcmF0b3JzIiwiRXJyb3JzIiwiQnVzaW5lc3NFcnJvciIsIkRhdGFWYWxpZGF0aW9uRXJyb3IiLCJEc09wZXJhdGlvbkVycm9yIiwiVXRpbHMiLCJMYW5nIiwiaXNOb3RoaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsImRiIiwiQmFzZUVudGl0eU1vZGVsIiwiU2VydmljZVByb21vdGlvblNwZWMiLCJhcHBseU1vZGlmaWVyc18iLCJjb250ZXh0IiwiaXNVcGRhdGluZyIsInJhdyIsImxhdGVzdCIsImV4aXN0aW5nIiwiaTE4biIsIm1ldGEiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUEsTUFBTTtBQUNGQyxFQUFBQSxLQURFO0FBRUZDLEVBQUFBLFVBRkU7QUFHRkMsRUFBQUEsVUFIRTtBQUlGQyxFQUFBQSxVQUpFO0FBS0ZDLEVBQUFBLE1BQU0sRUFBRTtBQUFFQyxJQUFBQSxhQUFGO0FBQWlCQyxJQUFBQSxtQkFBakI7QUFBc0NDLElBQUFBO0FBQXRDLEdBTE47QUFNRkMsRUFBQUEsS0FBSyxFQUFFO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFFQyxNQUFBQTtBQUFGO0FBQVI7QUFOTCxJQU9GWCxPQUFPLENBQUMsaUJBQUQsQ0FQWDs7QUFVQVksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEVBQUQsRUFBS0MsZUFBTCxLQUF5QjtBQUN0QyxRQUFNQyxvQkFBb0IsR0FBRyxjQUFjRCxlQUFkLENBQThCO0FBT3ZELGlCQUFhRSxlQUFiLENBQTZCQyxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUMsVUFBSTtBQUFDQyxRQUFBQSxHQUFEO0FBQU1DLFFBQUFBLE1BQU47QUFBY0MsUUFBQUEsUUFBZDtBQUF3QkMsUUFBQUE7QUFBeEIsVUFBZ0NMLE9BQXBDO0FBQ0FJLE1BQUFBLFFBQVEsS0FBS0EsUUFBUSxHQUFHLEVBQWhCLENBQVI7QUFDQSxhQUFPSixPQUFQO0FBQ0g7O0FBWHNELEdBQTNEO0FBY0FGLEVBQUFBLG9CQUFvQixDQUFDRixFQUFyQixHQUEwQkEsRUFBMUI7QUFDQUUsRUFBQUEsb0JBQW9CLENBQUNRLElBQXJCLEdBQTRCO0FBQzVCLGtCQUFjLGdCQURjO0FBRTVCLFlBQVEsa0JBRm9CO0FBRzVCLGdCQUFZLElBSGdCO0FBSTVCLGNBQVU7QUFDTixtQkFBYTtBQUNULGdCQUFRLFVBREM7QUFFVCxtQkFBVztBQUNQLHFCQUFXLGFBREo7QUFFUCxrQkFBUTtBQUZELFNBRkY7QUFNVCx1QkFBZTtBQU5OLE9BRFA7QUFTTixpQkFBVztBQUNQLGdCQUFRLFVBREQ7QUFFUCxvQkFBWSxJQUZMO0FBR1AsdUJBQWU7QUFIUixPQVRMO0FBY04saUJBQVc7QUFDUCxnQkFBUSxTQUREO0FBRVAsdUJBQWUsVUFGUjtBQUdQLHNCQUFjO0FBSFAsT0FkTDtBQW1CTixZQUFNO0FBQ0YsZ0JBQVEsU0FETjtBQUVGLGdCQUFRLElBRk47QUFHRixxQkFBYSxJQUhYO0FBSUYsdUJBQWUsSUFKYjtBQUtGLDJCQUFtQixJQUxqQjtBQU1GLHNCQUFjO0FBTlosT0FuQkE7QUEyQk4sY0FBUTtBQUNKLGdCQUFRLE1BREo7QUFFSixxQkFBYSxFQUZUO0FBR0osb0JBQVksQ0FDUixNQURRLENBSFI7QUFNSix1QkFBZSxNQU5YO0FBT0osc0JBQWM7QUFQVixPQTNCRjtBQW9DTixjQUFRO0FBQ0osZ0JBQVEsTUFESjtBQUVKLG9CQUFZLElBRlI7QUFHSix1QkFBZTtBQUhYLE9BcENGO0FBeUNOLHdCQUFrQjtBQUNkLGdCQUFRLFFBRE07QUFFZCxvQkFBWSxJQUZFO0FBR2QsdUJBQWU7QUFIRCxPQXpDWjtBQThDTixlQUFTO0FBQ0wsZ0JBQVEsU0FESDtBQUVMLGdCQUFRLElBRkg7QUFHTCxxQkFBYSxJQUhSO0FBSUwsdUJBQWU7QUFKVixPQTlDSDtBQW9ETixzQkFBZ0I7QUFDWixnQkFBUSxNQURJO0FBRVoscUJBQWEsRUFGRDtBQUdaLG9CQUFZLENBQ1IsTUFEUSxDQUhBO0FBTVosdUJBQWUsTUFOSDtBQU9aLHNCQUFjO0FBUEY7QUFwRFYsS0FKa0I7QUFrRTVCLGVBQVcsRUFsRWlCO0FBbUU1QixnQkFBWTtBQUNSLGdCQUFVO0FBQ04saUJBQVM7QUFESDtBQURGLEtBbkVnQjtBQXdFNUIsa0JBQWMsQ0FDVixDQUNJLElBREosQ0FEVSxDQXhFYztBQTZFNUIseUJBQXFCO0FBN0VPLEdBQTVCO0FBZ0ZBLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixvQkFBZCxDQUFQO0FBQ0gsQ0FqR0QiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHsgXG4gICAgVHlwZXMsXG4gICAgVmFsaWRhdG9ycywgXG4gICAgUHJvY2Vzc29ycywgXG4gICAgR2VuZXJhdG9ycywgXG4gICAgRXJyb3JzOiB7IEJ1c2luZXNzRXJyb3IsIERhdGFWYWxpZGF0aW9uRXJyb3IsIERzT3BlcmF0aW9uRXJyb3IgfSwgXG4gICAgVXRpbHM6IHsgTGFuZzogeyBpc05vdGhpbmcgfSB9IFxufSA9IHJlcXVpcmUoJ0BrLXN1aXRlL29vbG9uZycpO1xuIFxuXG5tb2R1bGUuZXhwb3J0cyA9IChkYiwgQmFzZUVudGl0eU1vZGVsKSA9PiB7XG4gICAgY29uc3QgU2VydmljZVByb21vdGlvblNwZWMgPSBjbGFzcyBleHRlbmRzIEJhc2VFbnRpdHlNb2RlbCB7ICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbHlpbmcgcHJlZGVmaW5lZCBtb2RpZmllcnMgdG8gZW50aXR5IGZpZWxkcy5cbiAgICAgICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgICAgICogQHBhcmFtIGlzVXBkYXRpbmdcbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgYXN5bmMgYXBwbHlNb2RpZmllcnNfKGNvbnRleHQsIGlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIGxldCB7cmF3LCBsYXRlc3QsIGV4aXN0aW5nLCBpMThufSA9IGNvbnRleHQ7XG4gICAgICAgICAgICBleGlzdGluZyB8fCAoZXhpc3RpbmcgPSB7fSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTZXJ2aWNlUHJvbW90aW9uU3BlYy5kYiA9IGRiO1xuICAgIFNlcnZpY2VQcm9tb3Rpb25TcGVjLm1ldGEgPSB7XG4gICAgXCJzY2hlbWFOYW1lXCI6IFwibGV2b0ZvdW5kYXRpb25cIixcbiAgICBcIm5hbWVcIjogXCJzZXJ2aWNlUHJvbW90aW9uXCIsXG4gICAgXCJrZXlGaWVsZFwiOiBcImlkXCIsXG4gICAgXCJmaWVsZHNcIjoge1xuICAgICAgICBcInN0YXJ0RGF0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgICAgICAgICBcIm9vbFR5cGVcIjogXCJTeW1ib2xUb2tlblwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm5vd1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlN0YXJ0IERhdGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVuZERhdGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmQgRGF0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNWYWxpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXMgVmFsaWRcIixcbiAgICAgICAgICAgIFwiY3JlYXRlQnlEYlwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhdXRvXCI6IHRydWUsXG4gICAgICAgICAgICBcIndyaXRlT25jZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIklkXCIsXG4gICAgICAgICAgICBcImF1dG9JbmNyZW1lbnRJZFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDQwLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTmFtZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEZXNjXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkaXNjb3VudEFtb3VudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEaXNjb3VudCBBbW91bnRcIlxuICAgICAgICB9LFxuICAgICAgICBcInByaWNlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXV0b1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ3cml0ZU9uY2VcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGlzY291bnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwibWF4TGVuZ3RoXCI6IDIwLFxuICAgICAgICAgICAgXCJzdWJDbGFzc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJjb2RlXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ29kZVwiLFxuICAgICAgICAgICAgXCJjcmVhdGVCeURiXCI6IHRydWVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJpbmRleGVzXCI6IFtdLFxuICAgIFwiZmVhdHVyZXNcIjoge1xuICAgICAgICBcImF1dG9JZFwiOiB7XG4gICAgICAgICAgICBcImZpZWxkXCI6IFwiaWRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInVuaXF1ZUtleXNcIjogW1xuICAgICAgICBbXG4gICAgICAgICAgICBcImlkXCJcbiAgICAgICAgXVxuICAgIF0sXG4gICAgXCJmaWVsZERlcGVuZGVuY2llc1wiOiB7fVxufTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFNlcnZpY2VQcm9tb3Rpb25TcGVjLCApO1xufTsiXX0=