"use strict";

require("source-map-support/register");

const {
  _,
  fs,
  eachAsync_,
  urlJoin,
  getValueByPath
} = require('rk-utils');

const Router = require('koa-router');

const HttpCode = require('http-status-codes');

const {
  InvalidConfiguration,
  BadRequest,
  NotFound
} = require('../utils/Errors');

function mergeQuery(query, extra) {
  return query && query.$query ? {
    $query: { ...query.$query,
      ...extra
    }
  } : { ...query,
    ...extra
  };
}

module.exports = (app, baseRoute, options) => {
  if (!options.schemaName) {
    throw new InvalidConfiguration('Missing schema name config.', app, `routing.${baseRoute}.rpc.schemaName`);
  }

  if (!options.entityModels) {
    throw new InvalidConfiguration('Missing entity models config.', app, `routing.${baseRoute}.rpc.entityModels`);
  }

  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.getMiddlewareFactory('jsonError')(), 'jsonError');

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let apiListEndpoint = options.apiListEndpoint || '/_list';
  let entityModels = options.entityModels;

  if (typeof options.entityModels === 'string') {
    entityModels = fs.readJsonSync(app.toAbsolutePath(options.entityModels));
  }

  app.addRoute(router, 'get', apiListEndpoint, async ctx => {
    let list = [];

    _.forOwn(entityModels, (methods, entityName) => {
      let entityNameInUrl = _.kebabCase(entityName);

      _.forOwn(methods, (methodInfo, methodName) => {
        let params = methodInfo.params ? Object.values(methodInfo.params).reduce((result, v) => {
          result[v.name] = _.omit(v, ['name']);
          return result;
        }, {}) : {};
        list.push({
          method: methodInfo.httpMethod,
          url: urlJoin(baseRoute, entityNameInUrl, methodName),
          desc: methodInfo.desc,
          params
        });
      });
    });

    ctx.body = list;
  });
  ['get', 'post'].forEach(method => {
    app.addRoute(router, method, '/:entity/:method', async ctx => {
      let db = ctx.appModule.db(options.schemaName);

      let entityName = _.camelCase(ctx.params.entity);

      let methodName = _.camelCase(ctx.params.method);

      let apiInfo = entityModels[entityName];
      apiInfo = apiInfo && apiInfo[methodName];

      if (!apiInfo || apiInfo.httpMethod.toUpperCase() !== ctx.method) {
        throw new BadRequest('API endpoint not found.');
      }

      let args = [ctx];

      if (apiInfo.params) {
        apiInfo.params.forEach(param => {
          let argName = param.name;
          let value = ctx.query[argName] || ctx.request.body[argName];

          if (_.isNil(value) && !param.optional) {
            throw new BadRequest(`Required argument "${argName}" is not given.`);
          }

          args.push(value);
        });
      }

      let EntityModel = db.model(entityName);
      let asyncMethodName = methodName + '_';

      if (typeof EntityModel[asyncMethodName] !== 'function') {
        throw new NotFound(`RPC endpoint "${ctx.path}" not found.`);
      }

      if (options.invokeTracking) {
        app.log('verbose', `Invoking a process API [${entityName}.${methodName}] ...`);
      }

      ctx.body = await EntityModel[asyncMethodName](...args);
    });
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3JwYy5qcyJdLCJuYW1lcyI6WyJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidXJsSm9pbiIsImdldFZhbHVlQnlQYXRoIiwicmVxdWlyZSIsIlJvdXRlciIsIkh0dHBDb2RlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwiTm90Rm91bmQiLCJtZXJnZVF1ZXJ5IiwicXVlcnkiLCJleHRyYSIsIiRxdWVyeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJiYXNlUm91dGUiLCJvcHRpb25zIiwic2NoZW1hTmFtZSIsImVudGl0eU1vZGVscyIsInJvdXRlciIsInByZWZpeCIsInVzZU1pZGRsZXdhcmUiLCJnZXRNaWRkbGV3YXJlRmFjdG9yeSIsIm1pZGRsZXdhcmVzIiwidXNlTWlkZGxld2FyZXMiLCJhcGlMaXN0RW5kcG9pbnQiLCJyZWFkSnNvblN5bmMiLCJ0b0Fic29sdXRlUGF0aCIsImFkZFJvdXRlIiwiY3R4IiwibGlzdCIsImZvck93biIsIm1ldGhvZHMiLCJlbnRpdHlOYW1lIiwiZW50aXR5TmFtZUluVXJsIiwia2ViYWJDYXNlIiwibWV0aG9kSW5mbyIsIm1ldGhvZE5hbWUiLCJwYXJhbXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJyZXN1bHQiLCJ2IiwibmFtZSIsIm9taXQiLCJwdXNoIiwibWV0aG9kIiwiaHR0cE1ldGhvZCIsInVybCIsImRlc2MiLCJib2R5IiwiZm9yRWFjaCIsImRiIiwiYXBwTW9kdWxlIiwiY2FtZWxDYXNlIiwiZW50aXR5IiwiYXBpSW5mbyIsInRvVXBwZXJDYXNlIiwiYXJncyIsInBhcmFtIiwiYXJnTmFtZSIsInZhbHVlIiwicmVxdWVzdCIsImlzTmlsIiwib3B0aW9uYWwiLCJFbnRpdHlNb2RlbCIsIm1vZGVsIiwiYXN5bmNNZXRob2ROYW1lIiwicGF0aCIsImludm9rZVRyYWNraW5nIiwibG9nIiwiYWRkUm91dGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLFVBQVQ7QUFBcUJDLEVBQUFBLE9BQXJCO0FBQThCQyxFQUFBQTtBQUE5QixJQUFpREMsT0FBTyxDQUFDLFVBQUQsQ0FBOUQ7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUF0Qjs7QUFDQSxNQUFNRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUF4Qjs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBLG9CQUFGO0FBQXdCQyxFQUFBQSxVQUF4QjtBQUFvQ0MsRUFBQUE7QUFBcEMsSUFBaURMLE9BQU8sQ0FBQyxpQkFBRCxDQUE5RDs7QUFPQyxTQUFTTSxVQUFULENBQW9CQyxLQUFwQixFQUEyQkMsS0FBM0IsRUFBa0M7QUFDL0IsU0FBUUQsS0FBSyxJQUFJQSxLQUFLLENBQUNFLE1BQWhCLEdBQTBCO0FBQUVBLElBQUFBLE1BQU0sRUFBRSxFQUFFLEdBQUdGLEtBQUssQ0FBQ0UsTUFBWDtBQUFtQixTQUFHRDtBQUF0QjtBQUFWLEdBQTFCLEdBQXNFLEVBQUUsR0FBR0QsS0FBTDtBQUFZLE9BQUdDO0FBQWYsR0FBN0U7QUFDRjs7QUFzQkZFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxHQUFELEVBQU1DLFNBQU4sRUFBaUJDLE9BQWpCLEtBQTZCO0FBQzFDLE1BQUksQ0FBQ0EsT0FBTyxDQUFDQyxVQUFiLEVBQXlCO0FBQ3JCLFVBQU0sSUFBSVosb0JBQUosQ0FDRiw2QkFERSxFQUVGUyxHQUZFLEVBR0QsV0FBVUMsU0FBVSxpQkFIbkIsQ0FBTjtBQUtIOztBQUVELE1BQUksQ0FBQ0MsT0FBTyxDQUFDRSxZQUFiLEVBQTJCO0FBQ3ZCLFVBQU0sSUFBSWIsb0JBQUosQ0FDRiwrQkFERSxFQUVGUyxHQUZFLEVBR0QsV0FBVUMsU0FBVSxtQkFIbkIsQ0FBTjtBQUtIOztBQUVELE1BQUlJLE1BQU0sR0FBR0osU0FBUyxLQUFLLEdBQWQsR0FBb0IsSUFBSVosTUFBSixFQUFwQixHQUFtQyxJQUFJQSxNQUFKLENBQVc7QUFBQ2lCLElBQUFBLE1BQU0sRUFBRUw7QUFBVCxHQUFYLENBQWhEO0FBRUFELEVBQUFBLEdBQUcsQ0FBQ08sYUFBSixDQUFrQkYsTUFBbEIsRUFBMEJMLEdBQUcsQ0FBQ1Esb0JBQUosQ0FBeUIsV0FBekIsR0FBMUIsRUFBbUUsV0FBbkU7O0FBRUEsTUFBSU4sT0FBTyxDQUFDTyxXQUFaLEVBQXlCO0FBQ3JCVCxJQUFBQSxHQUFHLENBQUNVLGNBQUosQ0FBbUJMLE1BQW5CLEVBQTJCSCxPQUFPLENBQUNPLFdBQW5DO0FBQ0g7O0FBRUQsTUFBSUUsZUFBZSxHQUFHVCxPQUFPLENBQUNTLGVBQVIsSUFBMkIsUUFBakQ7QUFFQSxNQUFJUCxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0UsWUFBM0I7O0FBRUEsTUFBSSxPQUFPRixPQUFPLENBQUNFLFlBQWYsS0FBZ0MsUUFBcEMsRUFBOEM7QUFDMUNBLElBQUFBLFlBQVksR0FBR3BCLEVBQUUsQ0FBQzRCLFlBQUgsQ0FBZ0JaLEdBQUcsQ0FBQ2EsY0FBSixDQUFtQlgsT0FBTyxDQUFDRSxZQUEzQixDQUFoQixDQUFmO0FBQ0g7O0FBRURKLEVBQUFBLEdBQUcsQ0FBQ2MsUUFBSixDQUFhVCxNQUFiLEVBQXFCLEtBQXJCLEVBQTRCTSxlQUE1QixFQUE2QyxNQUFPSSxHQUFQLElBQWU7QUFDeEQsUUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBRUFqQyxJQUFBQSxDQUFDLENBQUNrQyxNQUFGLENBQVNiLFlBQVQsRUFBdUIsQ0FBQ2MsT0FBRCxFQUFVQyxVQUFWLEtBQXlCO0FBRTVDLFVBQUlDLGVBQWUsR0FBR3JDLENBQUMsQ0FBQ3NDLFNBQUYsQ0FBWUYsVUFBWixDQUF0Qjs7QUFFQXBDLE1BQUFBLENBQUMsQ0FBQ2tDLE1BQUYsQ0FBU0MsT0FBVCxFQUFrQixDQUFDSSxVQUFELEVBQWFDLFVBQWIsS0FBNEI7QUFDMUMsWUFBSUMsTUFBTSxHQUFHRixVQUFVLENBQUNFLE1BQVgsR0FBb0JDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixVQUFVLENBQUNFLE1BQXpCLEVBQWlDRyxNQUFqQyxDQUF3QyxDQUFDQyxNQUFELEVBQVNDLENBQVQsS0FBZTtBQUNwRkQsVUFBQUEsTUFBTSxDQUFDQyxDQUFDLENBQUNDLElBQUgsQ0FBTixHQUFpQi9DLENBQUMsQ0FBQ2dELElBQUYsQ0FBT0YsQ0FBUCxFQUFVLENBQUMsTUFBRCxDQUFWLENBQWpCO0FBQ0EsaUJBQU9ELE1BQVA7QUFDSCxTQUhnQyxFQUc5QixFQUg4QixDQUFwQixHQUdKLEVBSFQ7QUFLQVosUUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVO0FBQUVDLFVBQUFBLE1BQU0sRUFBRVgsVUFBVSxDQUFDWSxVQUFyQjtBQUFpQ0MsVUFBQUEsR0FBRyxFQUFFakQsT0FBTyxDQUFDZSxTQUFELEVBQVltQixlQUFaLEVBQTZCRyxVQUE3QixDQUE3QztBQUF1RmEsVUFBQUEsSUFBSSxFQUFFZCxVQUFVLENBQUNjLElBQXhHO0FBQThHWixVQUFBQTtBQUE5RyxTQUFWO0FBQ0gsT0FQRDtBQVFILEtBWkQ7O0FBY0FULElBQUFBLEdBQUcsQ0FBQ3NCLElBQUosR0FBV3JCLElBQVg7QUFDSCxHQWxCRDtBQW9CQSxHQUFDLEtBQUQsRUFBUSxNQUFSLEVBQWdCc0IsT0FBaEIsQ0FBd0JMLE1BQU0sSUFBSTtBQUM5QmpDLElBQUFBLEdBQUcsQ0FBQ2MsUUFBSixDQUFhVCxNQUFiLEVBQXFCNEIsTUFBckIsRUFBNkIsa0JBQTdCLEVBQWlELE1BQU9sQixHQUFQLElBQWU7QUFDNUQsVUFBSXdCLEVBQUUsR0FBR3hCLEdBQUcsQ0FBQ3lCLFNBQUosQ0FBY0QsRUFBZCxDQUFpQnJDLE9BQU8sQ0FBQ0MsVUFBekIsQ0FBVDs7QUFFQSxVQUFJZ0IsVUFBVSxHQUFHcEMsQ0FBQyxDQUFDMEQsU0FBRixDQUFZMUIsR0FBRyxDQUFDUyxNQUFKLENBQVdrQixNQUF2QixDQUFqQjs7QUFDQSxVQUFJbkIsVUFBVSxHQUFHeEMsQ0FBQyxDQUFDMEQsU0FBRixDQUFZMUIsR0FBRyxDQUFDUyxNQUFKLENBQVdTLE1BQXZCLENBQWpCOztBQUNBLFVBQUlVLE9BQU8sR0FBR3ZDLFlBQVksQ0FBQ2UsVUFBRCxDQUExQjtBQUNBd0IsTUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ3BCLFVBQUQsQ0FBNUI7O0FBQ0EsVUFBSSxDQUFDb0IsT0FBRCxJQUFZQSxPQUFPLENBQUNULFVBQVIsQ0FBbUJVLFdBQW5CLE9BQXFDN0IsR0FBRyxDQUFDa0IsTUFBekQsRUFBaUU7QUFDN0QsY0FBTSxJQUFJekMsVUFBSixDQUFlLHlCQUFmLENBQU47QUFDSDs7QUFFRCxVQUFJcUQsSUFBSSxHQUFHLENBQUU5QixHQUFGLENBQVg7O0FBRUEsVUFBSTRCLE9BQU8sQ0FBQ25CLE1BQVosRUFBb0I7QUFDaEJtQixRQUFBQSxPQUFPLENBQUNuQixNQUFSLENBQWVjLE9BQWYsQ0FBdUJRLEtBQUssSUFBSTtBQUM1QixjQUFJQyxPQUFPLEdBQUdELEtBQUssQ0FBQ2hCLElBQXBCO0FBQ0EsY0FBSWtCLEtBQUssR0FBR2pDLEdBQUcsQ0FBQ3BCLEtBQUosQ0FBVW9ELE9BQVYsS0FBc0JoQyxHQUFHLENBQUNrQyxPQUFKLENBQVlaLElBQVosQ0FBaUJVLE9BQWpCLENBQWxDOztBQUVBLGNBQUloRSxDQUFDLENBQUNtRSxLQUFGLENBQVFGLEtBQVIsS0FBa0IsQ0FBQ0YsS0FBSyxDQUFDSyxRQUE3QixFQUF1QztBQUNuQyxrQkFBTSxJQUFJM0QsVUFBSixDQUFnQixzQkFBcUJ1RCxPQUFRLGlCQUE3QyxDQUFOO0FBQ0g7O0FBRURGLFVBQUFBLElBQUksQ0FBQ2IsSUFBTCxDQUFVZ0IsS0FBVjtBQUNILFNBVEQ7QUFVSDs7QUFFRCxVQUFJSSxXQUFXLEdBQUdiLEVBQUUsQ0FBQ2MsS0FBSCxDQUFTbEMsVUFBVCxDQUFsQjtBQUNBLFVBQUltQyxlQUFlLEdBQUcvQixVQUFVLEdBQUcsR0FBbkM7O0FBRUEsVUFBSSxPQUFPNkIsV0FBVyxDQUFDRSxlQUFELENBQWxCLEtBQXdDLFVBQTVDLEVBQXdEO0FBQ3BELGNBQU0sSUFBSTdELFFBQUosQ0FBYyxpQkFBZ0JzQixHQUFHLENBQUN3QyxJQUFLLGNBQXZDLENBQU47QUFDSDs7QUFFRCxVQUFJckQsT0FBTyxDQUFDc0QsY0FBWixFQUE0QjtBQUN4QnhELFFBQUFBLEdBQUcsQ0FBQ3lELEdBQUosQ0FBUSxTQUFSLEVBQW9CLDJCQUEwQnRDLFVBQVcsSUFBR0ksVUFBVyxPQUF2RTtBQUNIOztBQUVEUixNQUFBQSxHQUFHLENBQUNzQixJQUFKLEdBQVcsTUFBTWUsV0FBVyxDQUFDRSxlQUFELENBQVgsQ0FBNkIsR0FBR1QsSUFBaEMsQ0FBakI7QUFDSCxLQXRDRDtBQXVDSCxHQXhDRDtBQTBDQTdDLEVBQUFBLEdBQUcsQ0FBQzBELFNBQUosQ0FBY3JELE1BQWQ7QUFDSCxDQWhHRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfLCB1cmxKb2luLCBnZXRWYWx1ZUJ5UGF0aCB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKTtcbmNvbnN0IEh0dHBDb2RlID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24sIEJhZFJlcXVlc3QsIE5vdEZvdW5kIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuLyoqXG4gKiBSRVNUZnVsIHJvdXRlci5cbiAqIEBtb2R1bGUgUm91dGVyX1Jlc3RcbiAqL1xuXG4gZnVuY3Rpb24gbWVyZ2VRdWVyeShxdWVyeSwgZXh0cmEpIHtcbiAgICByZXR1cm4gKHF1ZXJ5ICYmIHF1ZXJ5LiRxdWVyeSkgPyB7ICRxdWVyeTogeyAuLi5xdWVyeS4kcXVlcnksIC4uLmV4dHJhIH0gfSA6IHsgLi4ucXVlcnksIC4uLmV4dHJhIH07XG4gfVxuXG4vKipcbiAqIENyZWF0ZSBhIFJFU1RmdWwgcm91dGVyLlxuICogQHBhcmFtIHsqfSBhcHAgXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHtvYmplY3RzfSBvcHRpb25zIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLnJlc291cmNlc1BhdGhdXG4gKiBAcHJvcGVydHkge29iamVjdHxhcnJheX0gW29wdGlvbnMubWlkZGxld2FyZXNdXG4gKiBAZXhhbXBsZVxuICogICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICAgcnBjOiB7ICAgICAgICAgIFxuICogICAgICAgICAgbWlkZGxld2FyZXM6IHt9LFxuICogICAgICAgICAgc2NoZW1hTmFtZTogJycsXG4gKiAgICAgICAgICBlbnRpdHlNb2RlbHM6IHt9fDxjb25maWcgcGF0aD4sICBcbiAqICAgICAgICAgIGFwaUxpc3RFbmRwb2ludDogJy9fbGlzdCdcbiAqICAgICAgfVxuICogIH1cbiAqICBcbiAqICByb3V0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cCBtZXRob2QgICAgZnVuY3Rpb24gb2YgY3RybFxuICogIC86bW9kZWwvOm1ldGhvZCAgICAgICAgICAgICAgICBwb3N0ICAgICAgICAgICBtb2RlbC5tZXRob2QgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGFwcCwgYmFzZVJvdXRlLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLnNjaGVtYU5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc2NoZW1hIG5hbWUgY29uZmlnLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBgcm91dGluZy4ke2Jhc2VSb3V0ZX0ucnBjLnNjaGVtYU5hbWVgXG4gICAgICAgICk7XG4gICAgfSAgICBcblxuICAgIGlmICghb3B0aW9ucy5lbnRpdHlNb2RlbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3NpbmcgZW50aXR5IG1vZGVscyBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5ycGMuZW50aXR5TW9kZWxzYFxuICAgICAgICApOyAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGxldCByb3V0ZXIgPSBiYXNlUm91dGUgPT09ICcvJyA/IG5ldyBSb3V0ZXIoKSA6IG5ldyBSb3V0ZXIoe3ByZWZpeDogYmFzZVJvdXRlfSk7XG5cbiAgICBhcHAudXNlTWlkZGxld2FyZShyb3V0ZXIsIGFwcC5nZXRNaWRkbGV3YXJlRmFjdG9yeSgnanNvbkVycm9yJykoKSwgJ2pzb25FcnJvcicpO1xuXG4gICAgaWYgKG9wdGlvbnMubWlkZGxld2FyZXMpIHtcbiAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKHJvdXRlciwgb3B0aW9ucy5taWRkbGV3YXJlcyk7XG4gICAgfVxuXG4gICAgbGV0IGFwaUxpc3RFbmRwb2ludCA9IG9wdGlvbnMuYXBpTGlzdEVuZHBvaW50IHx8ICcvX2xpc3QnO1xuXG4gICAgbGV0IGVudGl0eU1vZGVscyA9IG9wdGlvbnMuZW50aXR5TW9kZWxzO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmVudGl0eU1vZGVscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZW50aXR5TW9kZWxzID0gZnMucmVhZEpzb25TeW5jKGFwcC50b0Fic29sdXRlUGF0aChvcHRpb25zLmVudGl0eU1vZGVscykpOyBcbiAgICB9XG5cbiAgICBhcHAuYWRkUm91dGUocm91dGVyLCAnZ2V0JywgYXBpTGlzdEVuZHBvaW50LCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgIFxuICAgICAgICBfLmZvck93bihlbnRpdHlNb2RlbHMsIChtZXRob2RzLCBlbnRpdHlOYW1lKSA9PiB7XG4gICAgICAgICAgICAvL3RvZG86IGZpbHRlciBlbnRpdHkgb3IgbWV0aG9kcyBieSBjb25maWdcbiAgICAgICAgICAgIGxldCBlbnRpdHlOYW1lSW5VcmwgPSBfLmtlYmFiQ2FzZShlbnRpdHlOYW1lKTsgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBfLmZvck93bihtZXRob2RzLCAobWV0aG9kSW5mbywgbWV0aG9kTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbXMgPSBtZXRob2RJbmZvLnBhcmFtcyA/IE9iamVjdC52YWx1ZXMobWV0aG9kSW5mby5wYXJhbXMpLnJlZHVjZSgocmVzdWx0LCB2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFt2Lm5hbWVdID0gXy5vbWl0KHYsIFsnbmFtZSddKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCB7fSkgOiB7fTtcblxuICAgICAgICAgICAgICAgIGxpc3QucHVzaCh7IG1ldGhvZDogbWV0aG9kSW5mby5odHRwTWV0aG9kLCB1cmw6IHVybEpvaW4oYmFzZVJvdXRlLCBlbnRpdHlOYW1lSW5VcmwsIG1ldGhvZE5hbWUpLCBkZXNjOiBtZXRob2RJbmZvLmRlc2MsIHBhcmFtcyB9KTtcbiAgICAgICAgICAgIH0pOyAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN0eC5ib2R5ID0gbGlzdDtcbiAgICB9KTtcblxuICAgIFsnZ2V0JywgJ3Bvc3QnXS5mb3JFYWNoKG1ldGhvZCA9PiB7ICAgICAgICAgXG4gICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgJy86ZW50aXR5LzptZXRob2QnLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBsZXQgZGIgPSBjdHguYXBwTW9kdWxlLmRiKG9wdGlvbnMuc2NoZW1hTmFtZSk7XG5cbiAgICAgICAgICAgIGxldCBlbnRpdHlOYW1lID0gXy5jYW1lbENhc2UoY3R4LnBhcmFtcy5lbnRpdHkpO1xuICAgICAgICAgICAgbGV0IG1ldGhvZE5hbWUgPSBfLmNhbWVsQ2FzZShjdHgucGFyYW1zLm1ldGhvZCk7XG4gICAgICAgICAgICBsZXQgYXBpSW5mbyA9IGVudGl0eU1vZGVsc1tlbnRpdHlOYW1lXTtcbiAgICAgICAgICAgIGFwaUluZm8gPSBhcGlJbmZvICYmIGFwaUluZm9bbWV0aG9kTmFtZV07XG4gICAgICAgICAgICBpZiAoIWFwaUluZm8gfHwgYXBpSW5mby5odHRwTWV0aG9kLnRvVXBwZXJDYXNlKCkgIT09IGN0eC5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdCgnQVBJIGVuZHBvaW50IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGFyZ3MgPSBbIGN0eCBdO1xuXG4gICAgICAgICAgICBpZiAoYXBpSW5mby5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBhcGlJbmZvLnBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ05hbWUgPSBwYXJhbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjdHgucXVlcnlbYXJnTmFtZV0gfHwgY3R4LnJlcXVlc3QuYm9keVthcmdOYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc05pbCh2YWx1ZSkgJiYgIXBhcmFtLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdChgUmVxdWlyZWQgYXJndW1lbnQgXCIke2FyZ05hbWV9XCIgaXMgbm90IGdpdmVuLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IEVudGl0eU1vZGVsID0gZGIubW9kZWwoZW50aXR5TmFtZSk7IFxuICAgICAgICAgICAgbGV0IGFzeW5jTWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUgKyAnXyc7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRW50aXR5TW9kZWxbYXN5bmNNZXRob2ROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RGb3VuZChgUlBDIGVuZHBvaW50IFwiJHtjdHgucGF0aH1cIiBub3QgZm91bmQuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmludm9rZVRyYWNraW5nKSB7XG4gICAgICAgICAgICAgICAgYXBwLmxvZygndmVyYm9zZScsIGBJbnZva2luZyBhIHByb2Nlc3MgQVBJIFske2VudGl0eU5hbWV9LiR7bWV0aG9kTmFtZX1dIC4uLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdHguYm9keSA9IGF3YWl0IEVudGl0eU1vZGVsW2FzeW5jTWV0aG9kTmFtZV0oLi4uYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH0pOyAgICBcblxuICAgIGFwcC5hZGRSb3V0ZXIocm91dGVyKTtcbn07Il19