"use strict";

require("source-map-support/register");

const {
  _,
  fs,
  eachAsync_,
  urlJoin,
  getValueByPath
} = require('rk-utils');

const Router = require('koa-router');

const HttpCode = require('http-status-codes');

const {
  InvalidConfiguration,
  BadRequest,
  NotFound
} = require('../Errors');

function mergeQuery(query, extra) {
  return query && query.$query ? {
    $query: { ...query.$query,
      ...extra
    }
  } : { ...query,
    ...extra
  };
}

module.exports = (app, baseRoute, options) => {
  if (!options.schemaName) {
    throw new InvalidConfiguration('Missing schema name config.', app, `routing.${baseRoute}.rpc.schemaName`);
  }

  if (!options.entityModels) {
    throw new InvalidConfiguration('Missing entity models config.', app, `routing.${baseRoute}.rpc.entityModels`);
  }

  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.restApiWrapper(), 'restApiWrapper');

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let apiListEndpoint = options.apiListEndpoint || '/_list';
  let entityModels = options.entityModels;

  if (typeof options.entityModels === 'string') {
    entityModels = fs.readJsonSync(app.toAbsolutePath(options.entityModels));
  }

  app.addRoute(router, 'get', apiListEndpoint, async ctx => {
    let list = [];

    _.forOwn(entityModels, (methods, entityName) => {
      let entityNameInUrl = _.kebabCase(entityName);

      _.forOwn(methods, (methodInfo, methodName) => {
        let params = methodInfo.params ? Object.values(methodInfo.params).reduce((result, v) => {
          result[v.name] = _.omit(v, ['name']);
          return result;
        }, {}) : {};
        list.push({
          method: methodInfo.httpMethod,
          url: urlJoin(baseRoute, entityNameInUrl, methodName),
          desc: methodInfo.desc,
          params
        });
      });
    });

    ctx.body = list;
  });
  ['get', 'post'].forEach(method => {
    app.addRoute(router, method, '/:entity/:method', async ctx => {
      let db = ctx.appModule.db(options.schemaName);

      let entityName = _.camelCase(ctx.params.entity);

      let methodName = _.camelCase(ctx.params.method);

      let apiInfo = entityModels[entityName];
      apiInfo = apiInfo && apiInfo[methodName];

      if (!apiInfo || apiInfo.httpMethod.toUpperCase() !== ctx.method) {
        console.log(apiInfo);
        console.log(ctx.params, ctx.method);
        throw new BadRequest('API endpoint not found.');
      }

      let args = [ctx];

      if (apiInfo.params) {
        apiInfo.params.forEach(param => {
          let argName = param.name;
          let value = ctx.query[argName] || ctx.request.body[argName];

          if (_.isNil(value) && !param.optional) {
            throw new BadRequest(`Required argument "${argName}" is not given.`);
          }

          args.push(value);
        });
      }

      let EntityModel = db.model(entityName);
      methodName += '_';

      if (typeof EntityModel[methodName] !== 'function') {
        throw new NotFound(`RPC endpoint "${ctx.path}" not found.`);
      }

      ctx.body = await EntityModel[methodName](...args);
    });
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3JwYy5qcyJdLCJuYW1lcyI6WyJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidXJsSm9pbiIsImdldFZhbHVlQnlQYXRoIiwicmVxdWlyZSIsIlJvdXRlciIsIkh0dHBDb2RlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwiTm90Rm91bmQiLCJtZXJnZVF1ZXJ5IiwicXVlcnkiLCJleHRyYSIsIiRxdWVyeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJiYXNlUm91dGUiLCJvcHRpb25zIiwic2NoZW1hTmFtZSIsImVudGl0eU1vZGVscyIsInJvdXRlciIsInByZWZpeCIsInVzZU1pZGRsZXdhcmUiLCJyZXN0QXBpV3JhcHBlciIsIm1pZGRsZXdhcmVzIiwidXNlTWlkZGxld2FyZXMiLCJhcGlMaXN0RW5kcG9pbnQiLCJyZWFkSnNvblN5bmMiLCJ0b0Fic29sdXRlUGF0aCIsImFkZFJvdXRlIiwiY3R4IiwibGlzdCIsImZvck93biIsIm1ldGhvZHMiLCJlbnRpdHlOYW1lIiwiZW50aXR5TmFtZUluVXJsIiwia2ViYWJDYXNlIiwibWV0aG9kSW5mbyIsIm1ldGhvZE5hbWUiLCJwYXJhbXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJyZXN1bHQiLCJ2IiwibmFtZSIsIm9taXQiLCJwdXNoIiwibWV0aG9kIiwiaHR0cE1ldGhvZCIsInVybCIsImRlc2MiLCJib2R5IiwiZm9yRWFjaCIsImRiIiwiYXBwTW9kdWxlIiwiY2FtZWxDYXNlIiwiZW50aXR5IiwiYXBpSW5mbyIsInRvVXBwZXJDYXNlIiwiY29uc29sZSIsImxvZyIsImFyZ3MiLCJwYXJhbSIsImFyZ05hbWUiLCJ2YWx1ZSIsInJlcXVlc3QiLCJpc05pbCIsIm9wdGlvbmFsIiwiRW50aXR5TW9kZWwiLCJtb2RlbCIsInBhdGgiLCJhZGRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtD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VyxDQUFDL0IsVUFBRCxDQUFsQixLQUFtQyxVQUF2QyxFQUFtRDtBQUMvQyxjQUFNLElBQUk5QixRQUFKLENBQWMsaUJBQWdCc0IsR0FBRyxDQUFDeUMsSUFBSyxjQUF2QyxDQUFOO0FBQ0g7O0FBRUR6QyxNQUFBQSxHQUFHLENBQUNzQixJQUFKLEdBQVcsTUFBTWlCLFdBQVcsQ0FBQy9CLFVBQUQsQ0FBWCxDQUF3QixHQUFHd0IsSUFBM0IsQ0FBakI7QUFDSCxLQXJDRDtBQXNDSCxHQXZDRDtBQXlDQS9DLEVBQUFBLEdBQUcsQ0FBQ3lELFNBQUosQ0FBY3BELE1BQWQ7QUFDSCxDQS9GRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfLCB1cmxKb2luLCBnZXRWYWx1ZUJ5UGF0aCB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKTtcbmNvbnN0IEh0dHBDb2RlID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24sIEJhZFJlcXVlc3QsIE5vdEZvdW5kIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcblxuLyoqXG4gKiBSRVNUZnVsIHJvdXRlci5cbiAqIEBtb2R1bGUgUm91dGVyX1Jlc3RcbiAqL1xuXG4gZnVuY3Rpb24gbWVyZ2VRdWVyeShxdWVyeSwgZXh0cmEpIHtcbiAgICByZXR1cm4gKHF1ZXJ5ICYmIHF1ZXJ5LiRxdWVyeSkgPyB7ICRxdWVyeTogeyAuLi5xdWVyeS4kcXVlcnksIC4uLmV4dHJhIH0gfSA6IHsgLi4ucXVlcnksIC4uLmV4dHJhIH07XG4gfVxuXG4vKipcbiAqIENyZWF0ZSBhIFJFU1RmdWwgcm91dGVyLlxuICogQHBhcmFtIHsqfSBhcHAgXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHtvYmplY3RzfSBvcHRpb25zIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLnJlc291cmNlc1BhdGhdXG4gKiBAcHJvcGVydHkge29iamVjdHxhcnJheX0gW29wdGlvbnMubWlkZGxld2FyZXNdXG4gKiBAZXhhbXBsZVxuICogICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICAgcnBjOiB7ICAgICAgICAgIFxuICogICAgICAgICAgbWlkZGxld2FyZXM6IHt9LFxuICogICAgICAgICAgc2NoZW1hTmFtZTogJycsXG4gKiAgICAgICAgICBlbnRpdHlNb2RlbHM6IHt9fDxjb25maWcgcGF0aD4sICBcbiAqICAgICAgICAgIGFwaUxpc3RFbmRwb2ludDogJy9fbGlzdCdcbiAqICAgICAgfVxuICogIH1cbiAqICBcbiAqICByb3V0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cCBtZXRob2QgICAgZnVuY3Rpb24gb2YgY3RybFxuICogIC86bW9kZWwvOm1ldGhvZCAgICAgICAgICAgICAgICBwb3N0ICAgICAgICAgICBtb2RlbC5tZXRob2QgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGFwcCwgYmFzZVJvdXRlLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLnNjaGVtYU5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc2NoZW1hIG5hbWUgY29uZmlnLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBgcm91dGluZy4ke2Jhc2VSb3V0ZX0ucnBjLnNjaGVtYU5hbWVgXG4gICAgICAgICk7XG4gICAgfSAgICBcblxuICAgIGlmICghb3B0aW9ucy5lbnRpdHlNb2RlbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3NpbmcgZW50aXR5IG1vZGVscyBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5ycGMuZW50aXR5TW9kZWxzYFxuICAgICAgICApOyAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGxldCByb3V0ZXIgPSBiYXNlUm91dGUgPT09ICcvJyA/IG5ldyBSb3V0ZXIoKSA6IG5ldyBSb3V0ZXIoe3ByZWZpeDogYmFzZVJvdXRlfSk7XG5cbiAgICBhcHAudXNlTWlkZGxld2FyZShyb3V0ZXIsIGFwcC5yZXN0QXBpV3JhcHBlcigpLCAncmVzdEFwaVdyYXBwZXInKTtcblxuICAgIGlmIChvcHRpb25zLm1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG9wdGlvbnMubWlkZGxld2FyZXMpO1xuICAgIH1cblxuICAgIGxldCBhcGlMaXN0RW5kcG9pbnQgPSBvcHRpb25zLmFwaUxpc3RFbmRwb2ludCB8fCAnL19saXN0JztcblxuICAgIGxldCBlbnRpdHlNb2RlbHMgPSBvcHRpb25zLmVudGl0eU1vZGVscztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5lbnRpdHlNb2RlbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVudGl0eU1vZGVscyA9IGZzLnJlYWRKc29uU3luYyhhcHAudG9BYnNvbHV0ZVBhdGgob3B0aW9ucy5lbnRpdHlNb2RlbHMpKTsgXG4gICAgfVxuXG4gICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgJ2dldCcsIGFwaUxpc3RFbmRwb2ludCwgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICBsZXQgbGlzdCA9IFtdO1xuICAgICAgICBcbiAgICAgICAgXy5mb3JPd24oZW50aXR5TW9kZWxzLCAobWV0aG9kcywgZW50aXR5TmFtZSkgPT4ge1xuICAgICAgICAgICAgLy90b2RvOiBmaWx0ZXIgZW50aXR5IG9yIG1ldGhvZHMgYnkgY29uZmlnXG4gICAgICAgICAgICBsZXQgZW50aXR5TmFtZUluVXJsID0gXy5rZWJhYkNhc2UoZW50aXR5TmFtZSk7ICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5mb3JPd24obWV0aG9kcywgKG1ldGhvZEluZm8sIG1ldGhvZE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1zID0gbWV0aG9kSW5mby5wYXJhbXMgPyBPYmplY3QudmFsdWVzKG1ldGhvZEluZm8ucGFyYW1zKS5yZWR1Y2UoKHJlc3VsdCwgdikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdi5uYW1lXSA9IF8ub21pdCh2LCBbJ25hbWUnXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwge30pIDoge307XG5cbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goeyBtZXRob2Q6IG1ldGhvZEluZm8uaHR0cE1ldGhvZCwgdXJsOiB1cmxKb2luKGJhc2VSb3V0ZSwgZW50aXR5TmFtZUluVXJsLCBtZXRob2ROYW1lKSwgZGVzYzogbWV0aG9kSW5mby5kZXNjLCBwYXJhbXMgfSk7XG4gICAgICAgICAgICB9KTsgICAgICAgIFxuICAgICAgICB9KTtcblxuICAgICAgICBjdHguYm9keSA9IGxpc3Q7XG4gICAgfSk7XG5cbiAgICBbJ2dldCcsICdwb3N0J10uZm9yRWFjaChtZXRob2QgPT4geyAgICAgICAgIFxuICAgICAgICBhcHAuYWRkUm91dGUocm91dGVyLCBtZXRob2QsICcvOmVudGl0eS86bWV0aG9kJywgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgbGV0IGRiID0gY3R4LmFwcE1vZHVsZS5kYihvcHRpb25zLnNjaGVtYU5hbWUpO1xuXG4gICAgICAgICAgICBsZXQgZW50aXR5TmFtZSA9IF8uY2FtZWxDYXNlKGN0eC5wYXJhbXMuZW50aXR5KTtcbiAgICAgICAgICAgIGxldCBtZXRob2ROYW1lID0gXy5jYW1lbENhc2UoY3R4LnBhcmFtcy5tZXRob2QpO1xuICAgICAgICAgICAgbGV0IGFwaUluZm8gPSBlbnRpdHlNb2RlbHNbZW50aXR5TmFtZV07XG4gICAgICAgICAgICBhcGlJbmZvID0gYXBpSW5mbyAmJiBhcGlJbmZvW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgaWYgKCFhcGlJbmZvIHx8IGFwaUluZm8uaHR0cE1ldGhvZC50b1VwcGVyQ2FzZSgpICE9PSBjdHgubWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXBpSW5mbyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3R4LnBhcmFtcywgY3R4Lm1ldGhvZCk7XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdCgnQVBJIGVuZHBvaW50IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGFyZ3MgPSBbIGN0eCBdO1xuXG4gICAgICAgICAgICBpZiAoYXBpSW5mby5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBhcGlJbmZvLnBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ05hbWUgPSBwYXJhbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjdHgucXVlcnlbYXJnTmFtZV0gfHwgY3R4LnJlcXVlc3QuYm9keVthcmdOYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc05pbCh2YWx1ZSkgJiYgIXBhcmFtLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdChgUmVxdWlyZWQgYXJndW1lbnQgXCIke2FyZ05hbWV9XCIgaXMgbm90IGdpdmVuLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IEVudGl0eU1vZGVsID0gZGIubW9kZWwoZW50aXR5TmFtZSk7IFxuICAgICAgICAgICAgbWV0aG9kTmFtZSArPSAnXyc7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRW50aXR5TW9kZWxbbWV0aG9kTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90Rm91bmQoYFJQQyBlbmRwb2ludCBcIiR7Y3R4LnBhdGh9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdHguYm9keSA9IGF3YWl0IEVudGl0eU1vZGVsW21ldGhvZE5hbWVdKC4uLmFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9KTsgICAgXG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59OyJdfQ==