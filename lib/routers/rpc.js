"use strict";

require("source-map-support/register");

const {
  _,
  fs,
  eachAsync_,
  urlJoin,
  getValueByPath
} = require('rk-utils');

const Router = require('koa-router');

const HttpCode = require('http-status-codes');

const {
  InvalidConfiguration,
  BadRequest,
  MethodNotAllowed
} = require('../Errors');

function mergeQuery(query, extra) {
  return query && query.$query ? {
    $query: { ...query.$query,
      ...extra
    }
  } : { ...query,
    ...extra
  };
}

module.exports = (app, baseRoute, options) => {
  if (!options.schemaName) {
    throw new InvalidConfiguration('Missing schema name config.', app, `routing.${baseRoute}.rpc.schemaName`);
  }

  if (!options.entityModels) {
    throw new InvalidConfiguration('Missing entity models config.', app, `routing.${baseRoute}.rpc.entityModels`);
  }

  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.restApiWrapper(), 'restApiWrapper');

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let apiListEndpoint = options.apiListEndpoint || '/_list';
  let entityModels = options.entityModels;

  if (typeof options.entityModels === 'string') {
    entityModels = fs.readJsonSync(app.toAbsolutePath(options.entityModels));
  }

  app.addRoute(router, 'get', apiListEndpoint, async ctx => {
    let list = [];

    _.forOwn(entityModels, (methods, entityName) => {
      let entityNameInUrl = _.kebabCase(entityName);

      _.forOwn(methods, (methodInfo, methodName) => {
        let params = Object.values(methodInfo.params).reduce((result, v) => {
          result[v.name] = _.omit(v, ['name']);
          return result;
        }, {});
        list.push({
          method: methodInfo.httpMethod,
          url: urlJoin(baseRoute, entityNameInUrl, methodName),
          desc: methodInfo.desc,
          params
        });
      });
    });

    ctx.body = list;
  });
  ['get', 'post'].forEach(method => {
    app.addRoute(router, method, '/:entity/:method', async ctx => {
      let db = ctx.appModule.db(options.schemaName);

      let entityName = _.camelCase(ctx.params.entity);

      let methodName = _.camelCase(ctx.params.method);

      let apiInfo = entityModels[entityName];
      apiInfo = apiInfo && apiInfo[methodName];

      if (!apiInfo || apiInfo.httpMethod.toUpperCase() !== ctx.method) {
        console.log(apiInfo);
        console.log(ctx.params, ctx.method);
        throw new BadRequest('API endpoint not found.');
      }

      let args = [ctx];

      if (apiInfo.params) {
        apiInfo.params.forEach(param => {
          let argName = param.name;
          let value = ctx.query[argName] || ctx.request.body[argName];

          if (_.isNil(value) && !param.optional) {
            throw new BadRequest(`Required argument "${argName}" is not given.`);
          }

          args.push(value);
        });
      }

      let EntityModel = db.model(entityName);
      ctx.body = await EntityModel[methodName + '_'](...args);
    });
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,