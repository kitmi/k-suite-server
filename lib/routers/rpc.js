"use strict";

require("source-map-support/register");

const {
  _,
  fs,
  eachAsync_,
  urlJoin,
  getValueByPath
} = require('rk-utils');

const Router = require('koa-router');

const HttpCode = require('http-status-codes');

const {
  InvalidConfiguration,
  BadRequest,
  NotFound
} = require('../Errors');

function mergeQuery(query, extra) {
  return query && query.$query ? {
    $query: { ...query.$query,
      ...extra
    }
  } : { ...query,
    ...extra
  };
}

module.exports = (app, baseRoute, options) => {
  if (!options.schemaName) {
    throw new InvalidConfiguration('Missing schema name config.', app, `routing.${baseRoute}.rpc.schemaName`);
  }

  if (!options.entityModels) {
    throw new InvalidConfiguration('Missing entity models config.', app, `routing.${baseRoute}.rpc.entityModels`);
  }

  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.restApiWrapper(), 'restApiWrapper');

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let apiListEndpoint = options.apiListEndpoint || '/_list';
  let entityModels = options.entityModels;

  if (typeof options.entityModels === 'string') {
    entityModels = fs.readJsonSync(app.toAbsolutePath(options.entityModels));
  }

  app.addRoute(router, 'get', apiListEndpoint, async ctx => {
    let list = [];

    _.forOwn(entityModels, (methods, entityName) => {
      let entityNameInUrl = _.kebabCase(entityName);

      _.forOwn(methods, (methodInfo, methodName) => {
        let params = Object.values(methodInfo.params).reduce((result, v) => {
          result[v.name] = _.omit(v, ['name']);
          return result;
        }, {});
        list.push({
          method: methodInfo.httpMethod,
          url: urlJoin(baseRoute, entityNameInUrl, methodName),
          desc: methodInfo.desc,
          params
        });
      });
    });

    ctx.body = list;
  });
  ['get', 'post'].forEach(method => {
    app.addRoute(router, method, '/:entity/:method', async ctx => {
      let db = ctx.appModule.db(options.schemaName);

      let entityName = _.camelCase(ctx.params.entity);

      let methodName = _.camelCase(ctx.params.method);

      let apiInfo = entityModels[entityName];
      apiInfo = apiInfo && apiInfo[methodName];

      if (!apiInfo || apiInfo.httpMethod.toUpperCase() !== ctx.method) {
        console.log(apiInfo);
        console.log(ctx.params, ctx.method);
        throw new BadRequest('API endpoint not found.');
      }

      let args = [ctx];

      if (apiInfo.params) {
        apiInfo.params.forEach(param => {
          let argName = param.name;
          let value = ctx.query[argName] || ctx.request.body[argName];

          if (_.isNil(value) && !param.optional) {
            throw new BadRequest(`Required argument "${argName}" is not given.`);
          }

          args.push(value);
        });
      }

      let EntityModel = db.model(entityName);
      methodName += '_';

      if (typeof EntityModel[methodName] !== 'function') {
        throw new NotFound(`RPC endpoint "${ctx.path}" not found.`);
      }

      ctx.body = await EntityModel[methodName](...args);
    });
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3JwYy5qcyJdLCJuYW1lcyI6WyJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidXJsSm9pbiIsImdldFZhbHVlQnlQYXRoIiwicmVxdWlyZSIsIlJvdXRlciIsIkh0dHBDb2RlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwiTm90Rm91bmQiLCJtZXJnZVF1ZXJ5IiwicXVlcnkiLCJleHRyYSIsIiRxdWVyeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJiYXNlUm91dGUiLCJvcHRpb25zIiwic2NoZW1hTmFtZSIsImVudGl0eU1vZGVscyIsInJvdXRlciIsInByZWZpeCIsInVzZU1pZGRsZXdhcmUiLCJyZXN0QXBpV3JhcHBlciIsIm1pZGRsZXdhcmVzIiwidXNlTWlkZGxld2FyZXMiLCJhcGlMaXN0RW5kcG9pbnQiLCJyZWFkSnNvblN5bmMiLCJ0b0Fic29sdXRlUGF0aCIsImFkZFJvdXRlIiwiY3R4IiwibGlzdCIsImZvck93biIsIm1ldGhvZHMiLCJlbnRpdHlOYW1lIiwiZW50aXR5TmFtZUluVXJsIiwia2ViYWJDYXNlIiwibWV0aG9kSW5mbyIsIm1ldGhvZE5hbWUiLCJwYXJhbXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJyZXN1bHQiLCJ2IiwibmFtZSIsIm9taXQiLCJwdXNoIiwibWV0aG9kIiwiaHR0cE1ldGhvZCIsInVybCIsImRlc2MiLCJib2R5IiwiZm9yRWFjaCIsImRiIiwiYXBwTW9kdWxlIiwiY2FtZWxDYXNlIiwiZW50aXR5IiwiYXBpSW5mbyIsInRvVXBwZXJDYXNlIiwiY29uc29sZSIsImxvZyIsImFyZ3MiLCJwYXJhbSIsImFyZ05hbWUiLCJ2YWx1ZSIsInJlcXVlc3QiLCJpc05pbCIsIm9wdGlvbmFsIiwiRW50aXR5TW9kZWwiLCJtb2RlbCIsInBhdGgiLCJhZGRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtD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O0FBQy9DLGNBQU0sSUFBSTlCLFFBQUosQ0FBYyxpQkFBZ0JzQixHQUFHLENBQUN5QyxJQUFLLGNBQXZDLENBQU47QUFDSDs7QUFFRHpDLE1BQUFBLEdBQUcsQ0FBQ3NCLElBQUosR0FBVyxNQUFNaUIsV0FBVyxDQUFDL0IsVUFBRCxDQUFYLENBQXdCLEdBQUd3QixJQUEzQixDQUFqQjtBQUNILEtBckNEO0FBc0NILEdBdkNEO0FBeUNBL0MsRUFBQUEsR0FBRyxDQUFDeUQsU0FBSixDQUFjcEQsTUFBZDtBQUNILENBL0ZEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXywgZnMsIGVhY2hBc3luY18sIHVybEpvaW4sIGdldFZhbHVlQnlQYXRoIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgna29hLXJvdXRlcicpO1xuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiwgQmFkUmVxdWVzdCwgTm90Rm91bmQgfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIFJFU1RmdWwgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfUmVzdFxuICovXG5cbiBmdW5jdGlvbiBtZXJnZVF1ZXJ5KHF1ZXJ5LCBleHRyYSkge1xuICAgIHJldHVybiAocXVlcnkgJiYgcXVlcnkuJHF1ZXJ5KSA/IHsgJHF1ZXJ5OiB7IC4uLnF1ZXJ5LiRxdWVyeSwgLi4uZXh0cmEgfSB9IDogeyAuLi5xdWVyeSwgLi4uZXh0cmEgfTtcbiB9XG5cbi8qKlxuICogQ3JlYXRlIGEgUkVTVGZ1bCByb3V0ZXIuXG4gKiBAcGFyYW0geyp9IGFwcCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0ge29iamVjdHN9IG9wdGlvbnMgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucmVzb3VyY2VzUGF0aF1cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fGFycmF5fSBbb3B0aW9ucy5taWRkbGV3YXJlc11cbiAqIEBleGFtcGxlXG4gKiAgJzxiYXNlIHBhdGg+Jzoge1xuICogICAgICBycGM6IHsgICAgICAgICAgXG4gKiAgICAgICAgICBtaWRkbGV3YXJlczoge30sXG4gKiAgICAgICAgICBzY2hlbWFOYW1lOiAnJyxcbiAqICAgICAgICAgIGVudGl0eU1vZGVsczoge318PGNvbmZpZyBwYXRoPiwgIFxuICogICAgICAgICAgYXBpTGlzdEVuZHBvaW50OiAnL19saXN0J1xuICogICAgICB9XG4gKiAgfVxuICogIFxuICogIHJvdXRlICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwIG1ldGhvZCAgICBmdW5jdGlvbiBvZiBjdHJsXG4gKiAgLzptb2RlbC86bWV0aG9kICAgICAgICAgICAgICAgIHBvc3QgICAgICAgICAgIG1vZGVsLm1ldGhvZCBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoYXBwLCBiYXNlUm91dGUsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuc2NoZW1hTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBzY2hlbWEgbmFtZSBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5ycGMuc2NoZW1hTmFtZWBcbiAgICAgICAgKTtcbiAgICB9ICAgIFxuXG4gICAgaWYgKCFvcHRpb25zLmVudGl0eU1vZGVscykge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBlbnRpdHkgbW9kZWxzIGNvbmZpZy4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9LnJwYy5lbnRpdHlNb2RlbHNgXG4gICAgICAgICk7ICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgbGV0IHJvdXRlciA9IGJhc2VSb3V0ZSA9PT0gJy8nID8gbmV3IFJvdXRlcigpIDogbmV3IFJvdXRlcih7cHJlZml4OiBiYXNlUm91dGV9KTtcblxuICAgIGFwcC51c2VNaWRkbGV3YXJlKHJvdXRlciwgYXBwLnJlc3RBcGlXcmFwcGVyKCksICdyZXN0QXBpV3JhcHBlcicpO1xuXG4gICAgaWYgKG9wdGlvbnMubWlkZGxld2FyZXMpIHtcbiAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKHJvdXRlciwgb3B0aW9ucy5taWRkbGV3YXJlcyk7XG4gICAgfVxuXG4gICAgbGV0IGFwaUxpc3RFbmRwb2ludCA9IG9wdGlvbnMuYXBpTGlzdEVuZHBvaW50IHx8ICcvX2xpc3QnO1xuXG4gICAgbGV0IGVudGl0eU1vZGVscyA9IG9wdGlvbnMuZW50aXR5TW9kZWxzO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmVudGl0eU1vZGVscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZW50aXR5TW9kZWxzID0gZnMucmVhZEpzb25TeW5jKGFwcC50b0Fic29sdXRlUGF0aChvcHRpb25zLmVudGl0eU1vZGVscykpOyBcbiAgICB9XG5cbiAgICBhcHAuYWRkUm91dGUocm91dGVyLCAnZ2V0JywgYXBpTGlzdEVuZHBvaW50LCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgIFxuICAgICAgICBfLmZvck93bihlbnRpdHlNb2RlbHMsIChtZXRob2RzLCBlbnRpdHlOYW1lKSA9PiB7XG4gICAgICAgICAgICAvL3RvZG86IGZpbHRlciBlbnRpdHkgb3IgbWV0aG9kcyBieSBjb25maWdcbiAgICAgICAgICAgIGxldCBlbnRpdHlOYW1lSW5VcmwgPSBfLmtlYmFiQ2FzZShlbnRpdHlOYW1lKTsgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBfLmZvck93bihtZXRob2RzLCAobWV0aG9kSW5mbywgbWV0aG9kTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbXMgPSBPYmplY3QudmFsdWVzKG1ldGhvZEluZm8ucGFyYW1zKS5yZWR1Y2UoKHJlc3VsdCwgdikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdi5uYW1lXSA9IF8ub21pdCh2LCBbJ25hbWUnXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKHsgbWV0aG9kOiBtZXRob2RJbmZvLmh0dHBNZXRob2QsIHVybDogdXJsSm9pbihiYXNlUm91dGUsIGVudGl0eU5hbWVJblVybCwgbWV0aG9kTmFtZSksIGRlc2M6IG1ldGhvZEluZm8uZGVzYywgcGFyYW1zIH0pO1xuICAgICAgICAgICAgfSk7ICAgICAgICBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3R4LmJvZHkgPSBsaXN0O1xuICAgIH0pO1xuXG4gICAgWydnZXQnLCAncG9zdCddLmZvckVhY2gobWV0aG9kID0+IHsgICAgICAgICBcbiAgICAgICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgbWV0aG9kLCAnLzplbnRpdHkvOm1ldGhvZCcsIGFzeW5jIChjdHgpID0+IHtcbiAgICAgICAgICAgIGxldCBkYiA9IGN0eC5hcHBNb2R1bGUuZGIob3B0aW9ucy5zY2hlbWFOYW1lKTtcblxuICAgICAgICAgICAgbGV0IGVudGl0eU5hbWUgPSBfLmNhbWVsQ2FzZShjdHgucGFyYW1zLmVudGl0eSk7XG4gICAgICAgICAgICBsZXQgbWV0aG9kTmFtZSA9IF8uY2FtZWxDYXNlKGN0eC5wYXJhbXMubWV0aG9kKTtcbiAgICAgICAgICAgIGxldCBhcGlJbmZvID0gZW50aXR5TW9kZWxzW2VudGl0eU5hbWVdO1xuICAgICAgICAgICAgYXBpSW5mbyA9IGFwaUluZm8gJiYgYXBpSW5mb1ttZXRob2ROYW1lXTtcbiAgICAgICAgICAgIGlmICghYXBpSW5mbyB8fCBhcGlJbmZvLmh0dHBNZXRob2QudG9VcHBlckNhc2UoKSAhPT0gY3R4Lm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFwaUluZm8pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGN0eC5wYXJhbXMsIGN0eC5tZXRob2QpO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoJ0FQSSBlbmRwb2ludCBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBhcmdzID0gWyBjdHggXTtcblxuICAgICAgICAgICAgaWYgKGFwaUluZm8ucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgYXBpSW5mby5wYXJhbXMuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhcmdOYW1lID0gcGFyYW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gY3R4LnF1ZXJ5W2FyZ05hbWVdIHx8IGN0eC5yZXF1ZXN0LmJvZHlbYXJnTmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwodmFsdWUpICYmICFwYXJhbS5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoYFJlcXVpcmVkIGFyZ3VtZW50IFwiJHthcmdOYW1lfVwiIGlzIG5vdCBnaXZlbi5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBFbnRpdHlNb2RlbCA9IGRiLm1vZGVsKGVudGl0eU5hbWUpOyBcbiAgICAgICAgICAgIG1ldGhvZE5hbWUgKz0gJ18nO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVudGl0eU1vZGVsW21ldGhvZE5hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kKGBSUEMgZW5kcG9pbnQgXCIke2N0eC5wYXRofVwiIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4LmJvZHkgPSBhd2FpdCBFbnRpdHlNb2RlbFttZXRob2ROYW1lXSguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7ICAgIFxuXG4gICAgYXBwLmFkZFJvdXRlcihyb3V0ZXIpO1xufTsiXX0=