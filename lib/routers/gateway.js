"use strict";

require("source-map-support/register");

const {
  _,
  fs,
  eachAsync_,
  urlJoin
} = require('rk-utils');

const Router = require('koa-router');

const HttpCode = require('http-status-codes');

const {
  InvalidConfiguration,
  BadRequest
} = require('../Errors');

module.exports = (app, baseRoute, options) => {
  if (!options.schemaName) {
    throw new InvalidConfiguration('Missing schema name config.', app, `routing.${baseRoute}.gateway.schemaName`);
  }

  if (!options.entityModels) {
    throw new InvalidConfiguration('Missing entity models config.', app, `routing.${baseRoute}.gateway.entityModels`);
  }

  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.restApiWrapper());

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let apiListEndpoint = options.apiListEndpoint || '/_list';
  let metadataEndpoint = options.metadataEndpoint || '/_info';
  let entityModels = options.entityModels;

  if (typeof options.entityModels === 'string') {
    entityModels = fs.readJsonSync(options.entityModels);
  }

  app.addRoute(router, 'get', apiListEndpoint, async ctx => {
    let list = [];
    await eachAsync_(entityModels, async (config, entityName) => {
      list.push({
        type: 'list',
        method: 'get',
        url: urlJoin(baseRoute, entityName)
      });
      list.push({
        type: 'detail',
        method: 'get',
        url: urlJoin(baseRoute, entityName, ':id')
      });
      list.push({
        type: 'create',
        method: 'post',
        url: urlJoin(baseRoute, entityName)
      });
      list.push({
        type: 'update',
        method: 'put',
        url: urlJoin(baseRoute, entityName, ':id')
      });
      list.push({
        type: 'delete',
        method: 'del',
        url: urlJoin(baseRoute, entityName, ':id')
      });
    });
    ctx.body = list.join('\n');
  });
  app.addRoute(router, 'get', urlJoin(metadataEndpoint, ':entity'), async ctx => {
    let entityName = ctx.params.entity;

    if (!(entityName in entityModels)) {
      throw new BadRequest('Invalid entity endpoint.');
    }

    let db = ctx.appModule.db(options.schemaName);
    let EntityModel = db.model(entityName);
    ctx.body = EntityModel.meta;
  });
  app.addRoute(router, 'get', '/:entity', async ctx => {
    let db = ctx.appModule.db(options.schemaName);
    let EntityModel = db.model(ctx.params.entity);
    ctx.body = await EntityModel.findAll_({
      $where: ctx.query
    });
  });
  app.addRoute(router, 'get', '/:entity/:id', async ctx => {
    let db = ctx.appModule.db(options.schemaName);
    let EntityModel = db.model(ctx.params.entity);
    let query = {
      [EntityModel.meta.keyField]: ctx.params.id
    };
    let model = await EntityModel.findOne_({
      $where: query
    });

    if (!model) {
      ctx.throw(HttpCode.BAD_REQUEST, `Invalid ${ctx.params.entity} id.`, {
        expose: true,
        payload: query
      });
    }

    ctx.body = model;
  });
  app.addRoute(router, 'post', '/:entity', async ctx => {
    let db = ctx.appModule.db(options.schemaName);
    let EntityModel = db.model(ctx.params.entity);
    let model = await EntityModel.create_(ctx.body);
    ctx.body = model;
  });
  app.addRoute(router, 'put', '/:entity/:id', async ctx => {});
  app.addRoute(router, 'del', '/:entity/:id', async ctx => {});
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL2dhdGV3YXkuanMiXSwibmFtZXMiOlsiXyIsImZzIiwiZWFjaEFzeW5jXyIsInVybEpvaW4iLCJyZXF1aXJlIiwiUm91dGVyIiwiSHR0cENvZGUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkJhZFJlcXVlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYmFzZVJvdXRlIiwib3B0aW9ucyIsInNjaGVtYU5hbWUiLCJlbnRpdHlNb2RlbHMiLCJyb3V0ZXIiLCJwcmVmaXgiLCJ1c2VNaWRkbGV3YXJlIiwicmVzdEFwaVdyYXBwZXIiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiYXBpTGlzdEVuZHBvaW50IiwibWV0YWRhdGFFbmRwb2ludCIsInJlYWRKc29uU3luYyIsImFkZFJvdXRlIiwiY3R4IiwibGlzdCIsImNvbmZpZyIsImVudGl0eU5hbWUiLCJwdXNoIiwidHlwZSIsIm1ldGhvZCIsInVybCIsImJvZHkiLCJqb2luIiwicGFyYW1zIiwiZW50aXR5IiwiZGIiLCJhcHBNb2R1bGUiLCJFbnRpdHlNb2RlbCIsIm1vZGVsIiwibWV0YSIsImZpbmRBbGxfIiwiJHdoZXJlIiwicXVlcnkiLCJrZXlGaWVsZCIsImlkIiwiZmluZE9uZV8iLCJ0aHJvdyIsIkJBRF9SRVFVRVNUIiwiZXhwb3NlIiwicGF5bG9hZCIsImNyZWF0ZV8iLCJhZGRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLEVBQUw7QUFBU0MsRUFBQUEsVUFBVDtBQUFxQkMsRUFBQUE7QUFBckIsSUFBaUNDLE9BQU8sQ0FBQyxVQUFELENBQTlDOztBQUNBLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBdEI7O0FBQ0EsTUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQSxvQkFBRjtBQUF3QkMsRUFB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RyxDQUFDYSxTQUFKLENBQWNELEVBQWQsQ0FBaUJ6QixPQUFPLENBQUNDLFVBQXpCLENBQVQ7QUFDQSxRQUFJMEIsV0FBVyxHQUFHRixFQUFFLENBQUNHLEtBQUgsQ0FBU2YsR0FBRyxDQUFDVSxNQUFKLENBQVdDLE1BQXBCLENBQWxCO0FBRUEsUUFBSUksS0FBSyxHQUFHLE1BQU1ELFdBQVcsQ0FBQ2EsT0FBWixDQUFvQjNCLEdBQUcsQ0FBQ1EsSUFBeEIsQ0FBbEI7QUFFQVIsSUFBQUEsR0FBRyxDQUFDUSxJQUFKLEdBQVdPLEtBQVg7QUFDSCxHQVBEO0FBVUE5QixFQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYVQsTUFBYixFQUFxQixLQUFyQixFQUE0QixjQUE1QixFQUE0QyxNQUFPVSxHQUFQLElBQWUsQ0FFMUQsQ0FGRDtBQUtBZixFQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYVQsTUFBYixFQUFxQixLQUFyQixFQUE0QixjQUE1QixFQUE0QyxNQUFPVSxHQUFQLElBQWUsQ0FFMUQsQ0FGRDtBQUlBZixFQUFBQSxHQUFHLENBQUMyQyxTQUFKLENBQWN0QyxNQUFkO0FBQ0gsQ0ExR0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfLCBmcywgZWFjaEFzeW5jXywgdXJsSm9pbiB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKTtcbmNvbnN0IEh0dHBDb2RlID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24sIEJhZFJlcXVlc3QgfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIFJFU1RmdWwgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfUmVzdFxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgUkVTVGZ1bCByb3V0ZXIuXG4gKiBAcGFyYW0geyp9IGFwcCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0ge29iamVjdHN9IG9wdGlvbnMgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucmVzb3VyY2VzUGF0aF1cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fGFycmF5fSBbb3B0aW9ucy5taWRkbGV3YXJlc11cbiAqIEBleGFtcGxlXG4gKiAgJzxiYXNlIHBhdGg+Jzoge1xuICogICAgICBnYXRld2F5OiB7ICAgICAgICAgIFxuICogICAgICAgICAgbWlkZGxld2FyZXM6IHt9LFxuICogICAgICAgICAgc2NoZW1hTmFtZTogJycsXG4gKiAgICAgICAgICBlbnRpdHlNb2RlbHM6IHt9fDxjb25maWcgcGF0aD4sICBcbiAqICAgICAgICAgIGFwaUxpc3RFbmRwb2ludDogJy9fbGlzdCcsXG4gKiAgICAgICAgICBtZXRhZGF0YUVuZHBvaW50OiAnL19tZXRhJ1xuICogICAgICB9XG4gKiAgfVxuICogIFxuICogIHJvdXRlICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwIG1ldGhvZCAgICBmdW5jdGlvbiBvZiBjdHJsXG4gKiAgLzpyZXNvdXJjZSAgICAgICAgICAgICAgICAgICAgIGdldCAgICAgICAgICAgIHF1ZXJ5XG4gKiAgLzpyZXNvdXJjZSAgICAgICAgICAgICAgICAgICAgIHBvc3QgICAgICAgICAgIGNyZWF0ZVxuICogIC86cmVzb3VyY2UvOmlkICAgICAgICAgICAgICAgICBnZXQgICAgICAgICAgICBkZXRhaWxcbiAqICAvOnJlc291cmNlLzppZCAgICAgICAgICAgICAgICAgcHV0ICAgICAgICAgICAgdXBkYXRlXG4gKiAgLzpyZXNvdXJjZS86aWQgICAgICAgICAgICAgICAgIGRlbGV0ZSAgICAgICAgIHJlbW92ZSBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoYXBwLCBiYXNlUm91dGUsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuc2NoZW1hTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBzY2hlbWEgbmFtZSBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5nYXRld2F5LnNjaGVtYU5hbWVgXG4gICAgICAgICk7XG4gICAgfSAgICBcblxuICAgIGlmICghb3B0aW9ucy5lbnRpdHlNb2RlbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3NpbmcgZW50aXR5IG1vZGVscyBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5nYXRld2F5LmVudGl0eU1vZGVsc2BcbiAgICAgICAgKTsgICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBsZXQgcm91dGVyID0gYmFzZVJvdXRlID09PSAnLycgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHtwcmVmaXg6IGJhc2VSb3V0ZX0pO1xuXG4gICAgYXBwLnVzZU1pZGRsZXdhcmUocm91dGVyLCBhcHAucmVzdEFwaVdyYXBwZXIoKSk7XG5cbiAgICBpZiAob3B0aW9ucy5taWRkbGV3YXJlcykge1xuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBvcHRpb25zLm1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICBsZXQgYXBpTGlzdEVuZHBvaW50ID0gb3B0aW9ucy5hcGlMaXN0RW5kcG9pbnQgfHwgJy9fbGlzdCc7XG4gICAgbGV0IG1ldGFkYXRhRW5kcG9pbnQgPSBvcHRpb25zLm1ldGFkYXRhRW5kcG9pbnQgfHwgJy9faW5mbyc7XG5cbiAgICBsZXQgZW50aXR5TW9kZWxzID0gb3B0aW9ucy5lbnRpdHlNb2RlbHM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZW50aXR5TW9kZWxzID09PSAnc3RyaW5nJykge1xuICAgICAgICBlbnRpdHlNb2RlbHMgPSBmcy5yZWFkSnNvblN5bmMob3B0aW9ucy5lbnRpdHlNb2RlbHMpOyBcbiAgICB9XG5cbiAgICBhcHAuYWRkUm91dGUocm91dGVyLCAnZ2V0JywgYXBpTGlzdEVuZHBvaW50LCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBlYWNoQXN5bmNfKGVudGl0eU1vZGVscywgYXN5bmMgKGNvbmZpZywgZW50aXR5TmFtZSkgPT4ge1xuICAgICAgICAgICAgLy90b2RvOiBmaWx0ZXIgZW50aXR5IG9yIG1ldGhvZHMgYnkgY29uZmlnXG5cbiAgICAgICAgICAgIGxpc3QucHVzaCh7IHR5cGU6ICdsaXN0JywgbWV0aG9kOiAnZ2V0JywgdXJsOiB1cmxKb2luKGJhc2VSb3V0ZSwgZW50aXR5TmFtZSkgfSk7XG4gICAgICAgICAgICBsaXN0LnB1c2goeyB0eXBlOiAnZGV0YWlsJywgbWV0aG9kOiAnZ2V0JywgdXJsOiB1cmxKb2luKGJhc2VSb3V0ZSwgZW50aXR5TmFtZSwgJzppZCcpIH0pO1xuICAgICAgICAgICAgbGlzdC5wdXNoKHsgdHlwZTogJ2NyZWF0ZScsIG1ldGhvZDogJ3Bvc3QnLCB1cmw6IHVybEpvaW4oYmFzZVJvdXRlLCBlbnRpdHlOYW1lKSB9KTtcbiAgICAgICAgICAgIGxpc3QucHVzaCh7IHR5cGU6ICd1cGRhdGUnLCBtZXRob2Q6ICdwdXQnLCB1cmw6IHVybEpvaW4oYmFzZVJvdXRlLCBlbnRpdHlOYW1lLCAnOmlkJykgfSk7XG4gICAgICAgICAgICBsaXN0LnB1c2goeyB0eXBlOiAnZGVsZXRlJywgbWV0aG9kOiAnZGVsJywgdXJsOiB1cmxKb2luKGJhc2VSb3V0ZSwgZW50aXR5TmFtZSwgJzppZCcpIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjdHguYm9keSA9IGxpc3Quam9pbignXFxuJyk7XG4gICAgfSk7XG5cbiAgICBhcHAuYWRkUm91dGUocm91dGVyLCAnZ2V0JywgdXJsSm9pbihtZXRhZGF0YUVuZHBvaW50LCAnOmVudGl0eScpLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGxldCBlbnRpdHlOYW1lID0gY3R4LnBhcmFtcy5lbnRpdHk7XG4gICAgICAgIGlmICghKGVudGl0eU5hbWUgaW4gZW50aXR5TW9kZWxzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoJ0ludmFsaWQgZW50aXR5IGVuZHBvaW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRiID0gY3R4LmFwcE1vZHVsZS5kYihvcHRpb25zLnNjaGVtYU5hbWUpO1xuICAgICAgICBsZXQgRW50aXR5TW9kZWwgPSBkYi5tb2RlbChlbnRpdHlOYW1lKTtcblxuICAgICAgICBjdHguYm9keSA9IEVudGl0eU1vZGVsLm1ldGE7XG4gICAgfSk7XG5cbiAgICAvL2dldCBsaXN0ICAgIFxuICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdnZXQnLCAnLzplbnRpdHknLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGxldCBkYiA9IGN0eC5hcHBNb2R1bGUuZGIob3B0aW9ucy5zY2hlbWFOYW1lKTtcbiAgICAgICAgbGV0IEVudGl0eU1vZGVsID0gZGIubW9kZWwoY3R4LnBhcmFtcy5lbnRpdHkpO1xuXG4gICAgICAgIGN0eC5ib2R5ID0gYXdhaXQgRW50aXR5TW9kZWwuZmluZEFsbF8oeyAkd2hlcmU6IGN0eC5xdWVyeSB9KTtcbiAgICB9KTtcblxuICAgIC8vZ2V0IGRldGFpbFxuICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdnZXQnLCAnLzplbnRpdHkvOmlkJywgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICBsZXQgZGIgPSBjdHguYXBwTW9kdWxlLmRiKG9wdGlvbnMuc2NoZW1hTmFtZSk7XG4gICAgICAgIGxldCBFbnRpdHlNb2RlbCA9IGRiLm1vZGVsKGN0eC5wYXJhbXMuZW50aXR5KTtcblxuICAgICAgICBsZXQgcXVlcnkgPSB7IFtFbnRpdHlNb2RlbC5tZXRhLmtleUZpZWxkXTogY3R4LnBhcmFtcy5pZCB9O1xuXG4gICAgICAgIGxldCBtb2RlbCA9IGF3YWl0IEVudGl0eU1vZGVsLmZpbmRPbmVfKHsgJHdoZXJlOiBxdWVyeSB9KTsgICAgICAgIFxuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICBjdHgudGhyb3coSHR0cENvZGUuQkFEX1JFUVVFU1QsIGBJbnZhbGlkICR7Y3R4LnBhcmFtcy5lbnRpdHl9IGlkLmAsIHsgZXhwb3NlOiB0cnVlLCBwYXlsb2FkOiBxdWVyeSB9KTtcbiAgICAgICAgfSBcblxuICAgICAgICBjdHguYm9keSA9IG1vZGVsO1xuICAgIH0pO1xuXG4gICAgLy9jcmVhdGVcbiAgICBhcHAuYWRkUm91dGUocm91dGVyLCAncG9zdCcsICcvOmVudGl0eScsIGFzeW5jIChjdHgpID0+IHtcbiAgICAgICAgbGV0IGRiID0gY3R4LmFwcE1vZHVsZS5kYihvcHRpb25zLnNjaGVtYU5hbWUpO1xuICAgICAgICBsZXQgRW50aXR5TW9kZWwgPSBkYi5tb2RlbChjdHgucGFyYW1zLmVudGl0eSk7ICAgICAgICBcblxuICAgICAgICBsZXQgbW9kZWwgPSBhd2FpdCBFbnRpdHlNb2RlbC5jcmVhdGVfKGN0eC5ib2R5KTsgICAgICAgIFxuXG4gICAgICAgIGN0eC5ib2R5ID0gbW9kZWw7XG4gICAgfSk7XG5cbiAgICAvL3VwZGF0ZVxuICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdwdXQnLCAnLzplbnRpdHkvOmlkJywgYXN5bmMgKGN0eCkgPT4ge1xuXG4gICAgfSk7XG5cbiAgICAvL2RlbGV0ZVxuICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdkZWwnLCAnLzplbnRpdHkvOmlkJywgYXN5bmMgKGN0eCkgPT4ge1xuXG4gICAgfSk7ICAgXG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59OyJdfQ==