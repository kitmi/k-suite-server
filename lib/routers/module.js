"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Literal = require('../enum/Literal');

const Router = require('koa-router');

const Controller = require('../patterns/Controller');

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = function (app, baseRoute, moduleItem) {
  let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);

  if (typeof moduleItem === 'string') {
    moduleItem = {
      controller: moduleItem
    };
  }

  let currentPrefix = Util.urlJoin(baseRoute, moduleItem.route || '/');
  let router = currentPrefix === '/' ? new Router() : new Router({
    prefix: currentPrefix
  });

  if (moduleItem.middlewares) {
    app.useMiddlewares(router, moduleItem.middlewares);
  }

  let controllerFile = path.join(controllerPath, moduleItem.controller + '.js');
  let controller;
  controller = require(controllerFile);

  if (controller.prototype instanceof Controller) {
    controller = new controller(app);
  }

  for (let actionName in controller) {
    let action = controller[actionName];
    if (typeof action !== 'function') continue;

    let httpMethod = _.castArray(action.__metaHttpMethod || 'get');

    let subRoute = Util.ensureLeftSlash(action.__metaRoute || actionName);

    _.each(httpMethod, method => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`);
      }

      app.addRoute(router, method, subRoute, action.__metaMiddlewares ? action.__metaMiddlewares.concat([app.wrapAction(action)]) : app.wrapAction(action));
    });
  }

  ;
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlV0aWwiLCJfIiwiUHJvbWlzZSIsIkxpdGVyYWwiLCJSb3V0ZXIiLCJDb250cm9sbGVyIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYmFzZVJvdXRlIiwibW9kdWxlSXRlbSIsImNvbnRyb2xsZXJQYXRoIiwiam9pbiIsImJhY2tlbmRQYXRoIiwiQ09OVFJPTExFUlNfUEFUSCIsImNvbnRyb2xsZXIiLCJjdXJyZW50UHJlZml4IiwidXJsSm9pbiIsInJvdXRlIiwicm91dGVyIiwicHJlZml4IiwibWlkZGxld2FyZXMiLCJ1c2VNaWRkbGV3YXJlcyIsImNvbnRyb2xsZXJGaWxlIiwicHJvdG90eXBlIiwiYWN0aW9uTmFtZSIsImFjdGlvbiIsImh0dHBNZXRob2QiLCJjYXN0QXJyYXkiLCJfX21ldGFIdHRwTWV0aG9kIiwic3ViUm91dGUiLCJlbnN1cmVMZWZ0U2xhc2giLCJfX21ldGFSb3V0ZSIsImVhY2giLCJtZXRob2QiLCJBTExPV0VEX0hUVFBfTUVUSE9EUyIsImhhcyIsImFkZFJvdXRlIiwiX19tZXRhTWlkZGxld2FyZXMiLCJjb25jYXQiLCJ3cmFwQWN0aW9uIiwiYWRkUm91dGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXRCOztBQUNBLE1BQU1NLFVBQVUsR0FBR04sT0FBTyxDQUFDLHdCQUFELENBQTFCOztBQUNBLE1BQU07QUFBRU8sRUFBQUE7QUFBRixJQUEyQlAsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBd0JBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxVQUExQixFQUFzQztBQUNuRCxNQUFJQyxjQUFjLEdBQUdkLElBQUksQ0FBQ2UsSUFBTCxDQUFVSixHQUFHLENBQUNLLFdBQWQsRUFBMkJYLE9BQU8sQ0FBQ1ksZ0JBQW5DLENBQXJCOztBQUVBLE1BQUksT0FBT0osVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUVoQ0EsSUFBQUEsVUFBVSxHQUFHO0FBQ1RLLE1BQUFBLFVBQVUsRUFBRUw7QUFESCxLQUFiO0FBR0g7O0FBRUQsTUFBSU0sYUFBYSxHQUFHakIsSUFBSSxDQUFDa0IsT0FBTCxDQUFhUixTQUFiLEVBQXdCQyxVQUFVLENBQUNRLEtBQVgsSUFBb0IsR0FBNUMsQ0FBcEI7QUFDQSxNQUFJQyxNQUFNLEdBQUdILGFBQWEsS0FBSyxHQUFsQixHQUF3QixJQUFJYixNQUFKLEVBQXhCLEdBQXVDLElBQUlBLE1BQUosQ0FBVztBQUFDaUIsSUFBQUEsTUFBTSxFQUFFSjtBQUFULEdBQVgsQ0FBcEQ7O0FBR0EsTUFBSU4sVUFBVSxDQUFDVyxXQUFmLEVBQTRCO0FBRXhCYixJQUFBQSxHQUFHLENBQUNjLGNBQUosQ0FBbUJILE1BQW5CLEVBQTJCVCxVQUFVLENBQUNXLFdBQXRDO0FBQ0g7O0FBRUQsTUFBSUUsY0FBYyxHQUFHMUIsSUFBSSxDQUFDZSxJQUFMLENBQVVELGNBQVYsRUFBMEJELFVBQVUsQ0FBQ0ssVUFBWCxHQUF3QixLQUFsRCxDQUFyQjtBQUNBLE1BQUlBLFVBQUo7QUFFQUEsRUFBQUEsVUFBVSxHQUFHakIsT0FBTyxDQUFDeUIsY0FBRCxDQUFwQjs7QUFFQSxNQUFJUixVQUFVLENBQUNTLFNBQVgsWUFBZ0NwQixVQUFwQyxFQUFnRDtBQUM1Q1csSUFBQUEsVUFBVSxHQUFHLElBQUlBLFVBQUosQ0FBZVAsR0FBZixDQUFiO0FBQ0g7O0FBRUQsT0FBSyxJQUFJaUIsVUFBVCxJQUF1QlYsVUFBdkIsRUFBbUM7QUFDL0IsUUFBSVcsTUFBTSxHQUFHWCxVQUFVLENBQUNVLFVBQUQsQ0FBdkI7QUFDQSxRQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBdEIsRUFBa0M7O0FBRWxDLFFBQUlDLFVBQVUsR0FBRzNCLENBQUMsQ0FBQzRCLFNBQUYsQ0FBWUYsTUFBTSxDQUFDRyxnQkFBUCxJQUEyQixLQUF2QyxDQUFqQjs7QUFDQSxRQUFJQyxRQUFRLEdBQUcvQixJQUFJLENBQUNnQyxlQUFMLENBQXFCTCxNQUFNLENBQUNNLFdBQVAsSUFBc0JQLFVBQTNDLENBQWY7O0FBRUF6QixJQUFBQSxDQUFDLENBQUNpQyxJQUFGLENBQU9OLFVBQVAsRUFBbUJPLE1BQU0sSUFBSTtBQUN6QixVQUFJLENBQUNoQyxPQUFPLENBQUNpQyxvQkFBUixDQUE2QkMsR0FBN0IsQ0FBaUNGLE1BQWpDLENBQUwsRUFBK0M7QUFDM0MsY0FBTSxJQUFJN0Isb0JBQUosQ0FDRiw4QkFBOEI2QixNQUQ1QixFQUVGMUIsR0FGRSxFQUdELFdBQVVDLFNBQVUsWUFBV0MsVUFBVSxDQUFDSyxVQUFXLElBQUdVLFVBQVcsRUFIbEUsQ0FBTjtBQUlIOztBQUVEakIsTUFBQUEsR0FBRyxDQUFDNkIsUUFBSixDQUFhbEIsTUFBYixFQUFxQmUsTUFBckIsRUFBNkJKLFFBQTdCLEVBQXVDSixNQUFNLENBQUNZLGlCQUFQLEdBQ25DWixNQUFNLENBQUNZLGlCQUFQLENBQXlCQyxNQUF6QixDQUFnQyxDQUFDL0IsR0FBRyxDQUFDZ0MsVUFBSixDQUFlZCxNQUFmLENBQUQsQ0FBaEMsQ0FEbUMsR0FFbkNsQixHQUFHLENBQUNnQyxVQUFKLENBQWVkLE1BQWYsQ0FGSjtBQUdILEtBWEQ7QUFZSDs7QUFBQTtBQUVEbEIsRUFBQUEsR0FBRyxDQUFDaUMsU0FBSixDQUFjdEIsTUFBZDtBQUNILENBbEREIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IF8gPSBVdGlsLl87XG5jb25zdCBQcm9taXNlID0gVXRpbC5Qcm9taXNlO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgna29hLXJvdXRlcicpO1xuY29uc3QgQ29udHJvbGxlciA9IHJlcXVpcmUoJy4uL3BhdHRlcm5zL0NvbnRyb2xsZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIE1vZHVsZSByb3V0ZXIgZm9yIG1vdW50aW5nIGEgc3BlY2lmaWMgY29udHJvbGxlci5cbiAqIEBtb2R1bGUgUm91dGVyX01vZHVsZVxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgbW9kdWxlLWJhc2VkIHJvdXRlci4gXG4gKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0geyp9IG1vZHVsZUl0ZW0gXG4gKiBAZXhhbXBsZVxuICogICAnPGJhc2UgcGF0aD4nOiB7ICAgIFxuICogICAgICAgbW9kdWxlOiB7XG4gKiAgICAgICAgICAgbWlkZGxld2FyZXM6IFxuICogICAgICAgICAgIGNvbnRyb2xsZXI6IFxuICogICAgICAgfVxuICogICB9XG4gKlxuICogICAnPGJhc2UgcGF0aD4nOiB7ICAgIFxuICogICAgICAgbW9kdWxlOiBcImNvbnRyb2xsZXJcIlxuICogICB9XG4gICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHAsIGJhc2VSb3V0ZSwgbW9kdWxlSXRlbSkge1xuICAgIGxldCBjb250cm9sbGVyUGF0aCA9IHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuQ09OVFJPTExFUlNfUEFUSCk7ICAgXG5cbiAgICBpZiAodHlwZW9mIG1vZHVsZUl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFsgJ2NvbnRyb2xsZXJOYW1lJyBdXG4gICAgICAgIG1vZHVsZUl0ZW0gPSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udHJvbGxlcjogbW9kdWxlSXRlbVxuICAgICAgICB9O1xuICAgIH0gICAgXG5cbiAgICBsZXQgY3VycmVudFByZWZpeCA9IFV0aWwudXJsSm9pbihiYXNlUm91dGUsIG1vZHVsZUl0ZW0ucm91dGUgfHwgJy8nKTtcbiAgICBsZXQgcm91dGVyID0gY3VycmVudFByZWZpeCA9PT0gJy8nID8gbmV3IFJvdXRlcigpIDogbmV3IFJvdXRlcih7cHJlZml4OiBjdXJyZW50UHJlZml4fSk7XG4gICAgXG5cbiAgICBpZiAobW9kdWxlSXRlbS5taWRkbGV3YXJlcykgeyAgICAgICAgICAgIFxuICAgICAgICAvL21vZHVsZS13aWRlIG1pZGRsZXdhcmVzICAgICAgIFxuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBtb2R1bGVJdGVtLm1pZGRsZXdhcmVzKTtcbiAgICB9IFxuXG4gICAgbGV0IGNvbnRyb2xsZXJGaWxlID0gcGF0aC5qb2luKGNvbnRyb2xsZXJQYXRoLCBtb2R1bGVJdGVtLmNvbnRyb2xsZXIgKyAnLmpzJyk7XG4gICAgbGV0IGNvbnRyb2xsZXI7XG5cbiAgICBjb250cm9sbGVyID0gcmVxdWlyZShjb250cm9sbGVyRmlsZSk7XG5cbiAgICBpZiAoY29udHJvbGxlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBDb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcihhcHApO1xuICAgIH1cbiAgICAgICAgICAgIFxuICAgIGZvciAobGV0IGFjdGlvbk5hbWUgaW4gY29udHJvbGxlcikgeyAgICAgICAgXG4gICAgICAgIGxldCBhY3Rpb24gPSBjb250cm9sbGVyW2FjdGlvbk5hbWVdOyAgICBcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuXG4gICAgICAgIGxldCBodHRwTWV0aG9kID0gXy5jYXN0QXJyYXkoYWN0aW9uLl9fbWV0YUh0dHBNZXRob2QgfHwgJ2dldCcpOyAgICAgICAgICAgIFxuICAgICAgICBsZXQgc3ViUm91dGUgPSBVdGlsLmVuc3VyZUxlZnRTbGFzaChhY3Rpb24uX19tZXRhUm91dGUgfHwgYWN0aW9uTmFtZSk7XG5cbiAgICAgICAgXy5lYWNoKGh0dHBNZXRob2QsIG1ldGhvZCA9PiB7XG4gICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBodHRwIG1ldGhvZDogJyArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZy4ke2Jhc2VSb3V0ZX0ubW9kdWxlcyAke21vZHVsZUl0ZW0uY29udHJvbGxlcn0uJHthY3Rpb25OYW1lfWApO1xuICAgICAgICAgICAgfSAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA/IFxuICAgICAgICAgICAgICAgIGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcy5jb25jYXQoW2FwcC53cmFwQWN0aW9uKGFjdGlvbildKSA6IFxuICAgICAgICAgICAgICAgIGFwcC53cmFwQWN0aW9uKGFjdGlvbikpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYXBwLmFkZFJvdXRlcihyb3V0ZXIpO1xufTsiXX0=