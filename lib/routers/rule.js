"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Router = require('koa-router');

const {
  InvalidConfiguration
} = require('../Errors');

const Literal = require('../enum/Literal');

function load_(app, baseRoute, options) {
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  _.forOwn(options.rules || {}, (methods, subRoute) => {
    let pos = subRoute.indexOf(':/');

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration('Invalid route rule syntax: ' + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = Util.ensureLeftSlash(subRoute);

    if (typeof methods === 'string' || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

;
module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3J1bGUuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkxpdGVyYWwiLCJsb2FkXyIsImFwcCIsImJhc2VSb3V0ZSIsIm9wdGlvbnMiLCJyb3V0ZXIiLCJwcmVmaXgiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiZm9yT3duIiwicnVsZXMiLCJtZXRob2RzIiwic3ViUm91dGUiLCJwb3MiLCJpbmRleE9mIiwiZW1iZWRkZWRNZXRob2QiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImVuc3VyZUxlZnRTbGFzaCIsIkFycmF5IiwiaXNBcnJheSIsImdldCIsIm1ldGhvZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJhZGRSb3V0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBQ0EsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBMkNBLFNBQVNPLEtBQVQsQ0FBZUMsR0FBZixFQUFvQkMsU0FBcEIsRUFBK0JDLE9BQS9CLEVBQXdDO0FBQ3BDLE1BQUlDLE1BQU0sR0FBR0YsU0FBUyxLQUFLLEdBQWQsR0FBb0IsSUFBSUwsTUFBSixFQUFwQixHQUFtQyxJQUFJQSxNQUFKLENBQVc7QUFBQ1EsSUFBQUEsTUFBTSxFQUFFSDtBQUFULEdBQVgsQ0FBaEQ7O0FBRUEsTUFBSUMsT0FBTyxDQUFDRyxXQUFaLEVBQXlCO0FBQ3JCTCxJQUFBQSxHQUFHLENBQUNNLGNBQUosQ0FBbUJILE1BQW5CLEVBQTJCRCxPQUFPLENBQUNHLFdBQW5DO0FBQ0g7O0FBRURYLEVBQUFBLENBQUMsQ0FBQ2EsTUFBRixDQUFTTCxPQUFPLENBQUNNLEtBQVIsSUFBaUIsRUFBMUIsRUFBOEIsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEtBQXVCO0FBQ2pELFFBQUlDLEdBQUcsR0FBR0QsUUFBUSxDQUFDRSxPQUFULENBQWlCLElBQWpCLENBQVY7O0FBRUEsUUFBSUQsR0FBRyxLQUFLLENBQUMsQ0FBYixFQUFnQjtBQUNaLFVBQUlBLEdBQUcsS0FBSyxDQUFaLEVBQWU7QUFDWCxjQUFNLElBQUlkLG9CQUFKLENBQ0YsZ0NBQWdDYSxRQUQ5QixFQUVGVixHQUZFLEVBR0QsV0FBVUMsU0FBVSxjQUhuQixDQUFOO0FBSUg7O0FBSUQsVUFBSVksY0FBYyxHQUFHSCxRQUFRLENBQUNJLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJILEdBQW5CLEVBQXdCSSxpQkFBeEIsRUFBckI7QUFDQUwsTUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNJLE1BQVQsQ0FBZ0JILEdBQUcsR0FBRyxDQUF0QixDQUFYO0FBRUFGLE1BQUFBLE9BQU8sR0FBRztBQUFDLFNBQUNJLGNBQUQsR0FBa0JKO0FBQW5CLE9BQVY7QUFDSDs7QUFFREMsSUFBQUEsUUFBUSxHQUFHakIsSUFBSSxDQUFDdUIsZUFBTCxDQUFxQk4sUUFBckIsQ0FBWDs7QUFFQSxRQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBbkIsSUFBK0JRLEtBQUssQ0FBQ0MsT0FBTixDQUFjVCxPQUFkLENBQW5DLEVBQTJEO0FBQ3ZEQSxNQUFBQSxPQUFPLEdBQUc7QUFBRVUsUUFBQUEsR0FBRyxFQUFFVjtBQUFQLE9BQVY7QUFDSDs7QUFFRGYsSUFBQUEsQ0FBQyxDQUFDYSxNQUFGLENBQVNFLE9BQVQsRUFBa0IsQ0FBQ0osV0FBRCxFQUFjZSxNQUFkLEtBQXlCO0FBQ3ZDLFVBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLG9CQUFSLENBQTZCQyxHQUE3QixDQUFpQ0YsTUFBakMsQ0FBTCxFQUErQztBQUMzQyxjQUFNLElBQUl2QixvQkFBSixDQUNGLDhCQUE4QnVCLE1BRDVCLEVBRUZwQixHQUZFLEVBR0QsV0FBVUMsU0FBVSxnQkFBZVMsUUFBUyxHQUgzQyxDQUFOO0FBSUg7O0FBRURWLE1BQUFBLEdBQUcsQ0FBQ3VCLFFBQUosQ0FBYXBCLE1BQWIsRUFBcUJpQixNQUFyQixFQUE2QlYsUUFBN0IsRUFBdUNMLFdBQXZDO0FBQ0gsS0FURDtBQVVILEdBbkNEOztBQXFDQUwsRUFBQUEsR0FBRyxDQUFDd0IsU0FBSixDQUFjckIsTUFBZDtBQUNIOztBQUFBO0FBRURzQixNQUFNLENBQUNDLE9BQVAsR0FBaUIzQixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuY29uc3QgUHJvbWlzZSA9IFV0aWwuUHJvbWlzZTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuXG4vKipcbiAqIFJ1bGUgYmFzZWQgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfUnVsZSBcbiAqL1xuXG4vKiogXG4gKiBDcmVhdGUgYSBydWxlLWJhc2VkIHJvdXRlci5cbiAqIEBwYXJhbSB7V2ViTW9kdWxlfSBhcHAgXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gKiBAZXhhbXBsZVxuICogJzxiYXNlIHBhdGg+Jzoge1xuICogICAgIHJ1bGU6IHtcbiAqICAgICAgICAgbWlkZGxld2FyZXM6XG4gKiAgICAgICAgIHJ1bGVzOiB7XG4gKiAgICAgICAgICAgICAvLyB0eXBlIDEsIGRlZmF1bHQgaXMgXCJnZXRcIiwgbWV0aG9kcyBtYXBwZWQgdG8gb25lIGFjdGlvblxuICogICAgICAgICAgICAgJzxzdWIgcm91dGU+JzogJzxjb250cm9sbGVyIHdpdGggcmVsYXRpdmUgcGF0aD4uPGFjdGlvbj4nLFxuICogXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDIsIGRpZmZlcmVudCBtZXRob2RzIG1hcHBlZCB0byBkaWZmZXJlbnQgbWV0aG9kXG4gKiAgICAgICAgICAgICAnPHN1YiByb3V0ZT4nOiB7XG4gKiAgICAgICAgICAgICAgICAnPG1ldGhvZD4nOiAnPGNvbnRyb2xsZXIgd2l0aCByZWxhdGl2ZSBwYXRoPi48YWN0aW9uPidcbiAqICAgICAgICAgICAgIH0sXG4gKiBcbiAqICAgICAgICAgICAgIC8vIHR5cGUgMywgd2l0aCBtaWRkbGV3YXJlXG4gKiAgICAgICAgICAgICAnPHN1YiByb3V0ZT4nOiB7XG4gKiAgICAgICAgICAgICAgICAgJzxtZXRob2Q+Jzoge1xuICogICAgICAgICAgICAgICAgICAgICc8bWlkZGxld2FyZSBuYW1lPic6IHsgLy9taWRkbGV3YXJlIG9wdGlvbnMgfVxuICogICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgIH0sXG4gKiBcbiAqICAgICAgICAgICAgIC8vIHR5cGUgNCwgYWxsIG1ldGhvZHMgbWFwcGVkIHRvIG9uZSBhY3Rpb25cbiAqICAgICAgICAgICAgICc8bWV0aG9kPjovPHN1YiByb3V0ZT4nOiAnPGNvbnRyb2xsZXIgd2l0aCByZWxhdGl2ZSBwYXRoPi48YWN0aW9uPidcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSA1LCBhbGwgbWV0aG9kcyBtYXBwZWQgdG8gb25lIGFjdGlvblxuICogICAgICAgICAgICAgJzxtZXRob2Q+Oi88c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICAnPG1pZGRsZXdhcmUgbmFtZT4nOiB7IC8vbWlkZGxld2FyZSBvcHRpb25zIH1cbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqIH1cbiAqL1xuZnVuY3Rpb24gbG9hZF8oYXBwLCBiYXNlUm91dGUsIG9wdGlvbnMpIHtcbiAgICBsZXQgcm91dGVyID0gYmFzZVJvdXRlID09PSAnLycgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHtwcmVmaXg6IGJhc2VSb3V0ZX0pO1xuXG4gICAgaWYgKG9wdGlvbnMubWlkZGxld2FyZXMpIHtcbiAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKHJvdXRlciwgb3B0aW9ucy5taWRkbGV3YXJlcyk7XG4gICAgfVxuXG4gICAgXy5mb3JPd24ob3B0aW9ucy5ydWxlcyB8fCB7fSwgKG1ldGhvZHMsIHN1YlJvdXRlKSA9PiB7XG4gICAgICAgIGxldCBwb3MgPSBzdWJSb3V0ZS5pbmRleE9mKCc6LycpO1xuXG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCByb3V0ZSBydWxlIHN5bnRheDogJyArIHN1YlJvdXRlLCBcbiAgICAgICAgICAgICAgICAgICAgYXBwLCBcbiAgICAgICAgICAgICAgICAgICAgYHJvdXRpbmdbJHtiYXNlUm91dGV9XS5ydWxlLnJ1bGVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxpa2UgZ2V0Oi8sIG9yIHBvc3Q6L1xuXG4gICAgICAgICAgICBsZXQgZW1iZWRkZWRNZXRob2QgPSBzdWJSb3V0ZS5zdWJzdHIoMCwgcG9zKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgc3ViUm91dGUgPSBzdWJSb3V0ZS5zdWJzdHIocG9zICsgMik7XG5cbiAgICAgICAgICAgIG1ldGhvZHMgPSB7W2VtYmVkZGVkTWV0aG9kXTogbWV0aG9kc307XG4gICAgICAgIH1cblxuICAgICAgICBzdWJSb3V0ZSA9IFV0aWwuZW5zdXJlTGVmdFNsYXNoKHN1YlJvdXRlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZHMgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkobWV0aG9kcykpIHtcbiAgICAgICAgICAgIG1ldGhvZHMgPSB7IGdldDogbWV0aG9kcyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgXy5mb3JPd24obWV0aG9kcywgKG1pZGRsZXdhcmVzLCBtZXRob2QpID0+IHtcbiAgICAgICAgICAgIGlmICghTGl0ZXJhbC5BTExPV0VEX0hUVFBfTUVUSE9EUy5oYXMobWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1Vuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiAnICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nWyR7YmFzZVJvdXRlfV0ucnVsZS5ydWxlc1ske3N1YlJvdXRlfV1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgbWV0aG9kLCBzdWJSb3V0ZSwgbWlkZGxld2FyZXMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFwcC5hZGRSb3V0ZXIocm91dGVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZF87Il19