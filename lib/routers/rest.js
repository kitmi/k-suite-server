"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Literal = require('../enum/Literal');

const Router = require('koa-router');

const Controller = require('../patterns/Controller');

const {
  InvalidConfiguration
} = require('../Errors');

const {
  hasMethod
} = require('../utils/Helpers');

module.exports = (app, baseRoute, options) => {
  let resourcePath = path.resolve(app.backendPath, options.resourcesPath || Literal.RESOURCES_PATH);
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });
  app.useMiddleware(router, app.getMiddlewareFactory('jsonError')(), 'jsonError');

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  let resourcesPath = path.join(resourcePath, "**", "*.js");
  let files = Util.glob.sync(resourcesPath, {
    nodir: true
  });

  _.each(files, file => {
    let relPath = path.relative(resourcePath, file);
    let batchUrl = Util.ensureLeftSlash(relPath.substring(0, relPath.length - 3).split(path.sep).map(p => _.kebabCase(p)).join('/'));
    let singleUrl = batchUrl + '/:id';

    let controller = require(file);

    let isObj = false;

    if (controller.prototype instanceof Controller) {
      controller = new controller(app);
      isObj = true;
    }

    if (hasMethod(controller, 'query')) {
      app.addRoute(router, 'get', batchUrl, isObj ? controller.query.bind(controller) : controller.query);
    }

    if (hasMethod(controller, 'create')) {
      app.addRoute(router, 'post', batchUrl, isObj ? controller.create.bind(controller) : controller.create);
    }

    if (hasMethod(controller, 'detail')) {
      app.addRoute(router, 'get', singleUrl, isObj ? controller.detail.bind(controller) : controller.detail);
    }

    if (hasMethod(controller, 'update')) {
      app.addRoute(router, 'put', singleUrl, isObj ? controller.update.bind(controller) : controller.update);
    }

    if (hasMethod(controller, 'remove')) {
      app.addRoute(router, 'del', singleUrl, isObj ? controller.remove.bind(controller) : controller.remove);
    }
  });

  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3Jlc3QuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJMaXRlcmFsIiwiUm91dGVyIiwiQ29udHJvbGxlciIsIkludmFsaWRDb25maWd1cmF0aW9uIiwiaGFzTWV0aG9kIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImJhc2VSb3V0ZSIsIm9wdGlvbnMiLCJyZXNvdXJjZVBhdGgiLCJyZXNvbHZlIiwiYmFja2VuZFBhdGgiLCJyZXNvdXJjZXNQYXRoIiwiUkVTT1VSQ0VTX1BBVEgiLCJyb3V0ZXIiLCJwcmVmaXgiLCJ1c2VNaWRkbGV3YXJlIiwiZ2V0TWlkZGxld2FyZUZhY3RvcnkiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiam9pbiIsImZpbGVzIiwiZ2xvYiIsInN5bmMiLCJub2RpciIsImVhY2giLCJmaWxlIiwicmVsUGF0aCIsInJlbGF0aXZlIiwiYmF0Y2hVcmwiLCJlbnN1cmVMZWZ0U2xhc2giLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJzcGxpdCIsInNlcCIsIm1hcCIsInAiLCJrZWJhYkNhc2UiLCJzaW5nbGVVcmwiLCJjb250cm9sbGVyIiwiaXNPYmoiLCJwcm90b3R5cGUiLCJhZGRSb3V0ZSIsInF1ZXJ5IiwiYmluZCIsImNyZWF0ZSIsImRldGFpbCIsInVwZGF0ZSIsInJlbW92ZSIsImFkZFJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTUUsQ0FBQyxHQUFHRCxJQUFJLENBQUNDLENBQWY7QUFDQSxNQUFNQyxPQUFPLEdBQUdGLElBQUksQ0FBQ0UsT0FBckI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHSixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUssTUFBTSxH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ZSgncGF0aCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuY29uc3QgUHJvbWlzZSA9IFV0aWwuUHJvbWlzZTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKTtcbmNvbnN0IENvbnRyb2xsZXIgPSByZXF1aXJlKCcuLi9wYXR0ZXJucy9Db250cm9sbGVyJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcbmNvbnN0IHsgaGFzTWV0aG9kIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5cbi8qKlxuICogUkVTVGZ1bCByb3V0ZXIuXG4gKiBAbW9kdWxlIFJvdXRlcl9SZXN0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBSRVNUZnVsIHJvdXRlci5cbiAqIEBwYXJhbSB7Kn0gYXBwIFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VSb3V0ZSBcbiAqIEBwYXJhbSB7b2JqZWN0c30gb3B0aW9ucyBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5yZXNvdXJjZXNQYXRoXVxuICogQHByb3BlcnR5IHtvYmplY3R8YXJyYXl9IFtvcHRpb25zLm1pZGRsZXdhcmVzXVxuICogQGV4YW1wbGVcbiAqICAnPGJhc2UgcGF0aD4nOiB7XG4gKiAgICAgIHJlc3Q6IHtcbiAqICAgICAgICAgIHJlc291cmNlc1BhdGg6XG4gKiAgICAgICAgICBtaWRkbGV3YXJlczpcbiAqICAgICAgfVxuICogIH1cbiAqICBcbiAqICByb3V0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cCBtZXRob2QgICAgZnVuY3Rpb24gb2YgY3RybFxuICogIC86cmVzb3VyY2UgICAgICAgICAgICAgICAgICAgICBnZXQgICAgICAgICAgICBxdWVyeVxuICogIC86cmVzb3VyY2UgICAgICAgICAgICAgICAgICAgICBwb3N0ICAgICAgICAgICBjcmVhdGVcbiAqICAvOnJlc291cmNlLzppZCAgICAgICAgICAgICAgICAgZ2V0ICAgICAgICAgICAgZGV0YWlsXG4gKiAgLzpyZXNvdXJjZS86aWQgICAgICAgICAgICAgICAgIHB1dCAgICAgICAgICAgIHVwZGF0ZVxuICogIC86cmVzb3VyY2UvOmlkICAgICAgICAgICAgICAgICBkZWxldGUgICAgICAgICByZW1vdmUgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGFwcCwgYmFzZVJvdXRlLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IHJlc291cmNlUGF0aCA9IHBhdGgucmVzb2x2ZShhcHAuYmFja2VuZFBhdGgsIG9wdGlvbnMucmVzb3VyY2VzUGF0aCB8fCBMaXRlcmFsLlJFU09VUkNFU19QQVRIKTtcbiAgICBcbiAgICBsZXQgcm91dGVyID0gYmFzZVJvdXRlID09PSAnLycgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHtwcmVmaXg6IGJhc2VSb3V0ZX0pO1xuXG4gICAgYXBwLnVzZU1pZGRsZXdhcmUocm91dGVyLCBhcHAuZ2V0TWlkZGxld2FyZUZhY3RvcnkoJ2pzb25FcnJvcicpKCksICdqc29uRXJyb3InKTtcblxuICAgIGlmIChvcHRpb25zLm1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG9wdGlvbnMubWlkZGxld2FyZXMpO1xuICAgIH1cblxuICAgIGxldCByZXNvdXJjZXNQYXRoID0gcGF0aC5qb2luKHJlc291cmNlUGF0aCwgXCIqKlwiLCBcIiouanNcIik7XG4gICAgbGV0IGZpbGVzID0gVXRpbC5nbG9iLnN5bmMocmVzb3VyY2VzUGF0aCwge25vZGlyOiB0cnVlfSk7XG5cbiAgICBfLmVhY2goZmlsZXMsIGZpbGUgPT4ge1xuICAgICAgICBsZXQgcmVsUGF0aCA9IHBhdGgucmVsYXRpdmUocmVzb3VyY2VQYXRoLCBmaWxlKTsgICAgICAgICAgXG4gICAgICAgIGxldCBiYXRjaFVybCA9IFV0aWwuZW5zdXJlTGVmdFNsYXNoKHJlbFBhdGguc3Vic3RyaW5nKDAsIHJlbFBhdGgubGVuZ3RoIC0gMykuc3BsaXQocGF0aC5zZXApLm1hcChwID0+IF8ua2ViYWJDYXNlKHApKS5qb2luKCcvJykpO1xuICAgICAgICBsZXQgc2luZ2xlVXJsID0gYmF0Y2hVcmwgKyAnLzppZCc7IFxuICAgICAgICBcbiAgICAgICAgbGV0IGNvbnRyb2xsZXIgPSByZXF1aXJlKGZpbGUpO1xuICAgICAgICBsZXQgaXNPYmogPSBmYWxzZTtcbiAgICBcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIucHJvdG90eXBlIGluc3RhbmNlb2YgQ29udHJvbGxlcikge1xuICAgICAgICAgICAgY29udHJvbGxlciA9IG5ldyBjb250cm9sbGVyKGFwcCk7XG4gICAgICAgICAgICBpc09iaiA9IHRydWU7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGlmIChoYXNNZXRob2QoY29udHJvbGxlciwgJ3F1ZXJ5JykpIHtcbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdnZXQnLCBiYXRjaFVybCwgaXNPYmogPyBjb250cm9sbGVyLnF1ZXJ5LmJpbmQoY29udHJvbGxlcikgOiBjb250cm9sbGVyLnF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNNZXRob2QoY29udHJvbGxlciwgJ2NyZWF0ZScpKSB7XG4gICAgICAgICAgICBhcHAuYWRkUm91dGUocm91dGVyLCAncG9zdCcsIGJhdGNoVXJsLCBpc09iaiA/IGNvbnRyb2xsZXIuY3JlYXRlLmJpbmQoY29udHJvbGxlcikgOiBjb250cm9sbGVyLmNyZWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzTWV0aG9kKGNvbnRyb2xsZXIsICdkZXRhaWwnKSkge1xuICAgICAgICAgICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgJ2dldCcsIHNpbmdsZVVybCwgaXNPYmogPyBjb250cm9sbGVyLmRldGFpbC5iaW5kKGNvbnRyb2xsZXIpIDogY29udHJvbGxlci5kZXRhaWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc01ldGhvZChjb250cm9sbGVyLCAndXBkYXRlJykpIHtcbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsICdwdXQnLCBzaW5nbGVVcmwsIGlzT2JqID8gY29udHJvbGxlci51cGRhdGUuYmluZChjb250cm9sbGVyKSA6IGNvbnRyb2xsZXIudXBkYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNNZXRob2QoY29udHJvbGxlciwgJ3JlbW92ZScpKSB7XG4gICAgICAgICAgICBhcHAuYWRkUm91dGUocm91dGVyLCAnZGVsJywgc2luZ2xlVXJsLCBpc09iaiA/IGNvbnRyb2xsZXIucmVtb3ZlLmJpbmQoY29udHJvbGxlcikgOiBjb250cm9sbGVyLnJlbW92ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFwcC5hZGRSb3V0ZXIocm91dGVyKTtcbn07Il19