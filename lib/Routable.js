"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  glob,
  urlJoin,
  ensureLeftSlash,
  urlAppendQuery
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const Errors = require('./utils/Errors');

const Literal = require('./enum/Literal');

const Koa = require('koa');

const Routable = T => class extends T {
  constructor(name, options) {
    super(name, options);
    this.clientPath = this.toAbsolutePath(this.options.clientPath || Literal.CLIENT_SRC_PATH);
    this.publicPath = this.toAbsolutePath(this.options.publicPath || Literal.PUBLIC_PATH);
    this.backendPath = this.toAbsolutePath(this.options.backendPath || Literal.BACKEND_PATH);
    this.router = new Koa();
    this.router.use((ctx, next) => {
      ctx.appModule = this;
      return next();
    });
    this.on('configLoaded', () => {
      let middlewareDir = path.join(this.backendPath, Literal.MIDDLEWARES_PATH);

      if (fs.existsSync(middlewareDir)) {
        this.loadMiddlewaresFrom(middlewareDir);
      }
    });
  }

  async start_() {
    this.middlewareFactoryRegistry = {};
    return super.start_();
  }

  async stop_() {
    delete this.middlewareFactoryRegistry;
    return super.stop_();
  }

  loadMiddlewaresFrom(dir) {
    let files = glob.sync(path.join(dir, '*.js'), {
      nodir: true
    });
    files.forEach(file => this.registerMiddlewareFactory(path.basename(file, '.js'), require(file)));
  }

  registerMiddlewareFactory(name, factoryMethod) {
    if (!(typeof factoryMethod === 'function')) {
      throw new Error('Invalid middleware factory: ' + name);
    }

    if (name in this.middlewareFactoryRegistry) {
      throw new Errors.ServerError('Middleware "' + name + '" already registered!');
    }

    this.middlewareFactoryRegistry[name] = factoryMethod;
    this.log('verbose', `Registered named middleware [${name}].`);
  }

  getMiddlewareFactory(name) {
    if (this.middlewareFactoryRegistry.hasOwnProperty(name)) {
      return this.middlewareFactoryRegistry[name];
    }

    if (this.server && this.server !== this) {
      return this.server.getMiddlewareFactory(name);
    }

    let npmMiddleware = tryRequire(name);

    if (npmMiddleware) {
      return npmMiddleware;
    }

    throw new Errors.ServerError(`Don't know where to load middleware "${name}".`);
  }

  useMiddlewares(router, middlewares) {
    let middlewareFactory, middleware;
    let middlewareFunctions = [];

    if (_.isPlainObject(middlewares)) {
      _.forOwn(middlewares, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        middleware = middlewareFactory(options, this);
        middlewareFunctions.push({
          name,
          middleware
        });
      });
    } else {
      middlewares = _.castArray(middlewares);

      _.each(middlewares, middlewareEntry => {
        let type = typeof middlewareEntry;

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(middlewareEntry);
          middleware = middlewareFactory(undefined, this);
          middlewareFunctions.push({
            name: middlewareEntry,
            middleware
          });
        } else if (type === 'function') {
          middlewareFunctions.push({
            name: middlewareEntry.name || 'unamed middleware',
            middleware: middlewareEntry
          });
        } else {
          if (!(_.isPlainObject(middlewareEntry) && 'name' in middlewareEntry)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);
          middleware = middlewareFactory(middlewareEntry.options, this);
          middlewareFunctions.push({
            name: middlewareEntry.name,
            middleware
          });
        }
      });
    }

    middlewareFunctions.forEach(({
      name,
      middleware
    }) => {
      if (Array.isArray(middleware)) {
        middleware.forEach(m => this.useMiddleware(router, m, name));
      } else {
        this.useMiddleware(router, middleware, name);
      }
    });
    return this;
  }

  addRoute(router, method, route, actions) {
    let handlers = [],
        middlewareFactory;

    if (_.isPlainObject(actions)) {
      _.forOwn(actions, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));
      });
    } else {
      actions = _.castArray(actions);
      let lastIndex = actions.length - 1;

      _.each(actions, (action, i) => {
        let type = typeof action;

        if (i === lastIndex) {
          if (type === 'string' && action.indexOf('.') > 0) {
            action = {
              name: 'action',
              options: action
            };
            type = 'object';
          }
        }

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(action);
          let middleware = middlewareFactory(null, this);

          if (Array.isArray(middleware)) {
            middleware.forEach((middlewareItem, i) => handlers.push(this._wrapMiddlewareTracer(middlewareItem, `${action}-${i}` + (middleware.name ? '-' + middleware.name : ''))));
          } else {
            handlers.push(this._wrapMiddlewareTracer(middleware, action));
          }
        } else if (type === 'function') {
          handlers.push(this._wrapMiddlewareTracer(action));
        } else if (Array.isArray(action)) {
          if (!(action.length > 0 && action.length <= 2)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action[0]);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.length > 1 ? action[1] : undefined, this)));
        } else {
          if (!(_.isPlainObject(action) && 'name' in action)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action.name);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));
        }
      });
    }

    router[method](route, ...handlers);
    let endpoint = router.opts.prefix ? urlJoin(this.route, router.opts.prefix, route) : urlJoin(this.route, route);
    this.log('verbose', `Route "${method}:${endpoint}" is added from module [${this.name}].`);
    return this;
  }

  addRouter(nestedRouter) {
    this.router.use(nestedRouter.routes());
    this.router.use(nestedRouter.allowedMethods());
    return this;
  }

  toWebPath(relativePath, ...pathOrQuery) {
    let url, query;

    if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {
      if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {
        query = pathOrQuery.pop();
      }

      pathOrQuery.unshift(relativePath);
      url = urlJoin(this.route, ...pathOrQuery);
    } else {
      url = urlJoin(this.route, relativePath);
    }

    url = ensureLeftSlash(url);

    if (query) {
      url = urlAppendQuery(url, query);
      url = url.replace('/?', '?');
    }

    return url;
  }

  wrapAction(action) {
    return async ctx => {
      ctx.toUrl = (relativePath, ...pathOrQuery) => {
        return ctx.origin + this.toWebPath(relativePath, ...pathOrQuery);
      };

      Object.assign(ctx.state, {
        _self: ctx.originalUrl || this.toWebPath(ctx.url),
        __: ctx.__,
        _makePath: (relativePath, query) => this.toWebPath(relativePath, query),
        _makeUrl: (relativePath, query) => ctx.toUrl(relativePath, query)
      });

      if (ctx.csrf) {
        ctx.state._csrf = ctx.csrf;
      }

      return action(ctx);
    };
  }

  useMiddleware(router, middleware, name) {
    if (!(typeof middleware === 'function')) {
      throw new Error(middleware);
    }

    router.use(this._wrapMiddlewareTracer(middleware, name));
    this.log('verbose', `Attached middleware [${name}].`);
  }

  _wrapMiddlewareTracer(middleware, name) {
    if (this.options.traceMiddlewares) {
      return (ctx, next) => {
        this.log('debug', `Calling "${name || middleware.name}" ...`);
        return middleware(ctx, next);
      };
    }

    return middleware;
  }

  _getFeatureFallbackPath() {
    return super._getFeatureFallbackPath().concat([path.join(this.backendPath, Literal.FEATURES_PATH)]);
  }

};

module.exports = Routable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Sb3V0YWJsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImdsb2IiLCJ1cmxKb2luIiwiZW5zdXJlTGVmdFNsYXNoIiwidXJsQXBwZW5kUXVlcnkiLCJ0cnlSZXF1aXJlIiwiRXJyb3JzIiwiTGl0ZXJhbCIsIktvYSIsIlJvdXRhYmxlIiwiVCIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm9wdGlvbnMiLCJjbGllbnRQYXRoIiwidG9BYnNvbHV0ZVBhdGgiLCJDTElFTlRfU1JDX1BBVEgiLCJwdWJsaWNQYXRoIiwiUFVCTElDX1BBVEgiLCJiYWNrZW5kUGF0aCIsIkJBQ0tFTkRfUEFUSCIsInJvdXRlciIsInVzZSIsImN0eCIsIm5leHQiLCJhcHBNb2R1bGUiLCJvbiIsIm1pZGRsZXdhcmVEaXIiLCJqb2luIiwiTUlERExFV0FSRVNfUEFUSCIsImV4aXN0c1N5bmMiLCJsb2FkTWlkZGxld2FyZXNGcm9tIiwic3RhcnRfIiwibWlkZGxld2FyZUZhY3RvcnlSZWdpc3RyeSIsInN0b3BfIiwiZGlyIiwiZmlsZXMiLCJzeW5jIiwibm9kaXIiLCJmb3JFYWNoIiwiZmlsZSIsInJlZ2lzdGVyTWlkZGxld2FyZUZhY3RvcnkiLCJiYXNlbmFtZSIsImZhY3RvcnlNZXRob2QiLCJTZXJ2ZXJFcnJvciIsImxvZyIsImdldE1pZGRsZXdhcmVGYWN0b3J5IiwiaGFzT3duUHJvcGVydHkiLCJzZXJ2ZXIiLCJucG1NaWRkbGV3YXJlIiwidXNlTWlkZGxld2FyZXMiLCJtaWRkbGV3YXJlcyIsIm1pZGRsZXdhcmVGYWN0b3J5IiwibWlkZGxld2FyZSIsIm1pZGRsZXdhcmVGdW5jdGlvbnMiLCJpc1BsYWluT2JqZWN0IiwiZm9yT3duIiwicHVzaCIsImNhc3RBcnJheSIsImVhY2giLCJtaWRkbGV3YXJlRW50cnkiLCJ0eXBlIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwibSIsInVzZU1pZGRsZXdhcmUiLCJhZGRSb3V0ZSIsIm1ldGhvZCIsInJvdXRlIiwiYWN0aW9ucyIsImhhbmRsZXJzIiwiX3dyYXBNaWRkbGV3YXJlVHJhY2VyIiwibGFzdEluZGV4IiwibGVuZ3RoIiwiYWN0aW9uIiwiaSIsImluZGV4T2YiLCJtaWRkbGV3YXJlSXRlbSIsImVuZHBvaW50Iiwib3B0cyIsInByZWZpeCIsImFkZFJvdXRlciIsIm5lc3RlZFJvdXRlciIsInJvdXRlcyIsImFsbG93ZWRNZXRob2RzIiwidG9XZWJQYXRoIiwicmVsYXRpdmVQYXRoIiwicGF0aE9yUXVlcnkiLCJ1cmwiLCJxdWVyeSIsImlzT2JqZWN0IiwicG9wIiwidW5zaGlmdCIsInJlcGxhY2UiLCJ3cmFwQWN0aW9uIiwidG9VcmwiLCJvcmlnaW4iLCJPYmplY3QiLCJhc3NpZ24iLCJzdGF0ZSIsIl9zZWxmIiwib3JpZ2luYWxVcmwiLCJfXyIsIl9tYWtlUGF0aCIsIl9tYWtlVXJsIiwiY3NyZiIsIl9jc3JmIiwidHJhY2VNaWRkbGV3YXJlcyIsIl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoIiwiY29uY2F0IiwiRkVBVFVSRVNfUEFUSCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsRUFBTDtBQUFTQyxFQUFBQSxJQUFUO0FBQWVDLEVBQUFBLE9BQWY7QUFBd0JDLEVBQUFBLGVBQXhCO0FBQXlDQyxFQUFBQTtBQUF6QyxJQUE0RE4sT0FBTyxDQUFDLFVBQUQsQ0FBekU7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQTtBQUFGLElBQWlCUCxPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBQ0EsTUFBTVEsTUFBTSxHQUFHUixPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBQ0EsTUFBTVMsT0FBTyxHQUFHVCxPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTVUsR0FBRyxHQUFHVixPQUFPLENBQUMsS0FBRCxDQUFu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QWtCSDs7QUFFRDJDLEVBQUFBLGFBQWEsQ0FBQzdDLE1BQUQsRUFBU2dDLFVBQVQsRUFBcUJ6QyxJQUFyQixFQUEyQjtBQUFBLFVBQzVCLE9BQU95QyxVQUFQLEtBQXNCLFVBRE07QUFBQSxzQkFDTUEsVUFETjtBQUFBOztBQUVwQ2hDLElBQUFBLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLEtBQUtrRCxxQkFBTCxDQUEyQm5CLFVBQTNCLEVBQXVDekMsSUFBdkMsQ0FBWDtBQUNBLFNBQUtpQyxHQUFMLENBQVMsU0FBVCxFQUFxQix3QkFBdUJqQyxJQUFLLElBQWpEO0FBQ0g7O0FBRUQ0RCxFQUFBQSxxQkFBcUIsQ0FBQ25CLFVBQUQsRUFBYXpDLElBQWIsRUFBbUI7QUFDcEMsUUFBSSxLQUFLQyxPQUFMLENBQWErRixnQkFBakIsRUFBbUM7QUFDL0IsYUFBTyxDQUFDckYsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDbEIsYUFBS3FCLEdBQUwsQ0FBUyxPQUFULEVBQW1CLFlBQVdqQyxJQUFJLElBQUl5QyxVQUFVLENBQUN6QyxJQUFLLE9BQXREO0FBQ0EsZUFBT3lDLFVBQVUsQ0FBQzlCLEdBQUQsRUFBTUMsSUFBTixDQUFqQjtBQUNILE9BSEQ7QUFJSDs7QUFFRCxXQUFPNkIsVUFBUDtBQUNIOztBQUVEd0QsRUFBQUEsdUJBQXVCLEdBQUc7QUFDdEIsV0FBTyxNQUFNQSx1QkFBTixHQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBRWpILElBQUksQ0FBQytCLElBQUwsQ0FBVSxLQUFLVCxXQUFmLEVBQTRCWixPQUFPLENBQUN3RyxhQUFwQyxDQUFGLENBQXZDLENBQVA7QUFDSDs7QUFsVWlDLENBQXRDOztBQXFVQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEcsUUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGdsb2IsIHVybEpvaW4sIGVuc3VyZUxlZnRTbGFzaCwgdXJsQXBwZW5kUXVlcnkgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcC9saWIvdXRpbHMvSGVscGVycycpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuL2VudW0vTGl0ZXJhbCcpO1xuY29uc3QgS29hID0gcmVxdWlyZSgna29hJyk7XG5cbmNvbnN0IFJvdXRhYmxlID0gVCA9PiBjbGFzcyBleHRlbmRzIFQgeyAgICBcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJvdXRhYmxlIGluc3RhbmNlLiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIFJvdXRhYmxlIG9wdGlvbnMgICAgICAgICAgICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuYmFja2VuZFBhdGg9J3NlcnZlciddIC0gUmVsYXRpdmUgcGF0aCBvZiBiYWNrLWVuZCBzZXJ2ZXIgc291cmNlIGZpbGVzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmNsaWVudFBhdGg9J2NsaWVudCddIC0gUmVsYXRpdmUgcGF0aCBvZiBmcm9udC1lbmQgY2xpZW50IHNvdXJjZSBmaWxlcyAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLnB1YmxpY1BhdGg9J3B1YmxpYyddIC0gUmVsYXRpdmUgcGF0aCBvZiBmcm9udC1lbmQgc3RhdGljIGZpbGVzIFxuICAgICAqLyAgICAgICAgIFxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgb3B0aW9ucyk7ICAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgICogRnJvbnRlbmQgc291cmNlIGZpbGVzIHBhdGguXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLmNsaWVudFBhdGggPSB0aGlzLnRvQWJzb2x1dGVQYXRoKHRoaXMub3B0aW9ucy5jbGllbnRQYXRoIHx8IExpdGVyYWwuQ0xJRU5UX1NSQ19QQVRIKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRnJvbnRlbmQgc3RhdGljIGZpbGVzIHBhdGguXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLnB1YmxpY1BhdGggPSB0aGlzLnRvQWJzb2x1dGVQYXRoKHRoaXMub3B0aW9ucy5wdWJsaWNQYXRoIHx8IExpdGVyYWwuUFVCTElDX1BBVEgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYWNrZW5kIGZpbGVzIHBhdGguXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gICAgICAgICBcbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLmJhY2tlbmRQYXRoID0gdGhpcy50b0Fic29sdXRlUGF0aCh0aGlzLm9wdGlvbnMuYmFja2VuZFBhdGggfHwgTGl0ZXJhbC5CQUNLRU5EX1BBVEgpOyBcblxuICAgICAgICAvKipcbiAgICAgICAgICogRWFjaCBhcHAgaGFzIGl0cyBvd24gcm91dGVyLlxuICAgICAgICAgKiBAbWVtYmVyIHtLb2F9XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgS29hKCk7XG5cbiAgICAgICAgLy9pbmplY3QgdGhlIGFwcE1vZHVsZSBpbnN0YW5jZSBpbiB0aGUgZmlyc3QgbWlkZGxld2FyZVxuICAgICAgICB0aGlzLnJvdXRlci51c2UoKGN0eCwgbmV4dCkgPT4geyBcbiAgICAgICAgICAgIGN0eC5hcHBNb2R1bGUgPSB0aGlzOyBcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7IFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uKCdjb25maWdMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvL2xvYWQgbWlkZGxld2FyZXMgaWYgZXhpc3RzIGluIHNlcnZlciBvciBhcHAgcGF0aFxuICAgICAgICAgICAgbGV0IG1pZGRsZXdhcmVEaXIgPSBwYXRoLmpvaW4odGhpcy5iYWNrZW5kUGF0aCwgTGl0ZXJhbC5NSURETEVXQVJFU19QQVRIKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMobWlkZGxld2FyZURpcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRNaWRkbGV3YXJlc0Zyb20obWlkZGxld2FyZURpcik7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgXG4gICAgfVxuXG4gICAgYXN5bmMgc3RhcnRfKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTWlkZGxld2FyZSBmYWN0b3J5IHJlZ2lzdHJ5LlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnkgPSB7fTtcblxuICAgICAgICByZXR1cm4gc3VwZXIuc3RhcnRfKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3RvcF8oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnN0b3BfKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCBhbmQgcmVnc2l0ZXIgbWlkZGxld2FyZSBmaWxlcyBmcm9tIGEgc3BlY2lmaWVkIHBhdGguXG4gICAgICogQHBhcmFtIGRpclxuICAgICAqL1xuICAgIGxvYWRNaWRkbGV3YXJlc0Zyb20oZGlyKSB7XG4gICAgICAgIGxldCBmaWxlcyA9IGdsb2Iuc3luYyhwYXRoLmpvaW4oZGlyLCAnKi5qcycpLCB7bm9kaXI6IHRydWV9KTtcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHRoaXMucmVnaXN0ZXJNaWRkbGV3YXJlRmFjdG9yeShwYXRoLmJhc2VuYW1lKGZpbGUsICcuanMnKSwgcmVxdWlyZShmaWxlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBmYWN0b3J5IG1ldGhvZCBvZiBhIG5hbWVkIG1pZGRsZXdhcmUuICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBtaWRkbGV3YXJlIFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZhY3RvcnlNZXRob2QgLSBUaGUgZmFjdG9yeSBtZXRob2Qgb2YgYSBtaWRkbGV3YXJlXG4gICAgICovXG4gICAgcmVnaXN0ZXJNaWRkbGV3YXJlRmFjdG9yeShuYW1lLCBmYWN0b3J5TWV0aG9kKSB7XG4gICAgICAgIHByZTogdHlwZW9mIGZhY3RvcnlNZXRob2QgPT09ICdmdW5jdGlvbicsICdJbnZhbGlkIG1pZGRsZXdhcmUgZmFjdG9yeTogJyArIG5hbWU7XG5cbiAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLlNlcnZlckVycm9yKCdNaWRkbGV3YXJlIFwiJysgbmFtZSArJ1wiIGFscmVhZHkgcmVnaXN0ZXJlZCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWlkZGxld2FyZUZhY3RvcnlSZWdpc3RyeVtuYW1lXSA9IGZhY3RvcnlNZXRob2Q7XG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYFJlZ2lzdGVyZWQgbmFtZWQgbWlkZGxld2FyZSBbJHtuYW1lfV0uYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmYWN0b3J5IG1ldGhvZCBvZiBhIG1pZGRsZXdhcmUgZnJvbSBtb2R1bGUgaGllcmFyY2h5LiAgICAgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgZ2V0TWlkZGxld2FyZUZhY3RvcnkobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5W25hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2VydmVyICYmIHRoaXMuc2VydmVyICE9PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXIuZ2V0TWlkZGxld2FyZUZhY3RvcnkobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbnBtTWlkZGxld2FyZSA9IHRyeVJlcXVpcmUobmFtZSk7XG4gICAgICAgIGlmIChucG1NaWRkbGV3YXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnBtTWlkZGxld2FyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcnMuU2VydmVyRXJyb3IoYERvbid0IGtub3cgd2hlcmUgdG8gbG9hZCBtaWRkbGV3YXJlIFwiJHtuYW1lfVwiLmApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZSBtaWRkbGV3YXJlc1xuICAgICAqIEBwYXJhbSB7Um91dGVyfSByb3V0ZXJcbiAgICAgKiBAcGFyYW0geyp9IG1pZGRsZXdhcmVzIC0gQ2FuIGJlIGFuIGFycmF5IG9mIG1pZGRsZXdhcmUgZW50cmllcyBvciBhIGtleS12YWx1ZSBsaXN0IG9mIHJlZ2lzdGVycmVkIG1pZGRsZXdhcmVzXG4gICAgICogQHJldHVybnMge1JvdXRhYmxlfVxuICAgICAqL1xuICAgIHVzZU1pZGRsZXdhcmVzKHJvdXRlciwgbWlkZGxld2FyZXMpIHtcbiAgICAgICAgbGV0IG1pZGRsZXdhcmVGYWN0b3J5LCBtaWRkbGV3YXJlO1xuICAgICAgICBsZXQgbWlkZGxld2FyZUZ1bmN0aW9ucyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChtaWRkbGV3YXJlcykpIHtcbiAgICAgICAgICAgIF8uZm9yT3duKG1pZGRsZXdhcmVzLCAob3B0aW9ucywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShuYW1lKTsgICBcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlID0gbWlkZGxld2FyZUZhY3Rvcnkob3B0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZUZ1bmN0aW9ucy5wdXNoKHsgbmFtZSwgbWlkZGxld2FyZSB9KTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1pZGRsZXdhcmVzID0gXy5jYXN0QXJyYXkobWlkZGxld2FyZXMpOyAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgICBfLmVhY2gobWlkZGxld2FyZXMsIG1pZGRsZXdhcmVFbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSB0eXBlb2YgbWlkZGxld2FyZUVudHJ5O1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFsgJ25hbWVkTWlkZGxld2FyZScgXVxuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkobWlkZGxld2FyZUVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVGYWN0b3J5KHVuZGVmaW5lZCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMucHVzaCh7IG5hbWU6IG1pZGRsZXdhcmVFbnRyeSAsIG1pZGRsZXdhcmUgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMucHVzaCh7IG5hbWU6IG1pZGRsZXdhcmVFbnRyeS5uYW1lIHx8ICd1bmFtZWQgbWlkZGxld2FyZScsIG1pZGRsZXdhcmU6IG1pZGRsZXdhcmVFbnRyeX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogXy5pc1BsYWluT2JqZWN0KG1pZGRsZXdhcmVFbnRyeSkgJiYgJ25hbWUnIGluIG1pZGRsZXdhcmVFbnRyeSwgJ0ludmFsaWQgbWlkZGxld2FyZSBlbnRyeSc7XG5cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVFbnRyeS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVFbnRyeS5vcHRpb25zLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZ1bmN0aW9ucy5wdXNoKHsgbmFtZTogbWlkZGxld2FyZUVudHJ5Lm5hbWUsIG1pZGRsZXdhcmUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLmZvckVhY2goKHsgbmFtZSwgbWlkZGxld2FyZSB9KSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtaWRkbGV3YXJlKSkge1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUuZm9yRWFjaChtID0+IHRoaXMudXNlTWlkZGxld2FyZShyb3V0ZXIsIG0sIG5hbWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VNaWRkbGV3YXJlKHJvdXRlciwgbWlkZGxld2FyZSwgbmFtZSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcm91dGUgdG8gYSByb3V0ZXIsIHNraXBwZWQgd2hpbGUgdGhlIHNlcnZlciBydW5uaW5nIGluIGRlYWYgbW9kZS4gICAgIFxuICAgICAqIEBwYXJhbSByb3V0ZXJcbiAgICAgKiBAcGFyYW0gbWV0aG9kXG4gICAgICogQHBhcmFtIHJvdXRlXG4gICAgICogQHBhcmFtIGFjdGlvbnNcbiAgICAgKi9cbiAgICBhZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgcm91dGUsIGFjdGlvbnMpIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gW10sIG1pZGRsZXdhcmVGYWN0b3J5O1xuXG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoYWN0aW9ucykpIHtcbiAgICAgICAgICAgIF8uZm9yT3duKGFjdGlvbnMsIChvcHRpb25zLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KG5hbWUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZUZhY3Rvcnkob3B0aW9ucywgdGhpcyksIG5hbWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aW9ucyA9IF8uY2FzdEFycmF5KGFjdGlvbnMpO1xuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IGFjdGlvbnMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgXy5lYWNoKGFjdGlvbnMsIChhY3Rpb24sIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHR5cGVvZiBhY3Rpb247XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxhc3QgbWlkZGxld2FyZSBtYXkgYmUgYW4gYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiBhY3Rpb24uaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdvYmplY3QnO1xuICAgICAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBbICduYW1lZE1pZGRsZXdhcmUnIF1cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KGFjdGlvbik7ICAgXG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeShudWxsLCB0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2luIGNhc2UgaXQncyByZWdpc3RlciBieSB0aGUgbWlkZGxld2FyZUZhY3RvcnkgZmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtaWRkbGV3YXJlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZS5mb3JFYWNoKChtaWRkbGV3YXJlSXRlbSwgaSkgPT4gaGFuZGxlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlSXRlbSwgYCR7YWN0aW9ufS0ke2l9YCArIChtaWRkbGV3YXJlLm5hbWUgPyAoJy0nICsgbWlkZGxld2FyZS5uYW1lKSA6ICcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKHRoaXMuX3dyYXBNaWRkbGV3YXJlVHJhY2VyKG1pZGRsZXdhcmUsIGFjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIoYWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBhY3Rpb24ubGVuZ3RoID4gMCAmJiBhY3Rpb24ubGVuZ3RoIDw9IDIsICdJbnZhbGlkIG1pZGRsZXdhcmUgZW50cnknO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShhY3Rpb25bMF0pOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZUZhY3RvcnkoYWN0aW9uLmxlbmd0aCA+IDEgPyBhY3Rpb25bMV0gOiB1bmRlZmluZWQsIHRoaXMpKSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IF8uaXNQbGFpbk9iamVjdChhY3Rpb24pICYmICduYW1lJyBpbiBhY3Rpb24sICdJbnZhbGlkIG1pZGRsZXdhcmUgZW50cnknO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShhY3Rpb24ubmFtZSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlRmFjdG9yeShhY3Rpb24ub3B0aW9ucywgdGhpcyksIGFjdGlvbi5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdXRlclttZXRob2RdKHJvdXRlLCAuLi5oYW5kbGVycyk7XG5cbiAgICAgICAgbGV0IGVuZHBvaW50ID0gcm91dGVyLm9wdHMucHJlZml4ID8gdXJsSm9pbih0aGlzLnJvdXRlLCByb3V0ZXIub3B0cy5wcmVmaXgsIHJvdXRlKSA6IHVybEpvaW4odGhpcy5yb3V0ZSwgcm91dGUpO1xuXG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYFJvdXRlIFwiJHttZXRob2R9OiR7ZW5kcG9pbnR9XCIgaXMgYWRkZWQgZnJvbSBtb2R1bGUgWyR7dGhpcy5uYW1lfV0uYCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIHJvdXRlciB0byB0aGlzIGFwcCBtb2R1bGUsIHNraXBwZWQgd2hpbGUgdGhlIHNlcnZlciBydW5uaW5nIGluIGRlYWYgbW9kZSAgICAgXG4gICAgICogQHBhcmFtIHtSb3V0ZXJ9IG5lc3RlZFJvdXRlclxuICAgICAqL1xuICAgIGFkZFJvdXRlcihuZXN0ZWRSb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIudXNlKG5lc3RlZFJvdXRlci5yb3V0ZXMoKSk7XG4gICAgICAgIHRoaXMucm91dGVyLnVzZShuZXN0ZWRSb3V0ZXIuYWxsb3dlZE1ldGhvZHMoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZSBhIHJlbGF0aXZlIHBhdGggYW5kIHF1ZXJ5IHBhcmFtZXRlcnMgaWYgYW55IHRvIGEgdXJsIHBhdGggICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVBhdGggLSBSZWxhdGl2ZSBwYXRoXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGF0aE9yUXVlcnldIC0gUXVlcmllc1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgdG9XZWJQYXRoKHJlbGF0aXZlUGF0aCwgLi4ucGF0aE9yUXVlcnkpIHtcbiAgICAgICAgbGV0IHVybCwgcXVlcnk7XG5cbiAgICAgICAgaWYgKHBhdGhPclF1ZXJ5ICYmIHBhdGhPclF1ZXJ5Lmxlbmd0aCA+IDAgJiYgKHBhdGhPclF1ZXJ5Lmxlbmd0aCA+IDEgfHwgcGF0aE9yUXVlcnlbMF0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KHBhdGhPclF1ZXJ5W3BhdGhPclF1ZXJ5Lmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcGF0aE9yUXVlcnkucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXRoT3JRdWVyeS51bnNoaWZ0KHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICB1cmwgPSB1cmxKb2luKHRoaXMucm91dGUsIC4uLnBhdGhPclF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCA9IHVybEpvaW4odGhpcy5yb3V0ZSwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGVuc3VyZUxlZnRTbGFzaCh1cmwpO1xuXG4gICAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICAgICAgdXJsID0gdXJsQXBwZW5kUXVlcnkodXJsLCBxdWVyeSk7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnLz8nLCAnPycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBjb250ZXh0IGZvciBrb2EgYWN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGN0eCAtIEtvYSByZXF1ZXN0IGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBhY3Rpb24gLSBBY3Rpb24gZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB3cmFwQWN0aW9uKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY3R4LnRvVXJsID0gKHJlbGF0aXZlUGF0aCwgLi4ucGF0aE9yUXVlcnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4Lm9yaWdpbiArIHRoaXMudG9XZWJQYXRoKHJlbGF0aXZlUGF0aCwgLi4ucGF0aE9yUXVlcnkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjdHguc3RhdGUsIHtcbiAgICAgICAgICAgICAgICBfc2VsZjogY3R4Lm9yaWdpbmFsVXJsIHx8IHRoaXMudG9XZWJQYXRoKGN0eC51cmwpLFxuICAgICAgICAgICAgICAgIF9fOiBjdHguX18sXG4gICAgICAgICAgICAgICAgX21ha2VQYXRoOiAocmVsYXRpdmVQYXRoLCBxdWVyeSkgPT4gdGhpcy50b1dlYlBhdGgocmVsYXRpdmVQYXRoLCBxdWVyeSksXG4gICAgICAgICAgICAgICAgX21ha2VVcmw6IChyZWxhdGl2ZVBhdGgsIHF1ZXJ5KSA9PiBjdHgudG9VcmwocmVsYXRpdmVQYXRoLCBxdWVyeSkgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY3R4LmNzcmYpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdHguc3RhdGUuX2NzcmYgPSBjdHguY3NyZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbihjdHgpO1xuICAgICAgICB9OyAgICAgICAgXG4gICAgfSAgIFxuXG4gICAgdXNlTWlkZGxld2FyZShyb3V0ZXIsIG1pZGRsZXdhcmUsIG5hbWUpIHsgICAgICAgICAgXG4gICAgICAgIGFzc2VydDogdHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicsIG1pZGRsZXdhcmU7XG4gICAgICAgIHJvdXRlci51c2UodGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkpO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBBdHRhY2hlZCBtaWRkbGV3YXJlIFske25hbWV9XS5gKTtcbiAgICB9XG5cbiAgICBfd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkgeyAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2VNaWRkbGV3YXJlcykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZygnZGVidWcnLCBgQ2FsbGluZyBcIiR7bmFtZSB8fCBtaWRkbGV3YXJlLm5hbWV9XCIgLi4uYCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBtaWRkbGV3YXJlKGN0eCwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWlkZGxld2FyZTtcbiAgICB9XG5cbiAgICBfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkuY29uY2F0KFsgcGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIExpdGVyYWwuRkVBVFVSRVNfUEFUSCkgXSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0YWJsZTsiXX0=