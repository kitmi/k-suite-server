#!/usr/bin/env node
"use strict";

require("source-map-support/register");

const CliApp = require('@k-suite/app');

const KsCore = require('./KsCore');

const pkg = require('../../package.json');

let cliApp = new CliApp('oolong', {
  logger: {
    "transports": [{
      "type": "console",
      "options": {
        "level": "debug"
      }
    }]
  },
  loadConfigFromOptions: true,
  config: {
    "version": pkg.version,
    "commandLineOptions": {
      "banner": `Kickstart server command line helper v${pkg.version}`,
      "program": "ks-server",
      "arguments": [{
        "name": "command",
        "default": 'main'
      }],
      "options": {
        "e": {
          "desc": "Target environment",
          "alias": ["env", "environment"],
          "default": "development"
        },
        "s": {
          "desc": "Silent mode",
          "alias": ["silent"],
          "isBool": true,
          "default": false
        },
        "v": {
          "desc": "Show version number",
          "alias": ["version"],
          "isBool": true,
          "default": false
        },
        "?": {
          "desc": "Show usage message",
          "alias": ["help"],
          "isBool": true,
          "default": false
        }
      }
    }
  }
});
cliApp.start_().then(async () => {
  let core = new KsCore(cliApp);

  if (await core.initialize_()) {
    await core.execute_();
    return cliApp.stop_();
  }

  core.showUsage();
  await cliApp.stop_();
}).catch(error => {
  console.error(error);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkva3Mtc2VydmVyLmpzIl0sIm5hbWVzIjpbIkNsaUFwcCIsInJlcXVpcmUiLCJLc0NvcmUiLCJwa2ciLCJjbGlBcHAiLCJsb2dnZXIiLCJsb2FkQ29uZmlnRnJvbU9wdGlvbnMiLCJjb25maWciLCJ2ZXJzaW9uIiwic3RhcnRfIiwidGhlbiIsImNvcmUiLCJpbml0aWFsaXplXyIsImV4ZWN1dGVfIiwic3RvcF8iLCJzaG93VXNhZ2UiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsInByb2Nlc3MiLCJleGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXRCOztBQUNBLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUEsSUFBSUcsTUFBTSxHQUFHLElBQUlKLE1BQUosQ0FBVyxRQUFYLEVBQXFCO0FBQzlCSyxFQUFBQSxNQUFNLEVBQUU7QUFDSixrQkFBYyxDQUNWO0FBQ0ksY0FBUSxTQURaO0FBRUksaUJBQVc7QUFDUCxpQkFBUztBQURGO0FBRmYsS0FEVTtBQURWLEdBRHNCO0FBVzlCQyxFQUFBQSxxQkFBcUIsRUFBRSxJQVhPO0FBWTlCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSixlQUFXSixHQUFHLENBQUNLLE9BRFg7QUFFSiwwQkFBc0I7QUFDbEIsZ0JBQVcseUNBQXdDTCxHQUFHLENBQUNLLE9BQVEsRUFEN0M7QUFFbEIsaUJBQVcsV0FGTztBQUdsQixtQkFBYSxDQUNUO0FBQUUsZ0JBQVEsU0FBVjtBQUFxQixtQkFBVztBQUFoQyxPQURTLENBSEs7QUFNbEIsaUJBQVc7QUFDUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLEtBQUYsRUFBUyxhQUFULENBRlI7QUFHRCxxQkFBVztBQUhWLFNBREU7QUFNUCxhQUFLO0FBQ0Qsa0JBQVEsYUFEUDtBQUVELG1CQUFTLENBQUUsUUFBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FORTtBQVlQLGFBQUs7QUFDRCxrQkFBUSxxQkFEUDtBQUVELG1CQUFTLENBQUUsU0FBRixDQUZSO0FBR0Qsb0JBQVUsSUFIVDtBQUlELHFCQUFXO0FBSlYsU0FaRTtBQWtCUCxhQUFLO0FBQ0Qsa0JBQVEsb0JBRFA7QUFFRCxtQkFBUyxDQUFFLE1BQUYsQ0FGUjtBQUdELG9CQUFVLElBSFQ7QUFJRCxxQkFBVztBQUpWO0FBbEJFO0FBTk87QUFGbEI7QUFac0IsQ0FBckIsQ0FBYjtBQWlEQUosTUFBTSxDQUFDSyxNQUFQLEdBQWdCQyxJQUFoQixDQUFxQixZQUFZO0FBQzdCLE1BQUlDLElBQUksR0FBRyxJQUFJVCxNQUFKLENBQVdFLE1BQVgsQ0FBWDs7QUFFQSxNQUFJLE1BQU1PLElBQUksQ0FBQ0MsV0FBTCxFQUFWLEVBQThCO0FBQzFCLFVBQU1ELElBQUksQ0FBQ0UsUUFBTCxFQUFOO0FBQ0EsV0FBT1QsTUFBTSxDQUFDVSxLQUFQLEVBQVA7QUFDSDs7QUFFREgsRUFBQUEsSUFBSSxDQUFDSSxTQUFMO0FBRUEsUUFBTVgsTUFBTSxDQUFDVSxLQUFQLEVBQU47QUFDSCxDQVhELEVBV0dFLEtBWEgsQ0FXU0MsS0FBSyxJQUFJO0FBQ2RDLEVBQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkO0FBQ0FFLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDSCxDQWREIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5jb25zdCBDbGlBcHAgPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAnKTtcbmNvbnN0IEtzQ29yZSA9IHJlcXVpcmUoJy4vS3NDb3JlJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcblxubGV0IGNsaUFwcCA9IG5ldyBDbGlBcHAoJ29vbG9uZycsIHsgXG4gICAgbG9nZ2VyOiB7ICAgICAgICBcbiAgICAgICAgXCJ0cmFuc3BvcnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogXCJkZWJ1Z1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICBsb2FkQ29uZmlnRnJvbU9wdGlvbnM6IHRydWUsXG4gICAgY29uZmlnOiB7XG4gICAgICAgIFwidmVyc2lvblwiOiBwa2cudmVyc2lvbixcbiAgICAgICAgXCJjb21tYW5kTGluZU9wdGlvbnNcIjoge1xuICAgICAgICAgICAgXCJiYW5uZXJcIjogYEtpY2tzdGFydCBzZXJ2ZXIgY29tbWFuZCBsaW5lIGhlbHBlciB2JHtwa2cudmVyc2lvbn1gLFxuICAgICAgICAgICAgXCJwcm9ncmFtXCI6IFwia3Mtc2VydmVyXCIsXG4gICAgICAgICAgICBcImFyZ3VtZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgeyBcIm5hbWVcIjogXCJjb21tYW5kXCIsIFwiZGVmYXVsdFwiOiAnbWFpbicgfVxuICAgICAgICAgICAgXSwgIFxuICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCJlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiVGFyZ2V0IGVudmlyb25tZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcImVudlwiLCBcImVudmlyb25tZW50XCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiZGV2ZWxvcG1lbnRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjXCI6IFwiU2lsZW50IG1vZGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwic2lsZW50XCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpc0Jvb2xcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSwgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcInZcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaG93IHZlcnNpb24gbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcInZlcnNpb25cIiBdLFxuICAgICAgICAgICAgICAgICAgICBcImlzQm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiP1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiOiBcIlNob3cgdXNhZ2UgbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IFsgXCJoZWxwXCIgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpc0Jvb2xcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNsaUFwcC5zdGFydF8oKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICBsZXQgY29yZSA9IG5ldyBLc0NvcmUoY2xpQXBwKTtcblxuICAgIGlmIChhd2FpdCBjb3JlLmluaXRpYWxpemVfKCkpIHtcbiAgICAgICAgYXdhaXQgY29yZS5leGVjdXRlXygpOyAgICAgICAgXG4gICAgICAgIHJldHVybiBjbGlBcHAuc3RvcF8oKTtcbiAgICB9ICAgIFxuXG4gICAgY29yZS5zaG93VXNhZ2UoKTtcbiAgICBcbiAgICBhd2FpdCBjbGlBcHAuc3RvcF8oKTtcbn0pLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTsiXX0=