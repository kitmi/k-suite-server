"use strict";

require("source-map-support/register");

const Literal = require('@k-suite/app/lib/enum/Literal');

module.exports = Object.assign({}, Literal, {
  APP_MODULES_PATH: 'app_modules',
  BACKEND_PATH: 'server',
  BACKEND_SRC_PATH: 'src',
  CLIENT_SRC_PATH: 'client',
  PUBLIC_PATH: 'public',
  MIDDLEWARES_PATH: 'middlewares',
  SERVER_CFG_NAME: 'server',
  SERVER_FEATURES_PATH: 'serverFeatures',
  APP_FEATURES_PATH: 'appFeatures',
  CONTROLLERS_PATH: 'controllers',
  RESOURCES_PATH: 'resources',
  REMOTE_CALLS_PATH: 'remoteCalls',
  VIEWS_PATH: 'views',
  MODELS_PATH: 'models',
  DB_SCRIPTS_PATH: 'db',
  LOCALE_PATH: 'locale',
  ALLOWED_HTTP_METHODS: new Set(['options', 'get', 'head', 'post', 'put', 'delete', 'trace', 'connect'])
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnVtL0xpdGVyYWwuanMiXSwibmFtZXMiOlsiTGl0ZXJhbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIiwiQVBQX01PRFVMRVNfUEFUSCIsIkJBQ0tFTkRfUEFUSCIsIkJBQ0tFTkRfU1JDX1BBVEgiLCJDTElFTlRfU1JDX1BBVEgiLCJQVUJMSUNfUEFUSCIsIk1JRERMRVdBUkVTX1BBVEgiLCJTRVJWRVJfQ0ZHX05BTUUiLCJTRVJWRVJfRkVBVFVSRVNfUEFUSCIsIkFQUF9GRUFUVVJFU19QQVRIIiwiQ09OVFJPTExFUlNfUEFUSCIsIlJFU09VUkNFU19QQVRIIiwiUkVNT1RFX0NBTExTX1BBVEgiLCJWSUVXU19QQVRIIiwiTU9ERUxTX1BBVEgiLCJEQl9TQ1JJUFRTX1BBVEgiLCJMT0NBTEVfUEFUSCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiU2V0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLCtCQUFELENBQXZCOztBQWdCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxPQUFsQixFQUEyQjtBQUl4Q00sRUFBQUEsZ0JBQWdCLEVBQUUsYUFKc0I7QUFTeENDLEVBQUFBLFlBQVksRUFBRSxRQVQwQjtBQWN4Q0MsRUFBQUEsZ0JBQWdCLEVBQUUsS0Fkc0I7QUFtQnhDQyxFQUFBQSxlQUFlLEVBQUUsUUFuQnVCO0FBd0J4Q0MsRUFBQUEsV0FBVyxFQUFFLFFBeEIyQjtBQTZCeENDLEVBQUFBLGdCQUFnQixFQUFFLGFBN0JzQjtBQWtDeENDLEVBQUFBLGVBQWUsRUFBRSxRQWxDdUI7QUF1Q3hDQyxFQUFBQSxvQkFBb0IsRUFBRSxnQkF2Q2tCO0FBNEN4Q0MsRUFBQUEsaUJBQWlCLEVBQUUsYUE1Q3FCO0FBaUR4Q0MsRUFBQUEsZ0JBQWdCLEVBQUUsYUFqRHNCO0FBc0R4Q0MsRUFBQUEsY0FBYyxFQUFFLFdBdER3QjtBQTJEeENDLEVBQUFBLGlCQUFpQixFQUFFLGFBM0RxQjtBQWdFeENDLEVBQUFBLFVBQVUsRUFBRSxPQWhFNEI7QUFxRXhDQyxFQUFBQSxXQUFXLEVBQUUsUUFyRTJCO0FBMEV4Q0MsRUFBQUEsZUFBZSxFQUFFLElBMUV1QjtBQStFeENDLEVBQUFBLFdBQVcsRUFBRSxRQS9FMkI7QUFvRnhDQyxFQUFBQSxvQkFBb0IsRUFBRSxJQUFJQyxHQUFKLENBQVEsQ0FBQyxTQUFELEVBQVksS0FBWixFQUFtQixNQUFuQixFQUEyQixNQUEzQixFQUFtQyxLQUFuQyxFQUEwQyxRQUExQyxFQUFvRCxPQUFwRCxFQUE2RCxTQUE3RCxDQUFSO0FBcEZrQixDQUEzQixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi9lbnVtL0xpdGVyYWwnKTtcblxuLyoqXG4gKiBDb21tb24gY29uc3RhbnRzXG4gKiBAbW9kdWxlIExpdGVyYWxcbiAqIFxuICogQGV4YW1wbGVcbiAqICAgY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJ0BrLXN1aXRlL3NlcnZlci9saWIvZW51bS9MaXRlcmFsJyk7XG4gKi9cblxuLyoqXG4gKiBDb21tb24gY29uc3RhbnQgZGVmaW5pdGlvbnMuXG4gKiBAcmVhZG9ubHlcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHt9LCBMaXRlcmFsLCB7XG4gICAgLyoqXG4gICAgICogQXBwIG1vZHVsZXMgcGF0aFxuICAgICAqL1xuICAgIEFQUF9NT0RVTEVTX1BBVEg6ICdhcHBfbW9kdWxlcycsICAgIFxuXG4gICAgLyoqXG4gICAgICogQmFja2VuZCBmaWxlcyBwYXRoXG4gICAgICovXG4gICAgQkFDS0VORF9QQVRIOiAnc2VydmVyJyxcblxuICAgIC8qKlxuICAgICAqIEJhY2tlbmQgc291cmNlcyBwYXRoXG4gICAgICovXG4gICAgQkFDS0VORF9TUkNfUEFUSDogJ3NyYycsXG5cbiAgICAvKipcbiAgICAgKiBGcm9udGVuZCBzb3VyY2UgZmlsZXMgcGF0aCwgZS5nLiByZWFjdCBzb3VyY2VcbiAgICAgKi9cbiAgICBDTElFTlRfU1JDX1BBVEg6ICdjbGllbnQnLFxuXG4gICAgLyoqXG4gICAgICogRnJvbnRlbmQgc3RhdGljIGZpbGVzIHBhdGgsIGUuZy4gaW1hZ2VzLCBjc3MsIGpzXG4gICAgICovXG4gICAgUFVCTElDX1BBVEg6ICdwdWJsaWMnLFxuXG4gICAgLyoqXG4gICAgICogTWlkZGxld2FyZSBmaWxlcyBwYXRoXG4gICAgICovXG4gICAgTUlERExFV0FSRVNfUEFUSDogJ21pZGRsZXdhcmVzJywgICAgXG5cbiAgICAvKipcbiAgICAgKiBTZXJ2ZXItd2lkZSBjb25maWcgZmlsZSBuYW1lXG4gICAgICovXG4gICAgU0VSVkVSX0NGR19OQU1FOiAnc2VydmVyJywgICAgXG5cbiAgICAvKipcbiAgICAgKiBTZXJ2ZXIgZmVhdHVyZXMgcGF0aFxuICAgICAqL1xuICAgIFNFUlZFUl9GRUFUVVJFU19QQVRIOiAnc2VydmVyRmVhdHVyZXMnLFxuXG4gICAgLyoqXG4gICAgICogQXBwIHNwZWNpZmljIGZlYXR1cmVzIHBhdGhcbiAgICAgKi9cbiAgICBBUFBfRkVBVFVSRVNfUEFUSDogJ2FwcEZlYXR1cmVzJyxcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xsZXJzIGZpbGVzIHBhdGgsIHVuZGVyIGJhY2tlbmQgZm9sZGVyXG4gICAgICovXG4gICAgQ09OVFJPTExFUlNfUEFUSDogJ2NvbnRyb2xsZXJzJyxcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xsZXJzIGZpbGVzIHBhdGgsIHVuZGVyIGJhY2tlbmQgZm9sZGVyXG4gICAgICovXG4gICAgUkVTT1VSQ0VTX1BBVEg6ICdyZXNvdXJjZXMnLFxuXG4gICAgLyoqXG4gICAgICogUmVtb3RlIGNhbGxzIGNvbnRyb2xsZXJzIHBhdGhcbiAgICAgKi9cbiAgICBSRU1PVEVfQ0FMTFNfUEFUSDogJ3JlbW90ZUNhbGxzJyxcblxuICAgIC8qKlxuICAgICAqIFZpZXdzIGZpbGVzIHBhdGgsIHVuZGVyIGJhY2tlbmQgZm9sZGVyXG4gICAgICovXG4gICAgVklFV1NfUEFUSDogJ3ZpZXdzJyxcblxuICAgIC8qKlxuICAgICAqIE1vZGVscyBmaWxlcyBwYXRoLCB1bmRlciBiYWNrZW5kIGZvbGRlclxuICAgICAqL1xuICAgIE1PREVMU19QQVRIOiAnbW9kZWxzJyxcblxuICAgIC8qKlxuICAgICAqIERhdGFiYXNlIHNjcmlwdHMgcGF0aFxuICAgICAqL1xuICAgIERCX1NDUklQVFNfUEFUSDogJ2RiJyxcblxuICAgIC8qKlxuICAgICAqIExvY2FsZSBkaWN0aW9uYXJ5IGZpbGVzIHBhdGhcbiAgICAgKi9cbiAgICBMT0NBTEVfUEFUSDogJ2xvY2FsZScsXG5cbiAgICAvKipcbiAgICAgKiBBbGxvd2VkIGh0dHAgbWV0aG9kc1xuICAgICAqL1xuICAgIEFMTE9XRURfSFRUUF9NRVRIT0RTOiBuZXcgU2V0KFsnb3B0aW9ucycsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdkZWxldGUnLCAndHJhY2UnLCAnY29ubmVjdCddKVxufSk7Il19