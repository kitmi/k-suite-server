"use strict";

require("source-map-support/register");

const Feature = require('@k-suite/app/lib/enum/Feature');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const validator = require('validator');

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (server, options) {
    let koa = server.router;
    server.koa = koa;
    koa.env = server.env;
    koa.proxy = options.trustProxy && validator.toBoolean(options.trustProxy);

    if ('subdomainOffset' in options && options.subdomainOffset !== 2) {
      if (options.subdomainOffset < 2) {
        throw new InvalidConfiguration('Invalid subdomainOffset. Should be larger or equal to 2.', appModule, 'koa.subdomainOffset');
      }

      koa.subdomainOffset = options.subdomainOffset;
    }

    if (options.keys) {
      if (!_.isArray(options.keys)) {
        koa.keys = [options.keys];
      } else {
        koa.keys = options.keys;
      }
    }

    koa.on('error', (err, ctx) => {
      if (err.status && err.status < 500) {
        server.log('warn', `[${err.status}] ` + err.message, ctx && _.pick(ctx, ['method', 'url', 'ip']));
      } else {
        server.log('error', err.message, {
          status: err.status,
          stack: err.stack
        });
      }
    });
    server.httpServer = require('http').createServer(koa.callback());
    let port = options.httpPort || 2331;
    server.on('ready', () => {
      server.httpServer.listen(port, function (err) {
        if (err) throw err;
        server.log('info', `A http service is listening on port [${server.httpServer.address().port}] ...`);
        server.emit('httpReady');
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXJGZWF0dXJlcy9rb2EuanMiXSwibmFtZXMiOlsiRmVhdHVyZSIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJ2YWxpZGF0b3IiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwic2VydmVyIiwib3B0aW9ucyIsImtvYSIsInJvdXRlciIsImVudiIsInByb3h5IiwidHJ1c3RQcm94eSIsInRvQm9vbGVhbiIsInN1YmRvbWFpbk9mZnNldCIsImFwcE1vZHVsZSIsImtleXMiLCJpc0FycmF5Iiwib24iLCJlcnIiLCJjdHgiLCJzdGF0dXMiLCJsb2ciLCJtZXNzYWdlIiwicGljayIsInN0YWNrIiwiaHR0cFNlcnZlciIsImNyZWF0ZVNlcnZlciIsImNhbGxiYWNrIiwicG9ydCIsImh0dHBQb3J0IiwibGlzdGVuIiwiYWRkcmVzcyIsImVtaXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsK0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBaUJBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFVCxPQUFPLENBQUNVLE9BTkQ7QUFrQmJDLEVBQUFBLEtBQUssRUFBRSxVQUFVQyxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQjtBQUM5QixRQUFJQyxHQUFHLEdBQUdGLE1BQU0sQ0FBQ0csTUFBakI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDRSxHQUFQLEdBQWFBLEdBQWI7QUFFQUEsSUFBQUEsR0FBRyxDQUFDRSxHQUFKLEdBQVVKLE1BQU0sQ0FBQ0ksR0FBakI7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRyxLQUFKLEdBQVlKLE9BQU8sQ0FBQ0ssVUFBUixJQUFzQmIsU0FBUyxDQUFDYyxTQUFWLENBQW9CTixPQUFPLENBQUNLLFVBQTVCLENBQWxDOztBQUVBLFFBQUsscUJBQXFCTCxPQUF0QixJQUFrQ0EsT0FBTyxDQUFDTyxlQUFSLEtBQTRCLENBQWxFLEVBQXFFO0FBQ2pFLFVBQUlQLE9BQU8sQ0FBQ08sZUFBUixHQUEwQixDQUE5QixFQUFpQztBQUM3QixjQUFNLElBQUlkLG9CQUFKLENBQ0YsMERBREUsRUFFRmUsU0FGRSxFQUdGLHFCQUhFLENBQU47QUFLSDs7QUFFRFAsTUFBQUEsR0FBRyxDQUFDTSxlQUFKLEdBQXNCUCxPQUFPLENBQUNPLGVBQTlCO0FBQ0g7O0FBRUQsUUFBSVAsT0FBTyxDQUFDUyxJQUFaLEVBQWtCO0FBQ2QsVUFBSSxDQUFDbkIsQ0FBQyxDQUFDb0IsT0FBRixDQUFVVixPQUFPLENBQUNTLElBQWxCLENBQUwsRUFBOEI7QUFDMUJSLFFBQUFBLEdBQUcsQ0FBQ1EsSUFBSixHQUFXLENBQUVULE9BQU8sQ0FBQ1MsSUFBVixDQUFYO0FBQ0gsT0FGRCxNQUVPO0FBQ0hSLFFBQUFBLEdBQUcsQ0FBQ1EsSUFBSixHQUFXVCxPQUFPLENBQUNTLElBQW5CO0FBQ0g7QUFDSjs7QUFFRFIsSUFBQUEsR0FBRyxDQUFDVSxFQUFKLENBQU8sT0FBUCxFQUFnQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMxQixVQUFJRCxHQUFHLENBQUNFLE1BQUosSUFBY0YsR0FBRyxDQUFDRSxNQUFKLEdBQWEsR0FBL0IsRUFBb0M7QUFDaENmLFFBQUFBLE1BQU0sQ0FBQ2dCLEdBQVAsQ0FBVyxNQUFYLEVBQW9CLElBQUdILEdBQUcsQ0FBQ0UsTUFBTyxJQUFmLEdBQXFCRixHQUFHLENBQUNJLE9BQTVDLEVBQXFESCxHQUFHLElBQUl2QixDQUFDLENBQUMyQixJQUFGLENBQU9KLEdBQVAsRUFBWSxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLElBQWxCLENBQVosQ0FBNUQ7QUFDSCxPQUZELE1BRU87QUFDSGQsUUFBQUEsTUFBTSxDQUFDZ0IsR0FBUCxDQUFXLE9BQVgsRUFBb0JILEdBQUcsQ0FBQ0ksT0FBeEIsRUFBaUM7QUFBRUYsVUFBQUEsTUFBTSxFQUFFRixHQUFHLENBQUNFLE1BQWQ7QUFBc0JJLFVBQUFBLEtBQUssRUFBRU4sR0FBRyxDQUFDTTtBQUFqQyxTQUFqQztBQUNIO0FBQ0osS0FORDtBQVFBbkIsSUFBQUEsTUFBTSxDQUFDb0IsVUFBUCxHQUFvQi9CLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JnQyxZQUFoQixDQUE2Qm5CLEdBQUcsQ0FBQ29CLFFBQUosRUFBN0IsQ0FBcEI7QUFFQSxRQUFJQyxJQUFJLEdBQUd0QixPQUFPLENBQUN1QixRQUFSLElBQW9CLElBQS9CO0FBRUF4QixJQUFBQSxNQUFNLENBQUNZLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLE1BQU07QUFDckJaLE1BQUFBLE1BQU0sQ0FBQ29CLFVBQVAsQ0FBa0JLLE1BQWxCLENBQXlCRixJQUF6QixFQUErQixVQUFVVixHQUFWLEVBQWU7QUFDMUMsWUFBSUEsR0FBSixFQUFTLE1BQU1BLEdBQU47QUFFVGIsUUFBQUEsTUFBTSxDQUFDZ0IsR0FBUCxDQUFXLE1BQVgsRUFBb0Isd0NBQXVDaEIsTUFBTSxDQUFDb0IsVUFBUCxDQUFrQk0sT0FBbEIsR0FBNEJILElBQUssT0FBNUY7QUFLQXZCLFFBQUFBLE1BQU0sQ0FBQzJCLElBQVAsQ0FBWSxXQUFaO0FBQ0gsT0FURDtBQVVILEtBWEQ7QUFZSDtBQXJFWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgXyA9IFV0aWwuXztcbmNvbnN0IFByb21pc2UgPSBVdGlsLlByb21pc2U7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCd2YWxpZGF0b3InKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIEtvYSBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gKiBAY2FsbGJhY2sgS29hQWN0aW9uRnVuY3Rpb25cbiAqIEBhc3luY1xuICogQHBhcmFtIHtvYmplY3R9IGN0eCAtIFRoZSBrb2EgcmVxdWVzdCBhbmQgcmVzcG9uc2UgY29udGV4dC4gW1NlZSBrb2FqcyBhYm91dCBjdHggZGV0YWlsc117QGxpbmsgaHR0cDovL2tvYWpzLmNvbS8jY29udGV4dH1cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdHgucmVxZXVzdCAtIFRoZSBrb2EgcmVxdWVzdCBvYmplY3QuXG4gKiBAcHJvcGVydHkge29iamVjdH0gY3R4LnJlc3BvbnNlIC0gVGhlIGtvYSByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0ge0tvYUFjdGlvbkZ1bmN0aW9ufSBbbmV4dF0gLSBOZXh0IG1pZGRsZXdhcmUgb3IgYWN0aW9uLlxuICovXG5cbi8qKlxuICogRW5hYmxlIGtvYS1iYXNlZCB3ZWIgZW5naW5lLlxuICogQG1vZHVsZSBGZWF0dXJlX0tvYSBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlciAtIFRoZSB3ZWIgc2VydmVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgZmVhdHVyZSAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy50cnVzdFByb3h5XSAtIFdoZW4gdHJ1ZSBwcm94eSBoZWFkZXIgZmllbGRzIHdpbGwgYmUgdHJ1c3RlZFxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IFtvcHRpb25zLmtleXNdIC0gU2V0IHNpZ25lZCBjb29raWUga2V5c1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBbb3B0aW9ucy5odHRwUG9ydF0gLSBUaGUgaHR0cCBwb3J0IG51bWJlclxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBbb3B0aW9ucy5zdWJkb21haW5PZmZzZXQ9Ml0gLSBUaGUgb2Zmc2V0IG9mIHN1YmRvbWFpbnMgdG8gaWdub3JlLCBkZWZhdWx0OiAyXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBrb2EgPSBzZXJ2ZXIucm91dGVyO1xuICAgICAgICBzZXJ2ZXIua29hID0ga29hO1xuICAgICAgICBcbiAgICAgICAga29hLmVudiA9IHNlcnZlci5lbnY7XG4gICAgICAgIGtvYS5wcm94eSA9IG9wdGlvbnMudHJ1c3RQcm94eSAmJiB2YWxpZGF0b3IudG9Cb29sZWFuKG9wdGlvbnMudHJ1c3RQcm94eSk7XG5cbiAgICAgICAgaWYgKCgnc3ViZG9tYWluT2Zmc2V0JyBpbiBvcHRpb25zKSAmJiBvcHRpb25zLnN1YmRvbWFpbk9mZnNldCAhPT0gMikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3ViZG9tYWluT2Zmc2V0IDwgMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgc3ViZG9tYWluT2Zmc2V0LiBTaG91bGQgYmUgbGFyZ2VyIG9yIGVxdWFsIHRvIDIuJyxcbiAgICAgICAgICAgICAgICAgICAgYXBwTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAna29hLnN1YmRvbWFpbk9mZnNldCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrb2Euc3ViZG9tYWluT2Zmc2V0ID0gb3B0aW9ucy5zdWJkb21haW5PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5rZXlzKSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNBcnJheShvcHRpb25zLmtleXMpKSB7XG4gICAgICAgICAgICAgICAga29hLmtleXMgPSBbIG9wdGlvbnMua2V5cyBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBrb2Eua2V5cyA9IG9wdGlvbnMua2V5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtvYS5vbignZXJyb3InLCAoZXJyLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzICYmIGVyci5zdGF0dXMgPCA1MDApIHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIubG9nKCd3YXJuJywgYFske2Vyci5zdGF0dXN9XSBgICsgZXJyLm1lc3NhZ2UsIGN0eCAmJiBfLnBpY2soY3R4LCBbJ21ldGhvZCcsICd1cmwnLCAnaXAnXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIubG9nKCdlcnJvcicsIGVyci5tZXNzYWdlLCB7IHN0YXR1czogZXJyLnN0YXR1cywgc3RhY2s6IGVyci5zdGFjayB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgc2VydmVyLmh0dHBTZXJ2ZXIgPSByZXF1aXJlKCdodHRwJykuY3JlYXRlU2VydmVyKGtvYS5jYWxsYmFjaygpKTsgICAgICAgIFxuXG4gICAgICAgIGxldCBwb3J0ID0gb3B0aW9ucy5odHRwUG9ydCB8fCAyMzMxO1xuXG4gICAgICAgIHNlcnZlci5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgICAgICAgICBzZXJ2ZXIuaHR0cFNlcnZlci5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHRocm93IGVycjtcblxuICAgICAgICAgICAgICAgIHNlcnZlci5sb2coJ2luZm8nLCBgQSBodHRwIHNlcnZpY2UgaXMgbGlzdGVuaW5nIG9uIHBvcnQgWyR7c2VydmVyLmh0dHBTZXJ2ZXIuYWRkcmVzcygpLnBvcnR9XSAuLi5gKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBIdHRwIHNlcnZlciByZWFkeSBldmVudFxuICAgICAgICAgICAgICAgICAqIEBldmVudCBXZWJTZXJ2ZXIjaHR0cFJlYWR5XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2VydmVyLmVtaXQoJ2h0dHBSZWFkeScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07Il19