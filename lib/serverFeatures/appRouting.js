"use strict";

require("source-map-support/register");

const Feature = require('@k-suite/app/lib/enum/Feature');

const path = require('path');

const Util = require('rk-utils');

const Promise = Util.Promise;

const {
  InvalidConfiguration
} = require('../utils/Errors');

const WebModule = require('../WebModule');

module.exports = {
  type: Feature.PLUGIN,
  load_: async (server, routes) => Util.eachAsync_(routes, async (config, baseRoute) => {
    if (!config.name) {
      throw new InvalidConfiguration('Missing app name.', app, `appRouting.${baseRoute}.name`);
    }

    let options = Object.assign({
      env: server.env,
      logWithAppName: server.options.logWithAppName,
      traceMiddlewares: server.options.traceMiddlewares
    }, config.options);
    let appPath;

    if (config.npmModule) {
      appPath = server.toAbsolutePath('node_modules', config.name);
    } else {
      appPath = path.join(server.appModulesPath, config.name);
    }

    let exists = (await Util.fs.pathExists(appPath)) && (await Util.fs.stat(appPath)).isDirectory();

    if (!exists) {
      throw new InvalidConfiguration(`App [${config.name}] not exists.`, app, `appRouting.${baseRoute}.name`);
    }

    let app = new WebModule(server, config.name, baseRoute, appPath, options);
    app.settings = config.settings || {};
    let relativePath = path.relative(server.workingPath, appPath);
    server.log('verbose', `Loading app [${app.name}] from "${relativePath}" ...`);
    await app.start_();
    server.log('verbose', `App [${app.name}] is loaded.`);
    server.on('after:' + Feature.PLUGIN, () => {
      server.mountApp(baseRoute, app);
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXJGZWF0dXJlcy9hcHBSb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwicGF0aCIsIlV0aWwiLCJQcm9taXNlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJXZWJNb2R1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlBMVUdJTiIsImxvYWRfIiwic2VydmVyIiwicm91dGVzIiwiZWFjaEFzeW5jXyIsImNvbmZpZyIsImJhc2VSb3V0ZSIsIm5hbWUiLCJhcHAiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZW52IiwibG9nV2l0aEFwcE5hbWUiLCJ0cmFjZU1pZGRsZXdhcmVzIiwiYXBwUGF0aCIsIm5wbU1vZHVsZSIsInRvQWJzb2x1dGVQYXRoIiwiam9pbiIsImFwcE1vZHVsZXNQYXRoIiwiZXhpc3RzIiwiZnMiLCJwYXRoRXhpc3RzIiwic3RhdCIsImlzRGlyZWN0b3J5Iiwic2V0dGluZ3MiLCJyZWxhdGl2ZVBhdGgiLCJyZWxhdGl2ZSIsIndvcmtpbmdQYXRoIiwibG9nIiwic3RhcnRfIiwib24iLCJtb3VudEFwcCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFvQkEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsK0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJKLE9BQU8sQ0FBQyxpQkFBRCxDQUF4Qzs7QUFDQSxNQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxjQUFELENBQXpCOztBQUVBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFVCxPQUFPLENBQUNVLE1BTkQ7QUFjYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLE1BQVAsRUFBZUMsTUFBZixLQUEwQlYsSUFBSSxDQUFDVyxVQUFMLENBQWdCRCxNQUFoQixFQUF3QixPQUFPRSxNQUFQLEVBQWVDLFNBQWYsS0FBNkI7QUFDbEYsUUFBSSxDQUFDRCxNQUFNLENBQUNFLElBQVosRUFBa0I7QUFDZCxZQUFNLElBQUlaLG9CQUFKLENBQ0YsbUJBREUsRUFFRmEsR0FGRSxFQUdELGNBQWFGLFNBQVUsT0FIdEIsQ0FBTjtBQUlIOztBQUVELFFBQUlHLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDeEJDLE1BQUFBLEdBQUcsRUFBRVYsTUFBTSxDQUFDVSxHQURZO0FBRXhCQyxNQUFBQSxjQUFjLEVBQUVYLE1BQU0sQ0FBQ08sT0FBUCxDQUFlSSxjQUZQO0FBR3hCQyxNQUFBQSxnQkFBZ0IsRUFBRVosTUFBTSxDQUFDTyxPQUFQLENBQWVLO0FBSFQsS0FBZCxFQUlYVCxNQUFNLENBQUNJLE9BSkksQ0FBZDtBQU1BLFFBQUlNLE9BQUo7O0FBRUEsUUFBSVYsTUFBTSxDQUFDVyxTQUFYLEVBQXNCO0FBQ2xCRCxNQUFBQSxPQUFPLEdBQUdiLE1BQU0sQ0FBQ2UsY0FBUCxDQUFzQixjQUF0QixFQUFzQ1osTUFBTSxDQUFDRSxJQUE3QyxDQUFWO0FBQ0gsS0FGRCxNQUVPO0FBQ0hRLE1BQUFBLE9BQU8sR0FBR3ZCLElBQUksQ0FBQzBCLElBQUwsQ0FBVWhCLE1BQU0sQ0FBQ2lCLGNBQWpCLEVBQWlDZCxNQUFNLENBQUNFLElBQXhDLENBQVY7QUFDSDs7QUFFRCxRQUFJYSxNQUFNLEdBQUcsT0FBTTNCLElBQUksQ0FBQzRCLEVBQUwsQ0FBUUMsVUFBUixDQUFtQlAsT0FBbkIsQ0FBTixLQUFxQyxDQUFDLE1BQU10QixJQUFJLENBQUM0QixFQUFMLENBQVFFLElBQVIsQ0FBYVIsT0FBYixDQUFQLEVBQThCUyxXQUE5QixFQUFsRDs7QUFDQSxRQUFJLENBQUNKLE1BQUwsRUFBYTtBQUNULFlBQU0sSUFBSXpCLG9CQUFKLENBQ0QsUUFBT1UsTUFBTSxDQUFDRSxJQUFLLGVBRGxCLEVBRUZDLEdBRkUsRUFHRCxjQUFhRixTQUFVLE9BSHRCLENBQU47QUFJSDs7QUFFRCxRQUFJRSxHQUFHLEdBQUcsSUFBSVosU0FBSixDQUFjTSxNQUFkLEVBQXNCRyxNQUFNLENBQUNFLElBQTdCLEVBQW1DRCxTQUFuQyxFQUE4Q1MsT0FBOUMsRUFBdUROLE9BQXZELENBQVY7QUFDQUQsSUFBQUEsR0FBRyxDQUFDaUIsUUFBSixHQUFlcEIsTUFBTSxDQUFDb0IsUUFBUCxJQUFtQixFQUFsQztBQUVBLFFBQUlDLFlBQVksR0FBR2xDLElBQUksQ0FBQ21DLFFBQUwsQ0FBY3pCLE1BQU0sQ0FBQzBCLFdBQXJCLEVBQWtDYixPQUFsQyxDQUFuQjtBQUNBYixJQUFBQSxNQUFNLENBQUMyQixHQUFQLENBQVcsU0FBWCxFQUF1QixnQkFBZXJCLEdBQUcsQ0FBQ0QsSUFBSyxXQUFVbUIsWUFBYSxPQUF0RTtBQUVBLFVBQU1sQixHQUFHLENBQUNzQixNQUFKLEVBQU47QUFFQTVCLElBQUFBLE1BQU0sQ0FBQzJCLEdBQVAsQ0FBVyxTQUFYLEVBQXVCLFFBQU9yQixHQUFHLENBQUNELElBQUssY0FBdkM7QUFHQUwsSUFBQUEsTUFBTSxDQUFDNkIsRUFBUCxDQUFVLFdBQVd6QyxPQUFPLENBQUNVLE1BQTdCLEVBQXFDLE1BQU07QUFDdkNFLE1BQUFBLE1BQU0sQ0FBQzhCLFFBQVAsQ0FBZ0IxQixTQUFoQixFQUEyQkUsR0FBM0I7QUFDSCxLQUZEO0FBR0gsR0E1Q2dDO0FBZHBCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIHJvdXRpbmcgd2ViIHJlcXVlc3RzIHRvIGEgY2hpbGQgYXBwLlxuICogQG1vZHVsZSBGZWF0dXJlX0FwcFJvdXRpbmdcbiAqIFxuICogQGV4YW1wbGVcbiAqICBcbiAqICAnYXBwUm91dGluZyc6IHtcbiAqICAgICAgJzxtb3VudGluZyBwb2ludD4nOiB7XG4gKiAgICAgICAgICBuYW1lOiAnYXBwIG5hbWUnLCBcbiAqICAgICAgICAgIG5wbU1vZHVsZTogZmFsc2UsIC8vIHdoZXRoZXIgaXMgYSBucG0gbW9kdWxlXG4gKiAgICAgICAgICBvcHRpb25zOiB7IC8vIG1vZHVsZSBvcHRpb25zIFxuICogICAgICAgICAgfSxcbiAqICAgICAgICAgIHNldHRpbmdzOiB7IC8vIGNhbiBiZSByZWZlcmVuY2VkIGluIGNvbmZpZyBmaWxlXG4gKiAgICAgICAgICB9XG4gKiAgICAgIH1cbiAqICB9IFxuICovXG5cbmNvbnN0IEZlYXR1cmUgPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL2VudW0vRmVhdHVyZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgUHJvbWlzZSA9IFV0aWwuUHJvbWlzZTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgV2ViTW9kdWxlID0gcmVxdWlyZSgnLi4vV2ViTW9kdWxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBwbHVnaW4gc3RhZ2UuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuUExVR0lOLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZS5cbiAgICAgKiBAcGFyYW0ge1dlYlNlcnZlcn0gc2VydmVyIC0gVGhlIHdlYiBzZXJ2ZXIgbW9kdWxlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm91dGVzIC0gUm91dGVzIGFuZCBjb25maWd1cmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKHNlcnZlciwgcm91dGVzKSA9PiBVdGlsLmVhY2hBc3luY18ocm91dGVzLCBhc3luYyAoY29uZmlnLCBiYXNlUm91dGUpID0+IHtcbiAgICAgICAgaWYgKCFjb25maWcubmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICdNaXNzaW5nIGFwcCBuYW1lLicsXG4gICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgIGBhcHBSb3V0aW5nLiR7YmFzZVJvdXRlfS5uYW1lYCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgXG4gICAgICAgICAgICBlbnY6IHNlcnZlci5lbnYsIFxuICAgICAgICAgICAgbG9nV2l0aEFwcE5hbWU6IHNlcnZlci5vcHRpb25zLmxvZ1dpdGhBcHBOYW1lLFxuICAgICAgICAgICAgdHJhY2VNaWRkbGV3YXJlczogc2VydmVyLm9wdGlvbnMudHJhY2VNaWRkbGV3YXJlc1xuICAgICAgICB9LCBjb25maWcub3B0aW9ucyk7XG5cbiAgICAgICAgbGV0IGFwcFBhdGg7ICAgICBcblxuICAgICAgICBpZiAoY29uZmlnLm5wbU1vZHVsZSkge1xuICAgICAgICAgICAgYXBwUGF0aCA9IHNlcnZlci50b0Fic29sdXRlUGF0aCgnbm9kZV9tb2R1bGVzJywgY29uZmlnLm5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXBwUGF0aCA9IHBhdGguam9pbihzZXJ2ZXIuYXBwTW9kdWxlc1BhdGgsIGNvbmZpZy5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBleGlzdHMgPSBhd2FpdCBVdGlsLmZzLnBhdGhFeGlzdHMoYXBwUGF0aCkgJiYgKGF3YWl0IFV0aWwuZnMuc3RhdChhcHBQYXRoKSkuaXNEaXJlY3RvcnkoKTtcbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICBgQXBwIFske2NvbmZpZy5uYW1lfV0gbm90IGV4aXN0cy5gLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICBgYXBwUm91dGluZy4ke2Jhc2VSb3V0ZX0ubmFtZWApO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCBhcHAgPSBuZXcgV2ViTW9kdWxlKHNlcnZlciwgY29uZmlnLm5hbWUsIGJhc2VSb3V0ZSwgYXBwUGF0aCwgb3B0aW9ucyk7XG4gICAgICAgIGFwcC5zZXR0aW5ncyA9IGNvbmZpZy5zZXR0aW5ncyB8fCB7fTtcblxuICAgICAgICBsZXQgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShzZXJ2ZXIud29ya2luZ1BhdGgsIGFwcFBhdGgpO1xuICAgICAgICBzZXJ2ZXIubG9nKCd2ZXJib3NlJywgYExvYWRpbmcgYXBwIFske2FwcC5uYW1lfV0gZnJvbSBcIiR7cmVsYXRpdmVQYXRofVwiIC4uLmApO1xuICAgIFxuICAgICAgICBhd2FpdCBhcHAuc3RhcnRfKCk7XG4gICAgICAgIFxuICAgICAgICBzZXJ2ZXIubG9nKCd2ZXJib3NlJywgYEFwcCBbJHthcHAubmFtZX1dIGlzIGxvYWRlZC5gKTtcblxuICAgICAgICAvL2RlbGF5ZWQgdGhlIGFwcCByb3V0ZXMgbW91bnRpbmcgYWZ0ZXIgYWxsIHBsdWdpbnMgb2YgdGhlIHNlcnZlciBhcmUgbG9hZGVkXG4gICAgICAgIHNlcnZlci5vbignYWZ0ZXI6JyArIEZlYXR1cmUuUExVR0lOLCAoKSA9PiB7XG4gICAgICAgICAgICBzZXJ2ZXIubW91bnRBcHAoYmFzZVJvdXRlLCBhcHApO1xuICAgICAgICB9KTsgICAgICAgIFxuICAgIH0pXG59OyJdfQ==