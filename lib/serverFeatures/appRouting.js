"use strict";

require("source-map-support/register");

const Feature = require('@k-suite/app/lib/enum/Feature');

const path = require('path');

const Util = require('rk-utils');

const Promise = Util.Promise;

const {
  InvalidConfiguration
} = require('../Errors');

const WebModule = require('../WebModule');

module.exports = {
  type: Feature.PLUGIN,
  load_: async (server, routes) => Util.eachAsync_(routes, async (config, baseRoute) => {
    if (!config.name) {
      throw new InvalidConfiguration('Missing app name.', app, `appRouting.${baseRoute}.name`);
    }

    let options = Object.assign({
      env: server.env,
      logWithAppName: server.options.logWithAppName,
      traceMiddlewares: server.options.traceMiddlewares
    }, config.options);
    let appPath;

    if (config.npmModule) {
      appPath = server.toAbsolutePath('node_modules', config.name);
    } else {
      appPath = path.join(server.appModulesPath, config.name);
    }

    let exists = (await Util.fs.pathExists(appPath)) && (await Util.fs.stat(appPath)).isDirectory();

    if (!exists) {
      throw new InvalidConfiguration(`App [${config.name}] not exists.`, app, `appRouting.${baseRoute}.name`);
    }

    let app = new WebModule(server, config.name, baseRoute, appPath, options);
    app.settings = config.settings || {};
    let relativePath = path.relative(server.workingPath, appPath);
    server.log('verbose', `Loading app [${app.name}] from "${relativePath}" ...`);
    await app.start_();
    server.log('verbose', `App [${app.name}] is loaded.`);
    server.on('after:' + Feature.PLUGIN, () => {
      server.mountApp(baseRoute, app);
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXJGZWF0dXJlcy9hcHBSb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwicGF0aCIsIlV0aWwiLCJQcm9taXNlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJXZWJNb2R1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlBMVUdJTiIsImxvYWRfIiwic2VydmVyIiwicm91dGVzIiwiZWFjaEFzeW5jXyIsImNvbmZpZyIsImJhc2VSb3V0ZSIsIm5hbWUiLCJhcHAiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZW52IiwibG9nV2l0aEFwcE5hbWUiLCJ0cmFjZU1pZGRsZXdhcmVzIiwiYXBwUGF0aCIsIm5wbU1vZHVsZSIsInRvQWJzb2x1dGVQYXRoIiwiam9pbiIsImFwcE1vZHVsZXNQYXRoIiwiZXhpc3RzIiwiZnMiLCJwYXRoRXhpc3RzIiwic3RhdCIsImlzRGlyZWN0b3J5Iiwic2V0dGluZ3MiLCJyZWxhdGl2ZVBhdGgiLCJyZWxhdGl2ZSIsIndvcmtpbmdQYXRoIiwibG9nIiwic3RhcnRfIiwib24iLCJtb3VudEFwcCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFvQkEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsK0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJKLE9BQU8sQ0FBQyxXQUFELENBQXhDOztBQUNBLE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGNBQUQsQ0FBekI7O0FBRUFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVULE9BQU8sQ0FBQ1UsTUFORDtBQWNiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsTUFBUCxFQUFlQyxNQUFmLEtBQTBCVixJQUFJLENBQUNXLFVBQUwsQ0FBZ0JELE1BQWhCLEVBQXdCLE9BQU9FLE1BQVAsRUFBZUMsU0FBZixLQUE2QjtBQUNsRixRQUFJLENBQUNELE1BQU0sQ0FBQ0UsSUFBWixFQUFrQjtBQUNkLFlBQU0sSUFBSVosb0JBQUosQ0FDRixtQkFERSxFQUVGYSxHQUZFLEVBR0QsY0FBYUYsU0FBVSxPQUh0QixDQUFOO0FBSUg7O0FBRUQsUUFBSUcsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN4QkMsTUFBQUEsR0FBRyxFQUFFVixNQUFNLENBQUNVLEdBRFk7QUFFeEJDLE1BQUFBLGNBQWMsRUFBRVgsTUFBTSxDQUFDTyxPQUFQLENBQWVJLGNBRlA7QUFHeEJDLE1BQUFBLGdCQUFnQixFQUFFWixNQUFNLENBQUNPLE9BQVAsQ0FBZUs7QUFIVCxLQUFkLEVBSVhULE1BQU0sQ0FBQ0ksT0FKSSxDQUFkO0FBTUEsUUFBSU0sT0FBSjs7QUFFQSxRQUFJVixNQUFNLENBQUNXLFNBQVgsRUFBc0I7QUFDbEJELE1BQUFBLE9BQU8sR0FBR2IsTUFBTSxDQUFDZSxjQUFQLENBQXNCLGNBQXRCLEVBQXNDWixNQUFNLENBQUNFLElBQTdDLENBQVY7QUFDSCxLQUZELE1BRU87QUFDSFEsTUFBQUEsT0FBTyxHQUFHdkIsSUFBSSxDQUFDMEIsSUFBTCxDQUFVaEIsTUFBTSxDQUFDaUIsY0FBakIsRUFBaUNkLE1BQU0sQ0FBQ0UsSUFBeEMsQ0FBVjtBQUNIOztBQUVELFFBQUlhLE1BQU0sR0FBRyxPQUFNM0IsSUFBSSxDQUFDNEIsRUFBTCxDQUFRQyxVQUFSLENBQW1CUCxPQUFuQixDQUFOLEtBQXFDLENBQUMsTUFBTXRCLElBQUksQ0FBQzRCLEVBQUwsQ0FBUUUsSUFBUixDQUFhUixPQUFiLENBQVAsRUFBOEJTLFdBQTlCLEVBQWxEOztBQUNBLFFBQUksQ0FBQ0osTUFBTCxFQUFhO0FBQ1QsWUFBTSxJQUFJekIsb0JBQUosQ0FDRCxRQUFPVSxNQUFNLENBQUNFLElBQUssZUFEbEIsRUFFRkMsR0FGRSxFQUdELGNBQWFGLFNBQVUsT0FIdEIsQ0FBTjtBQUlIOztBQUVELFFBQUlFLEdBQUcsR0FBRyxJQUFJWixTQUFKLENBQWNNLE1BQWQsRUFBc0JHLE1BQU0sQ0FBQ0UsSUFBN0IsRUFBbUNELFNBQW5DLEVBQThDUyxPQUE5QyxFQUF1RE4sT0FBdkQsQ0FBVjtBQUNBRCxJQUFBQSxHQUFHLENBQUNpQixRQUFKLEdBQWVwQixNQUFNLENBQUNvQixRQUFQLElBQW1CLEVBQWxDO0FBRUEsUUFBSUMsWUFBWSxHQUFHbEMsSUFBSSxDQUFDbUMsUUFBTCxDQUFjekIsTUFBTSxDQUFDMEIsV0FBckIsRUFBa0NiLE9BQWxDLENBQW5CO0FBQ0FiLElBQUFBLE1BQU0sQ0FBQzJCLEdBQVAsQ0FBVyxTQUFYLEVBQXVCLGdCQUFlckIsR0FBRyxDQUFDRCxJQUFLLFdBQVVtQixZQUFhLE9BQXRFO0FBRUEsVUFBTWxCLEdBQUcsQ0FBQ3NCLE1BQUosRUFBTjtBQUVBNUIsSUFBQUEsTUFBTSxDQUFDMkIsR0FBUCxDQUFXLFNBQVgsRUFBdUIsUUFBT3JCLEdBQUcsQ0FBQ0QsSUFBSyxjQUF2QztBQUdBTCxJQUFBQSxNQUFNLENBQUM2QixFQUFQLENBQVUsV0FBV3pDLE9BQU8sQ0FBQ1UsTUFBN0IsRUFBcUMsTUFBTTtBQUN2Q0UsTUFBQUEsTUFBTSxDQUFDOEIsUUFBUCxDQUFnQjFCLFNBQWhCLEVBQTJCRSxHQUEzQjtBQUNILEtBRkQ7QUFHSCxHQTVDZ0M7QUFkcEIsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgcm91dGluZyB3ZWIgcmVxdWVzdHMgdG8gYSBjaGlsZCBhcHAuXG4gKiBAbW9kdWxlIEZlYXR1cmVfQXBwUm91dGluZ1xuICogXG4gKiBAZXhhbXBsZVxuICogIFxuICogICdhcHBSb3V0aW5nJzoge1xuICogICAgICAnPG1vdW50aW5nIHBvaW50Pic6IHtcbiAqICAgICAgICAgIG5hbWU6ICdhcHAgbmFtZScsIFxuICogICAgICAgICAgbnBtTW9kdWxlOiBmYWxzZSwgLy8gd2hldGhlciBpcyBhIG5wbSBtb2R1bGVcbiAqICAgICAgICAgIG9wdGlvbnM6IHsgLy8gbW9kdWxlIG9wdGlvbnMgXG4gKiAgICAgICAgICB9LFxuICogICAgICAgICAgc2V0dGluZ3M6IHsgLy8gY2FuIGJlIHJlZmVyZW5jZWQgaW4gY29uZmlnIGZpbGVcbiAqICAgICAgICAgIH1cbiAqICAgICAgfVxuICogIH0gXG4gKi9cblxuY29uc3QgRmVhdHVyZSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcC9saWIvZW51bS9GZWF0dXJlJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBQcm9taXNlID0gVXRpbC5Qcm9taXNlO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG5jb25zdCBXZWJNb2R1bGUgPSByZXF1aXJlKCcuLi9XZWJNb2R1bGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHBsdWdpbiBzdGFnZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5QTFVHSU4sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlLlxuICAgICAqIEBwYXJhbSB7V2ViU2VydmVyfSBzZXJ2ZXIgLSBUaGUgd2ViIHNlcnZlciBtb2R1bGUgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByb3V0ZXMgLSBSb3V0ZXMgYW5kIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoc2VydmVyLCByb3V0ZXMpID0+IFV0aWwuZWFjaEFzeW5jXyhyb3V0ZXMsIGFzeW5jIChjb25maWcsIGJhc2VSb3V0ZSkgPT4ge1xuICAgICAgICBpZiAoIWNvbmZpZy5uYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgJ01pc3NpbmcgYXBwIG5hbWUuJyxcbiAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgYGFwcFJvdXRpbmcuJHtiYXNlUm91dGV9Lm5hbWVgKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsZXQgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBcbiAgICAgICAgICAgIGVudjogc2VydmVyLmVudiwgXG4gICAgICAgICAgICBsb2dXaXRoQXBwTmFtZTogc2VydmVyLm9wdGlvbnMubG9nV2l0aEFwcE5hbWUsXG4gICAgICAgICAgICB0cmFjZU1pZGRsZXdhcmVzOiBzZXJ2ZXIub3B0aW9ucy50cmFjZU1pZGRsZXdhcmVzXG4gICAgICAgIH0sIGNvbmZpZy5vcHRpb25zKTtcblxuICAgICAgICBsZXQgYXBwUGF0aDsgICAgIFxuXG4gICAgICAgIGlmIChjb25maWcubnBtTW9kdWxlKSB7XG4gICAgICAgICAgICBhcHBQYXRoID0gc2VydmVyLnRvQWJzb2x1dGVQYXRoKCdub2RlX21vZHVsZXMnLCBjb25maWcubmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcHBQYXRoID0gcGF0aC5qb2luKHNlcnZlci5hcHBNb2R1bGVzUGF0aCwgY29uZmlnLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGV4aXN0cyA9IGF3YWl0IFV0aWwuZnMucGF0aEV4aXN0cyhhcHBQYXRoKSAmJiAoYXdhaXQgVXRpbC5mcy5zdGF0KGFwcFBhdGgpKS5pc0RpcmVjdG9yeSgpO1xuICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgIGBBcHAgWyR7Y29uZmlnLm5hbWV9XSBub3QgZXhpc3RzLmAsXG4gICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgIGBhcHBSb3V0aW5nLiR7YmFzZVJvdXRlfS5uYW1lYCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgbGV0IGFwcCA9IG5ldyBXZWJNb2R1bGUoc2VydmVyLCBjb25maWcubmFtZSwgYmFzZVJvdXRlLCBhcHBQYXRoLCBvcHRpb25zKTtcbiAgICAgICAgYXBwLnNldHRpbmdzID0gY29uZmlnLnNldHRpbmdzIHx8IHt9O1xuXG4gICAgICAgIGxldCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKHNlcnZlci53b3JraW5nUGF0aCwgYXBwUGF0aCk7XG4gICAgICAgIHNlcnZlci5sb2coJ3ZlcmJvc2UnLCBgTG9hZGluZyBhcHAgWyR7YXBwLm5hbWV9XSBmcm9tIFwiJHtyZWxhdGl2ZVBhdGh9XCIgLi4uYCk7XG4gICAgXG4gICAgICAgIGF3YWl0IGFwcC5zdGFydF8oKTtcbiAgICAgICAgXG4gICAgICAgIHNlcnZlci5sb2coJ3ZlcmJvc2UnLCBgQXBwIFske2FwcC5uYW1lfV0gaXMgbG9hZGVkLmApO1xuXG4gICAgICAgIC8vZGVsYXllZCB0aGUgYXBwIHJvdXRlcyBtb3VudGluZyBhZnRlciBhbGwgcGx1Z2lucyBvZiB0aGUgc2VydmVyIGFyZSBsb2FkZWRcbiAgICAgICAgc2VydmVyLm9uKCdhZnRlcjonICsgRmVhdHVyZS5QTFVHSU4sICgpID0+IHtcbiAgICAgICAgICAgIHNlcnZlci5tb3VudEFwcChiYXNlUm91dGUsIGFwcCk7XG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfSlcbn07Il19