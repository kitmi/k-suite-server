"use strict";

require("source-map-support/register");

const Feature = require('@k-suite/app/lib/enum/Feature');

const path = require('path');

const Util = require('rk-utils');

const Promise = Util.Promise;

const {
  InvalidConfiguration
} = require('../Errors');

const WebModule = require('../WebModule');

module.exports = {
  type: Feature.PLUGIN,
  load_: async (server, routes) => Util.eachAsync_(routes, async (config, baseRoute) => {
    if (!config.name) {
      throw new InvalidConfiguration('Missing app name.', app, `appRouting.${baseRoute}.name`);
    }

    let options = Object.assign({
      env: server.env,
      logWithAppName: server.options.logWithAppName
    }, config.options);
    let appPath;

    if (config.npmModule) {
      appPath = server.toAbsolutePath('node_modules', config.name);
    } else {
      appPath = path.join(server.appModulesPath, config.name);
    }

    let exists = (await Util.fs.pathExists(appPath)) && (await Util.fs.stat(appPath)).isDirectory();

    if (!exists) {
      throw new InvalidConfiguration(`App [${config.name}] not exists.`, app, `appRouting.${baseRoute}.name`);
    }

    let app = new WebModule(server, config.name, baseRoute, appPath, options);
    app.settings = config.settings || {};
    let relativePath = path.relative(server.workingPath, appPath);
    server.log('verbose', `Loading app [${app.name}] from "${relativePath}" ...`);
    await app.start_();
    server.log('verbose', `App [${app.name}] is loaded.`);
    server.on('after:' + Feature.PLUGIN, () => {
      server.mountApp(baseRoute, app);
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXJGZWF0dXJlcy9hcHBSb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwicGF0aCIsIlV0aWwiLCJQcm9taXNlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJXZWJNb2R1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlBMVUdJTiIsImxvYWRfIiwic2VydmVyIiwicm91dGVzIiwiZWFjaEFzeW5jXyIsImNvbmZpZyIsImJhc2VSb3V0ZSIsIm5hbWUiLCJhcHAiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZW52IiwibG9nV2l0aEFwcE5hbWUiLCJhcHBQYXRoIiwibnBtTW9kdWxlIiwidG9BYnNvbHV0ZVBhdGgiLCJqb2luIiwiYXBwTW9kdWxlc1BhdGgiLCJleGlzdHMiLCJmcyIsInBhdGhFeGlzdHMiLCJzdGF0IiwiaXNEaXJlY3RvcnkiLCJzZXR0aW5ncyIsInJlbGF0aXZlUGF0aCIsInJlbGF0aXZlIiwid29ya2luZ1BhdGgiLCJsb2ciLCJzdGFydF8iLCJvbiIsIm1vdW50QXBwIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQW9CQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQywrQkFBRCxDQUF2Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTUcsT0FBTyxHQUFHRCxJQUFJLENBQUNDLE9BQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkosT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBQ0EsTUFBTUssU0FBUyxHQUFHTCxPQUFPLENBQUMsY0FBRCxDQUF6Qjs7QUFFQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRVQsT0FBTyxDQUFDVSxNQU5EO0FBY2JDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxNQUFQLEVBQWVDLE1BQWYsS0FBMEJWLElBQUksQ0FBQ1csVUFBTCxDQUFnQkQsTUFBaEIsRUFBd0IsT0FBT0UsTUFBUCxFQUFlQyxTQUFmLEtBQTZCO0FBQ2xGLFFBQUksQ0FBQ0QsTUFBTSxDQUFDRSxJQUFaLEVBQWtCO0FBQ2QsWUFBTSxJQUFJWixvQkFBSixDQUNGLG1CQURFLEVBRUZhLEdBRkUsRUFHRCxjQUFhRixTQUFVLE9BSHRCLENBQU47QUFJSDs7QUFFRCxRQUFJRyxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3hCQyxNQUFBQSxHQUFHLEVBQUVWLE1BQU0sQ0FBQ1UsR0FEWTtBQUV4QkMsTUFBQUEsY0FBYyxFQUFFWCxNQUFNLENBQUNPLE9BQVAsQ0FBZUk7QUFGUCxLQUFkLEVBR1hSLE1BQU0sQ0FBQ0ksT0FISSxDQUFkO0FBS0EsUUFBSUssT0FBSjs7QUFFQSxRQUFJVCxNQUFNLENBQUNVLFNBQVgsRUFBc0I7QUFDbEJELE1BQUFBLE9BQU8sR0FBR1osTUFBTSxDQUFDYyxjQUFQLENBQXNCLGNBQXRCLEVBQXNDWCxNQUFNLENBQUNFLElBQTdDLENBQVY7QUFDSCxLQUZELE1BRU87QUFDSE8sTUFBQUEsT0FBTyxHQUFHdEIsSUFBSSxDQUFDeUIsSUFBTCxDQUFVZixNQUFNLENBQUNnQixjQUFqQixFQUFpQ2IsTUFBTSxDQUFDRSxJQUF4QyxDQUFWO0FBQ0g7O0FBRUQsUUFBSVksTUFBTSxHQUFHLE9BQU0xQixJQUFJLENBQUMyQixFQUFMLENBQVFDLFVBQVIsQ0FBbUJQLE9BQW5CLENBQU4sS0FBcUMsQ0FBQyxNQUFNckIsSUFBSSxDQUFDMkIsRUFBTCxDQUFRRSxJQUFSLENBQWFSLE9BQWIsQ0FBUCxFQUE4QlMsV0FBOUIsRUFBbEQ7O0FBQ0EsUUFBSSxDQUFDSixNQUFMLEVBQWE7QUFDVCxZQUFNLElBQUl4QixvQkFBSixDQUNELFFBQU9VLE1BQU0sQ0FBQ0UsSUFBSyxlQURsQixFQUVGQyxHQUZFLEVBR0QsY0FBYUYsU0FBVSxPQUh0QixDQUFOO0FBSUg7O0FBRUQsUUFBSUUsR0FBRyxHQUFHLElBQUlaLFNBQUosQ0FBY00sTUFBZCxFQUFzQkcsTUFBTSxDQUFDRSxJQUE3QixFQUFtQ0QsU0FBbkMsRUFBOENRLE9BQTlDLEVBQXVETCxPQUF2RCxDQUFWO0FBQ0FELElBQUFBLEdBQUcsQ0FBQ2dCLFFBQUosR0FBZW5CLE1BQU0sQ0FBQ21CLFFBQVAsSUFBbUIsRUFBbEM7QUFFQSxRQUFJQyxZQUFZLEdBQUdqQyxJQUFJLENBQUNrQyxRQUFMLENBQWN4QixNQUFNLENBQUN5QixXQUFyQixFQUFrQ2IsT0FBbEMsQ0FBbkI7QUFDQVosSUFBQUEsTUFBTSxDQUFDMEIsR0FBUCxDQUFXLFNBQVgsRUFBdUIsZ0JBQWVwQixHQUFHLENBQUNELElBQUssV0FBVWtCLFlBQWEsT0FBdEU7QUFFQSxVQUFNakIsR0FBRyxDQUFDcUIsTUFBSixFQUFOO0FBRUEzQixJQUFBQSxNQUFNLENBQUMwQixHQUFQLENBQVcsU0FBWCxFQUF1QixRQUFPcEIsR0FBRyxDQUFDRCxJQUFLLGNBQXZDO0FBR0FMLElBQUFBLE1BQU0sQ0FBQzRCLEVBQVAsQ0FBVSxXQUFXeEMsT0FBTyxDQUFDVSxNQUE3QixFQUFxQyxNQUFNO0FBQ3ZDRSxNQUFBQSxNQUFNLENBQUM2QixRQUFQLENBQWdCekIsU0FBaEIsRUFBMkJFLEdBQTNCO0FBQ0gsS0FGRDtBQUdILEdBM0NnQztBQWRwQixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSByb3V0aW5nIHdlYiByZXF1ZXN0cyB0byBhIGNoaWxkIGFwcC5cbiAqIEBtb2R1bGUgRmVhdHVyZV9BcHBSb3V0aW5nXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAgXG4gKiAgJ2FwcFJvdXRpbmcnOiB7XG4gKiAgICAgICc8bW91bnRpbmcgcG9pbnQ+Jzoge1xuICogICAgICAgICAgbmFtZTogJ2FwcCBuYW1lJywgXG4gKiAgICAgICAgICBucG1Nb2R1bGU6IGZhbHNlLCAvLyB3aGV0aGVyIGlzIGEgbnBtIG1vZHVsZVxuICogICAgICAgICAgb3B0aW9uczogeyAvLyBtb2R1bGUgb3B0aW9ucyBcbiAqICAgICAgICAgIH0sXG4gKiAgICAgICAgICBzZXR0aW5nczogeyAvLyBjYW4gYmUgcmVmZXJlbmNlZCBpbiBjb25maWcgZmlsZVxuICogICAgICAgICAgfVxuICogICAgICB9XG4gKiAgfSBcbiAqL1xuXG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IFByb21pc2UgPSBVdGlsLlByb21pc2U7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcbmNvbnN0IFdlYk1vZHVsZSA9IHJlcXVpcmUoJy4uL1dlYk1vZHVsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgcGx1Z2luIHN0YWdlLlxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlBMVUdJTixcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlciAtIFRoZSB3ZWIgc2VydmVyIG1vZHVsZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJvdXRlcyAtIFJvdXRlcyBhbmQgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChzZXJ2ZXIsIHJvdXRlcykgPT4gVXRpbC5lYWNoQXN5bmNfKHJvdXRlcywgYXN5bmMgKGNvbmZpZywgYmFzZVJvdXRlKSA9PiB7XG4gICAgICAgIGlmICghY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAnTWlzc2luZyBhcHAgbmFtZS4nLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICBgYXBwUm91dGluZy4ke2Jhc2VSb3V0ZX0ubmFtZWApO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IFxuICAgICAgICAgICAgZW52OiBzZXJ2ZXIuZW52LCBcbiAgICAgICAgICAgIGxvZ1dpdGhBcHBOYW1lOiBzZXJ2ZXIub3B0aW9ucy5sb2dXaXRoQXBwTmFtZSBcbiAgICAgICAgfSwgY29uZmlnLm9wdGlvbnMpO1xuXG4gICAgICAgIGxldCBhcHBQYXRoOyAgICAgXG5cbiAgICAgICAgaWYgKGNvbmZpZy5ucG1Nb2R1bGUpIHtcbiAgICAgICAgICAgIGFwcFBhdGggPSBzZXJ2ZXIudG9BYnNvbHV0ZVBhdGgoJ25vZGVfbW9kdWxlcycsIGNvbmZpZy5uYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcFBhdGggPSBwYXRoLmpvaW4oc2VydmVyLmFwcE1vZHVsZXNQYXRoLCBjb25maWcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZXhpc3RzID0gYXdhaXQgVXRpbC5mcy5wYXRoRXhpc3RzKGFwcFBhdGgpICYmIChhd2FpdCBVdGlsLmZzLnN0YXQoYXBwUGF0aCkpLmlzRGlyZWN0b3J5KCk7XG4gICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgYEFwcCBbJHtjb25maWcubmFtZX1dIG5vdCBleGlzdHMuYCxcbiAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgYGFwcFJvdXRpbmcuJHtiYXNlUm91dGV9Lm5hbWVgKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsZXQgYXBwID0gbmV3IFdlYk1vZHVsZShzZXJ2ZXIsIGNvbmZpZy5uYW1lLCBiYXNlUm91dGUsIGFwcFBhdGgsIG9wdGlvbnMpO1xuICAgICAgICBhcHAuc2V0dGluZ3MgPSBjb25maWcuc2V0dGluZ3MgfHwge307XG5cbiAgICAgICAgbGV0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoc2VydmVyLndvcmtpbmdQYXRoLCBhcHBQYXRoKTtcbiAgICAgICAgc2VydmVyLmxvZygndmVyYm9zZScsIGBMb2FkaW5nIGFwcCBbJHthcHAubmFtZX1dIGZyb20gXCIke3JlbGF0aXZlUGF0aH1cIiAuLi5gKTtcbiAgICBcbiAgICAgICAgYXdhaXQgYXBwLnN0YXJ0XygpO1xuICAgICAgICBcbiAgICAgICAgc2VydmVyLmxvZygndmVyYm9zZScsIGBBcHAgWyR7YXBwLm5hbWV9XSBpcyBsb2FkZWQuYCk7XG5cbiAgICAgICAgLy9kZWxheWVkIHRoZSBhcHAgcm91dGVzIG1vdW50aW5nIGFmdGVyIGFsbCBwbHVnaW5zIG9mIHRoZSBzZXJ2ZXIgYXJlIGxvYWRlZFxuICAgICAgICBzZXJ2ZXIub24oJ2FmdGVyOicgKyBGZWF0dXJlLlBMVUdJTiwgKCkgPT4ge1xuICAgICAgICAgICAgc2VydmVyLm1vdW50QXBwKGJhc2VSb3V0ZSwgYXBwKTtcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9KVxufTsiXX0=