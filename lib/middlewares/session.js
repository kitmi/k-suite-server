"use strict";

require("source-map-support/register");

const session = require('koa-session');

const {
  InvalidConfiguration
} = require('../Errors');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const DEFAULT_OPTS = {
  key: 'k-server.sid',
  prefix: 'k-server:sess:'
};

module.exports = (options, app) => {
  let store = options.store || {
    type: 'memory'
  };

  if (!store.type) {
    throw new InvalidConfiguration('Missing session store type.', app, 'middlewares.session.store');
  }

  let storeObject;
  let opt = store.options || {};

  if (store.dataSource) {
    let dsService = app.getService(store.dataSource);
    Object.assign(opt, {
      url: dsService.connectionString
    });
  }

  console.log(opt);

  switch (store.type) {
    case 'redis':
      storeObject = tryRequire('koa-redis')(opt);
      break;

    case 'mysql':
      storeObject = tryRequire('koa-mysql-session')(opt);
      break;

    case 'mongodb':
      const MongoStore = tryRequire('koa-generic-session-mongo');
      storeObject = new MongoStore(opt);
      break;

    case 'pgsql':
      storeObject = tryRequire('koa-pg-session')(opt);
      break;

    case 'sqlite3':
      storeObject = tryRequire('koa-sqlite3-session')(opt);
      break;

    case 'memory':
      const MemoryStore = tryRequire('koa-session-memory');
      storeObject = new MemoryStore();
      break;

    default:
      throw new Mowa.Error.InvalidConfiguration('Unsupported session store type: ' + store.type, app, 'middlewares.session.store.type');
  }

  let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {
    store: storeObject
  });
  return session(sessionOptions, app.server.koa);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbInNlc3Npb24iLCJyZXF1aXJlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJ0cnlSZXF1aXJlIiwiREVGQVVMVF9PUFRTIiwia2V5IiwicHJlZml4IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJhcHAiLCJzdG9yZSIsInR5cGUiLCJzdG9yZU9iamVjdCIsIm9wdCIsImRhdGFTb3VyY2UiLCJkc1NlcnZpY2UiLCJnZXRTZXJ2aWNlIiwiT2JqZWN0IiwiYXNzaWduIiwidXJsIiwiY29ubmVjdGlvblN0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJNb25nb1N0b3JlIiwiTWVtb3J5U3RvcmUiLCJNb3dhIiwiRXJyb3IiLCJzZXNzaW9uT3B0aW9ucyIsInNlcnZlciIsImtvYSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkQsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWlCRixPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBRUEsTUFBTUcsWUFBWSxHQUFHO0FBQ2pCQyxFQUFBQSxHQUFHLEVBQUUsY0FEWTtBQUVqQkMsRUFBQUEsTUFBTSxFQUFFO0FBRlMsQ0FBckI7O0FBdUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsT0FBRCxFQUFVQyxHQUFWLEtBQWtCO0FBRS9CLE1BQUlDLEtBQUssR0FBR0YsT0FBTyxDQUFDRSxLQUFSLElBQWlCO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQTdCOztBQUVBLE1BQUksQ0FBQ0QsS0FBSyxDQUFDQyxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJVixvQkFBSixDQUNGLDZCQURFLEVBRUZRLEdBRkUsRUFHRiwyQkFIRSxDQUFOO0FBS0g7O0FBRUQsTUFBSUcsV0FBSjtBQUVBLE1BQUlDLEdBQUcsR0FBR0gsS0FBSyxDQUFDRixPQUFOLElBQWlCLEVBQTNCOztBQUVBLE1BQUlFLEtBQUssQ0FBQ0ksVUFBVixFQUFzQjtBQUNsQixRQUFJQyxTQUFTLEdBQUdOLEdBQUcsQ0FBQ08sVUFBSixDQUFlTixLQUFLLENBQUNJLFVBQXJCLENBQWhCO0FBQ0FHLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTCxHQUFkLEVBQW1CO0FBQUVNLE1BQUFBLEdBQUcsRUFBRUosU0FBUyxDQUFDSztBQUFqQixLQUFuQjtBQUNIOztBQUVEQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVQsR0FBWjs7QUFFQSxVQUFRSCxLQUFLLENBQUNDLElBQWQ7QUFDSSxTQUFLLE9BQUw7QUFDSUMsTUFBQUEsV0FBVyxHQUFHVixVQUFVLENBQUMsV0FBRCxDQUFWLENBQXdCVyxHQUF4QixDQUFkO0FBQ0E7O0FBQ0osU0FBSyxPQUFMO0FBQ0lELE1BQUFBLFdBQVcsR0FBR1YsVUFBVSxDQUFDLG1CQUFELENBQVYsQ0FBZ0NXLEdBQWhDLENBQWQ7QUFDQTs7QUFDSixTQUFLLFNBQUw7QUFDSSxZQUFNVSxVQUFVLEdBQUdyQixVQUFVLENBQUMsMkJBQUQsQ0FBN0I7QUFDQVUsTUFBQUEsV0FBVyxHQUFHLElBQUlXLFVBQUosQ0FBZVYsR0FBZixDQUFkO0FBQ0E7O0FBQ0osU0FBSyxPQUFMO0FBQ0lELE1BQUFBLFdBQVcsR0FBR1YsVUFBVSxDQUFDLGdCQUFELENBQVYsQ0FBNkJXLEdBQTdCLENBQWQ7QUFDQTs7QUFDSixTQUFLLFNBQUw7QUFDSUQsTUFBQUEsV0FBVyxHQUFHVixVQUFVLENBQUMscUJBQUQsQ0FBVixDQUFrQ1csR0FBbEMsQ0FBZDtBQUNBOztBQUNKLFNBQUssUUFBTDtBQUNJLFlBQU1XLFdBQVcsR0FBR3RCLFVBQVUsQ0FBQyxvQkFBRCxDQUE5QjtBQUNBVSxNQUFBQSxXQUFXLEdBQUcsSUFBSVksV0FBSixFQUFkO0FBQ0E7O0FBQ0o7QUFDSSxZQUFNLElBQUlDLElBQUksQ0FBQ0MsS0FBTCxDQUFXekIsb0JBQWYsQ0FDRixxQ0FBcUNTLEtBQUssQ0FBQ0MsSUFEekMsRUFFRkYsR0FGRSxFQUdGLGdDQUhFLENBQU47QUF0QlI7O0FBNkJBLE1BQUlrQixjQUFjLEdBQUdWLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JmLFlBQWxCLEVBQWdDSyxPQUFoQyxFQUF5QztBQUFDRSxJQUFBQSxLQUFLLEVBQUVFO0FBQVIsR0FBekMsQ0FBckI7QUFFQSxTQUFPYixPQUFPLENBQUM0QixjQUFELEVBQWlCbEIsR0FBRyxDQUFDbUIsTUFBSixDQUFXQyxHQUE1QixDQUFkO0FBQ0gsQ0F2REQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTZXNzaW9uIG1pZGRsZXdhcmVcbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9TZXNzaW9uXG4gKi9cblxuY29uc3Qgc2Vzc2lvbiA9IHJlcXVpcmUoJ2tvYS1zZXNzaW9uJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi91dGlscy9IZWxwZXJzJyk7XG5cbmNvbnN0IERFRkFVTFRfT1BUUyA9IHtcbiAgICBrZXk6ICdrLXNlcnZlci5zaWQnLFxuICAgIHByZWZpeDogJ2stc2VydmVyOnNlc3M6J1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHNlc3Npb24gbWlkZGxld2FyZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBTZXNzaW9uIG9wdGlvbnMgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMua2V5PSdtb3dhOnNpZCddIC0gQ29va2llIG5hbWUgZGVmYXVsdGluZyB0byBtb3dhLnNpZCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5wcmVmaXg9J21vd2E6c2VzczonXSAtIFNlc3Npb24gcHJlZml4IGZvciBzdG9yZSwgZGVmYXVsdGluZyB0byBtb3dhOnNlc3M6XG4gKiBAcHJvcGVydHkge251bWJlcn0gW29wdGlvbnMubWF4QWdlXSAtIFNlc3Npb25TdG9yZSdzIGV4cGlyYXRpb24gdGltZSAobXMpLCBkZWZhdWx0aW5nIHRvIDg2NDAwMDAwICgxIGRheSlcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuYXV0b0NvbW1pdD10cnVlXSAtIEF1dG9tYXRpY2FsbHkgY29tbWl0IGhlYWRlcnMgKGRlZmF1bHQgdHJ1ZSlcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMub3ZlcndyaXRlPXRydWVdIC0gQ2FuIG92ZXJ3cml0ZSBvciBub3QgKGRlZmF1bHQgdHJ1ZSkgXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmh0dHBPbmx5PXRydWVdIC0gSHR0cE9ubHkgb3Igbm90IChkZWZhdWx0IHRydWUpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnNpZ25lZD10cnVlXSAtIFNpZ25lZCBvciBub3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMucm9sbGluZz1mYWxzZV0gLSBGb3JjZSBhIHNlc3Npb24gaWRlbnRpZmllciBjb29raWUgdG8gYmUgc2V0IG9uIGV2ZXJ5IHJlc3BvbnNlLiBUaGUgZXhwaXJhdGlvbiBpcyByZXNldCB0byB0aGUgb3JpZ2luYWwgbWF4QWdlLCByZXNldHRpbmcgdGhlIGV4cGlyYXRpb24gY291bnRkb3duLiAoZGVmYXVsdCBpcyBmYWxzZSkgXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnJlbmV3PWZhbHNlXSAtIFJlbmV3IHNlc3Npb24gd2hlbiBzZXNzaW9uIGlzIG5lYXJseSBleHBpcmVkLCBzbyB3ZSBjYW4gYWx3YXlzIGtlZXAgdXNlciBsb2dnZWQgaW4uIChkZWZhdWx0IGlzIGZhbHNlKVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29wdGlvbnMuZ2VuU2lkXSAtIFRoZSB3YXkgb2YgZ2VuZXJhdGluZyBleHRlcm5hbCBzZXNzaW9uIGlkIGlzIGNvbnRyb2xsZWQgYnkgdGhlIG9wdGlvbnMuZ2VuaWQsIHdoaWNoIGRlZmF1bHRzIHRvIERhdGUubm93KCkgKyAnLScgKyB1aWQuc3luYygyNClcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLnZhbGlkXSAtIHZhbGlkKGN0eCwgc2Vzc2lvbiksIHZhbGlkIHNlc3Npb24gdmFsdWUgYmVmb3JlIHVzZSBpdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29wdGlvbnMuYmVmb3JlU2F2ZV0gLSBiZWZvcmVTYXZlKGN0eCwgc2Vzc2lvbiksIGhvb2sgYmVmb3JlIHNhdmUgc2Vzc2lvblxuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHRpb25zLnN0b3JlXSAtIFNlc3Npb24gc3RvcmUgaW5zdGFuY2UuIEl0IGNhbiBiZSBhbnkgT2JqZWN0IHRoYXQgaGFzIHRoZSBtZXRob2RzIHNldCwgZ2V0LCBkZXN0cm95IGxpa2UgTWVtb3J5U3RvcmUuXG4gKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHAgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMsIGFwcCkgPT4ge1xuXG4gICAgbGV0IHN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCB7IHR5cGU6ICdtZW1vcnknIH07XG5cbiAgICBpZiAoIXN0b3JlLnR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc2Vzc2lvbiBzdG9yZSB0eXBlLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAnbWlkZGxld2FyZXMuc2Vzc2lvbi5zdG9yZSdcbiAgICAgICAgKTsgICAgICAgIFxuICAgIH1cblxuICAgIGxldCBzdG9yZU9iamVjdDtcblxuICAgIGxldCBvcHQgPSBzdG9yZS5vcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKHN0b3JlLmRhdGFTb3VyY2UpIHtcbiAgICAgICAgbGV0IGRzU2VydmljZSA9IGFwcC5nZXRTZXJ2aWNlKHN0b3JlLmRhdGFTb3VyY2UpO1xuICAgICAgICBPYmplY3QuYXNzaWduKG9wdCwgeyB1cmw6IGRzU2VydmljZS5jb25uZWN0aW9uU3RyaW5nIH0pO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKG9wdCk7XG5cbiAgICBzd2l0Y2ggKHN0b3JlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVkaXMnOlxuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSB0cnlSZXF1aXJlKCdrb2EtcmVkaXMnKShvcHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ215c3FsJzpcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gdHJ5UmVxdWlyZSgna29hLW15c3FsLXNlc3Npb24nKShvcHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vbmdvZGInOlxuICAgICAgICAgICAgY29uc3QgTW9uZ29TdG9yZSA9IHRyeVJlcXVpcmUoJ2tvYS1nZW5lcmljLXNlc3Npb24tbW9uZ28nKTtcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gbmV3IE1vbmdvU3RvcmUob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZ3NxbCc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHRyeVJlcXVpcmUoJ2tvYS1wZy1zZXNzaW9uJykob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzcWxpdGUzJzpcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gdHJ5UmVxdWlyZSgna29hLXNxbGl0ZTMtc2Vzc2lvbicpKG9wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWVtb3J5JzpcbiAgICAgICAgICAgIGNvbnN0IE1lbW9yeVN0b3JlID0gdHJ5UmVxdWlyZSgna29hLXNlc3Npb24tbWVtb3J5Jyk7XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IG5ldyBNZW1vcnlTdG9yZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW93YS5FcnJvci5JbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAnVW5zdXBwb3J0ZWQgc2Vzc2lvbiBzdG9yZSB0eXBlOiAnICsgc3RvcmUudHlwZSxcbiAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgJ21pZGRsZXdhcmVzLnNlc3Npb24uc3RvcmUudHlwZSdcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHNlc3Npb25PcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRTLCBvcHRpb25zLCB7c3RvcmU6IHN0b3JlT2JqZWN0fSk7XG5cbiAgICByZXR1cm4gc2Vzc2lvbihzZXNzaW9uT3B0aW9ucywgYXBwLnNlcnZlci5rb2EpO1xufTsiXX0=