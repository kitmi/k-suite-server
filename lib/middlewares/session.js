"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const session = require('koa-session');

const {
  InvalidConfiguration
} = require('../Errors');

const DEFAULT_OPTS = {
  key: 'k-server.sid',
  prefix: 'k-server:sess:'
};

module.exports = (options, app) => {
  let store = options.store || {
    type: 'memory'
  };

  if (!store.type) {
    throw new InvalidConfiguration('Missing session store type.', app, 'middlewares.session.store');
  }

  let storeObject;

  switch (store.type) {
    case 'redis':
      storeObject = require('koa-redis')(store.options);
      break;

    case 'mysql':
      storeObject = require('koa-mysql-session')(store.options);
      break;

    case 'mongodb':
      storeObject = require('koa-generic-session-mongo')(store.options);
      break;

    case 'pgsql':
      storeObject = require('koa-pg-session')(store.options);
      break;

    case 'sqlite3':
      storeObject = require('koa-sqlite3-session')(store.options);
      break;

    case 'memory':
      const MemoryStore = require('koa-session-memory');

      storeObject = new MemoryStore();
      break;

    default:
      throw new Mowa.Error.InvalidConfiguration('Unsupported session store type: ' + store.type, app, 'middlewares.session.store.type');
  }

  let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {
    store: storeObject
  });
  return session(sessionOptions, app.server.koa);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwic2Vzc2lvbiIsIkludmFsaWRDb25maWd1cmF0aW9uIiwiREVGQVVMVF9PUFRTIiwia2V5IiwicHJlZml4IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJhcHAiLCJzdG9yZSIsInR5cGUiLCJzdG9yZU9iamVjdCIsIk1lbW9yeVN0b3JlIiwiTW93YSIsIkVycm9yIiwic2Vzc2lvbk9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJzZXJ2ZXIiLCJrb2EiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUEyQkYsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBRUEsTUFBTUcsWUFBWSxHQUFHO0FBQ2pCQyxFQUFBQSxHQUFHLEVBQUUsY0FEWTtBQUVqQkMsRUFBQUEsTUFBTSxFQUFFO0FBRlMsQ0FBckI7O0FBdUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsT0FBRCxFQUFVQyxHQUFWLEtBQWtCO0FBRS9CLE1BQUlDLEtBQUssR0FBR0YsT0FBTyxDQUFDRSxLQUFSLElBQWlCO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQTdCOztBQUVBLE1BQUksQ0FBQ0QsS0FBSyxDQUFDQyxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJVCxvQkFBSixDQUNGLDZCQURFLEVBRUZPLEdBRkUsRUFHRiwyQkFIRSxDQUFOO0FBS0g7O0FBRUQsTUFBSUcsV0FBSjs7QUFFQSxVQUFRRixLQUFLLENBQUNDLElBQWQ7QUFDSSxTQUFLLE9BQUw7QUFDSUMsTUFBQUEsV0FBVyxHQUFHWixPQUFPLENBQUMsV0FBRCxDQUFQLENBQXFCVSxLQUFLLENBQUNGLE9BQTNCLENBQWQ7QUFDQTs7QUFDSixTQUFLLE9BQUw7QUFDSUksTUFBQUEsV0FBVyxHQUFHWixPQUFPLENBQUMsbUJBQUQsQ0FBUCxDQUE2QlUsS0FBSyxDQUFDRixPQUFuQyxDQUFkO0FBQ0E7O0FBQ0osU0FBSyxTQUFMO0FBQ0lJLE1BQUFBLFdBQVcsR0FBR1osT0FBTyxDQUFDLDJCQUFELENBQVAsQ0FBcUNVLEtBQUssQ0FBQ0YsT0FBM0MsQ0FBZDtBQUNBOztBQUNKLFNBQUssT0FBTDtBQUNJSSxNQUFBQSxXQUFXLEdBQUdaLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCVSxLQUFLLENBQUNGLE9BQWhDLENBQWQ7QUFDQTs7QUFDSixTQUFLLFNBQUw7QUFDSUksTUFBQUEsV0FBVyxHQUFHWixPQUFPLENBQUMscUJBQUQsQ0FBUCxDQUErQlUsS0FBSyxDQUFDRixPQUFyQyxDQUFkO0FBQ0E7O0FBQ0osU0FBSyxRQUFMO0FBQ0ksWUFBTUssV0FBVyxHQUFHYixPQUFPLENBQUMsb0JBQUQsQ0FBM0I7O0FBQ0FZLE1BQUFBLFdBQVcsR0FBRyxJQUFJQyxXQUFKLEVBQWQ7QUFDQTs7QUFDSjtBQUNJLFlBQU0sSUFBSUMsSUFBSSxDQUFDQyxLQUFMLENBQVdiLG9CQUFmLENBQ0YscUNBQXFDUSxLQUFLLENBQUNDLElBRHpDLEVBRUZGLEdBRkUsRUFHRixnQ0FIRSxDQUFOO0FBckJSOztBQTRCQSxNQUFJTyxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JmLFlBQWxCLEVBQWdDSyxPQUFoQyxFQUF5QztBQUFDRSxJQUFBQSxLQUFLLEVBQUVFO0FBQVIsR0FBekMsQ0FBckI7QUFFQSxTQUFPWCxPQUFPLENBQUNlLGNBQUQsRUFBaUJQLEdBQUcsQ0FBQ1UsTUFBSixDQUFXQyxHQUE1QixDQUFkO0FBQ0gsQ0E3Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTZXNzaW9uIG1pZGRsZXdhcmVcbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9TZXNzaW9uXG4gKi9cblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBzZXNzaW9uID0gcmVxdWlyZSgna29hLXNlc3Npb24nKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gICAga2V5OiAnay1zZXJ2ZXIuc2lkJyxcbiAgICBwcmVmaXg6ICdrLXNlcnZlcjpzZXNzOidcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBzZXNzaW9uIG1pZGRsZXdhcmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gU2Vzc2lvbiBvcHRpb25zIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmtleT0nbW93YTpzaWQnXSAtIENvb2tpZSBuYW1lIGRlZmF1bHRpbmcgdG8gbW93YS5zaWQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucHJlZml4PSdtb3dhOnNlc3M6J10gLSBTZXNzaW9uIHByZWZpeCBmb3Igc3RvcmUsIGRlZmF1bHRpbmcgdG8gbW93YTpzZXNzOlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtvcHRpb25zLm1heEFnZV0gLSBTZXNzaW9uU3RvcmUncyBleHBpcmF0aW9uIHRpbWUgKG1zKSwgZGVmYXVsdGluZyB0byA4NjQwMDAwMCAoMSBkYXkpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmF1dG9Db21taXQ9dHJ1ZV0gLSBBdXRvbWF0aWNhbGx5IGNvbW1pdCBoZWFkZXJzIChkZWZhdWx0IHRydWUpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm92ZXJ3cml0ZT10cnVlXSAtIENhbiBvdmVyd3JpdGUgb3Igbm90IChkZWZhdWx0IHRydWUpIFxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5odHRwT25seT10cnVlXSAtIEh0dHBPbmx5IG9yIG5vdCAoZGVmYXVsdCB0cnVlKVxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5zaWduZWQ9dHJ1ZV0gLSBTaWduZWQgb3Igbm90XG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnJvbGxpbmc9ZmFsc2VdIC0gRm9yY2UgYSBzZXNzaW9uIGlkZW50aWZpZXIgY29va2llIHRvIGJlIHNldCBvbiBldmVyeSByZXNwb25zZS4gVGhlIGV4cGlyYXRpb24gaXMgcmVzZXQgdG8gdGhlIG9yaWdpbmFsIG1heEFnZSwgcmVzZXR0aW5nIHRoZSBleHBpcmF0aW9uIGNvdW50ZG93bi4gKGRlZmF1bHQgaXMgZmFsc2UpIFxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5yZW5ldz1mYWxzZV0gLSBSZW5ldyBzZXNzaW9uIHdoZW4gc2Vzc2lvbiBpcyBuZWFybHkgZXhwaXJlZCwgc28gd2UgY2FuIGFsd2F5cyBrZWVwIHVzZXIgbG9nZ2VkIGluLiAoZGVmYXVsdCBpcyBmYWxzZSlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLmdlblNpZF0gLSBUaGUgd2F5IG9mIGdlbmVyYXRpbmcgZXh0ZXJuYWwgc2Vzc2lvbiBpZCBpcyBjb250cm9sbGVkIGJ5IHRoZSBvcHRpb25zLmdlbmlkLCB3aGljaCBkZWZhdWx0cyB0byBEYXRlLm5vdygpICsgJy0nICsgdWlkLnN5bmMoMjQpXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb3B0aW9ucy52YWxpZF0gLSB2YWxpZChjdHgsIHNlc3Npb24pLCB2YWxpZCBzZXNzaW9uIHZhbHVlIGJlZm9yZSB1c2UgaXRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLmJlZm9yZVNhdmVdIC0gYmVmb3JlU2F2ZShjdHgsIHNlc3Npb24pLCBob29rIGJlZm9yZSBzYXZlIHNlc3Npb25cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9ucy5zdG9yZV0gLSBTZXNzaW9uIHN0b3JlIGluc3RhbmNlLiBJdCBjYW4gYmUgYW55IE9iamVjdCB0aGF0IGhhcyB0aGUgbWV0aG9kcyBzZXQsIGdldCwgZGVzdHJveSBsaWtlIE1lbW9yeVN0b3JlLlxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwIFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChvcHRpb25zLCBhcHApID0+IHtcblxuICAgIGxldCBzdG9yZSA9IG9wdGlvbnMuc3RvcmUgfHwgeyB0eXBlOiAnbWVtb3J5JyB9O1xuXG4gICAgaWYgKCFzdG9yZS50eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdNaXNzaW5nIHNlc3Npb24gc3RvcmUgdHlwZS4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgJ21pZGRsZXdhcmVzLnNlc3Npb24uc3RvcmUnXG4gICAgICAgICk7ICAgICAgICBcbiAgICB9XG5cbiAgICBsZXQgc3RvcmVPYmplY3Q7XG5cbiAgICBzd2l0Y2ggKHN0b3JlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVkaXMnOlxuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSByZXF1aXJlKCdrb2EtcmVkaXMnKShzdG9yZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdteXNxbCc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHJlcXVpcmUoJ2tvYS1teXNxbC1zZXNzaW9uJykoc3RvcmUub3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9uZ29kYic6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHJlcXVpcmUoJ2tvYS1nZW5lcmljLXNlc3Npb24tbW9uZ28nKShzdG9yZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZ3NxbCc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHJlcXVpcmUoJ2tvYS1wZy1zZXNzaW9uJykoc3RvcmUub3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3FsaXRlMyc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHJlcXVpcmUoJ2tvYS1zcWxpdGUzLXNlc3Npb24nKShzdG9yZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtZW1vcnknOlxuICAgICAgICAgICAgY29uc3QgTWVtb3J5U3RvcmUgPSByZXF1aXJlKCdrb2Etc2Vzc2lvbi1tZW1vcnknKTtcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gbmV3IE1lbW9yeVN0b3JlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBNb3dhLkVycm9yLkludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBzZXNzaW9uIHN0b3JlIHR5cGU6ICcgKyBzdG9yZS50eXBlLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAnbWlkZGxld2FyZXMuc2Vzc2lvbi5zdG9yZS50eXBlJ1xuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVFMsIG9wdGlvbnMsIHtzdG9yZTogc3RvcmVPYmplY3R9KTtcblxuICAgIHJldHVybiBzZXNzaW9uKHNlc3Npb25PcHRpb25zLCBhcHAuc2VydmVyLmtvYSk7XG59OyJdfQ==