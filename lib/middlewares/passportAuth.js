"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration,
  BadRequest
} = require('../Errors');

let createMiddleware = (opt, app) => {
  if (!opt || !opt.strategy) {
    throw new InvalidConfiguration('Missing strategy name.', app, 'middlewares.passportAuth.strategy');
  }

  let passportService = app.getService('passport');

  if (!passportService) {
    throw new InvalidConfiguration('Passport feature is not enabled.', app, 'passport');
  }

  if (opt.customHandler) {
    return (ctx, next) => passportService.authenticate(opt.strategy, opt.options, (err, user, info) => {
      if (err) {
        throw err;
      }

      if (!user) {
        if (info instanceof Error) {
          throw info;
        }

        throw new BadRequest(info || `Invalid credential.`);
      }

      return ctx.login(user, opt && opt.options || {
        session: false
      }).then(next);
    })(ctx, next);
  }

  return passportService.authenticate(opt.strategy, opt.options);
};

module.exports = createMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9wYXNzcG9ydEF1dGguanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJvcHQiLCJhcHAiLCJzdHJhdGVneSIsInBhc3Nwb3J0U2VydmljZSIsImdldFNlcnZpY2UiLCJjdXN0b21IYW5kbGVyIiwiY3R4IiwibmV4dCIsImF1dGhlbnRpY2F0ZSIsIm9wdGlvbnMiLCJlcnIiLCJ1c2VyIiwiaW5mbyIsIkVycm9yIiwibG9naW4iLCJzZXNzaW9uIiwidGhlbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxvQkFBRjtBQUF3QkMsRUFBQUE7QUFBeEIsSUFBdUNDLE9BQU8sQ0FBQyxXQUFELENBQXBEOztBQWdCQSxJQUFJQyxnQkFBZ0IsR0FBRyxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNqQyxNQUFJLENBQUNELEdBQUQsSUFBUSxDQUFDQSxHQUFHLENBQUNFLFFBQWpCLEVBQTJCO0FBQ3ZCLFVBQU0sSUFBSU4sb0JBQUosQ0FDRix3QkFERSxFQUVGSyxHQUZFLEVBR0YsbUNBSEUsQ0FBTjtBQUtIOztBQUVELE1BQUlFLGVBQWUsR0FBR0YsR0FBRyxDQUFDRyxVQUFKLENBQWUsVUFBZixDQUF0Qjs7QUFFQSxNQUFJLENBQUNELGVBQUwsRUFBc0I7QUFDbEIsVUFBTSxJQUFJUCxvQkFBSixDQUNGLGtDQURFLEVBRUZLLEdBRkUsRUFHRixVQUhFLENBQU47QUFLSDs7QUFFRCxNQUFJRCxHQUFHLENBQUNLLGFBQVIsRUFBdUI7QUFDbkIsV0FBTyxDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZUosZUFBZSxDQUFDSyxZQUFoQixDQUE2QlIsR0FBRyxDQUFDRSxRQUFqQyxFQUEyQ0YsR0FBRyxDQUFDUyxPQUEvQyxFQUF3RCxDQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBWUMsSUFBWixLQUFxQjtBQUMzRixVQUFJRixHQUFKLEVBQVM7QUFDTCxjQUFNQSxHQUFOO0FBQ0g7O0FBRUQsVUFBSSxDQUFDQyxJQUFMLEVBQVc7QUFDUCxZQUFJQyxJQUFJLFlBQVlDLEtBQXBCLEVBQTJCO0FBQ3ZCLGdCQUFNRCxJQUFOO0FBQ0g7O0FBRUQsY0FBTSxJQUFJZixVQUFKLENBQWVlLElBQUksSUFBSyxxQkFBeEIsQ0FBTjtBQUNIOztBQUVELGFBQU9OLEdBQUcsQ0FBQ1EsS0FBSixDQUFVSCxJQUFWLEVBQWlCWCxHQUFHLElBQUlBLEdBQUcsQ0FBQ1MsT0FBWixJQUF3QjtBQUFFTSxRQUFBQSxPQUFPLEVBQUU7QUFBWCxPQUF4QyxFQUE0REMsSUFBNUQsQ0FBaUVULElBQWpFLENBQVA7QUFDUCxLQWRxQixFQWNuQkQsR0FkbUIsRUFjZEMsSUFkYyxDQUF0QjtBQWVIOztBQUVELFNBQU9KLGVBQWUsQ0FBQ0ssWUFBaEIsQ0FBNkJSLEdBQUcsQ0FBQ0UsUUFBakMsRUFBMkNGLEdBQUcsQ0FBQ1MsT0FBL0MsQ0FBUDtBQUNILENBdENEOztBQXdDQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkIsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24sIEJhZFJlcXVlc3QgfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIFBhc3Nwb3J0IGluaXRpYWxpemF0aW9uIG1pZGRsZXdhcmUsIHJlcXVpcmVkIHRvIGluaXRpYWxpemUgUGFzc3BvcnQgc2VydmljZS5cbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9QYXNzcG9ydEF1dGhcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIHBhc3Nwb3J0IGF1dGhlbnRpY2F0aW9uIG1pZGRsZXdhcmUuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0IC0gUGFzc3BvcnQgb3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdC5zdHJhdGVneSAtIFBhc3Nwb3J0IHN0cmF0ZWd5XG4gKiBAcHJvcGVydHkge29iamVjdH0gW29wdC5vcHRpb25zXSAtIFBhc3Nwb3J0IHN0cmF0ZWd5IG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0LmN1c3RvbUhhbmRsZXJdIC0gRmxhZyB0byB1c2UgcGFzc3BvcnQgc3RyYXRlZ3kgY3VzdG9tSGFuZGxlciBcbiAqIEBwYXJhbSB7Um91dGFibGV9IGFwcFxuICogQHJldHVybnMge0tvYUFjdGlvbkZ1bmN0aW9ufVxuICovXG5sZXQgY3JlYXRlTWlkZGxld2FyZSA9IChvcHQsIGFwcCkgPT4ge1xuICAgIGlmICghb3B0IHx8ICFvcHQuc3RyYXRlZ3kpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc3RyYXRlZ3kgbmFtZS4nLCBcbiAgICAgICAgICAgIGFwcCwgXG4gICAgICAgICAgICAnbWlkZGxld2FyZXMucGFzc3BvcnRBdXRoLnN0cmF0ZWd5J1xuICAgICAgICApO1xuICAgIH0gICAgXG4gICAgXG4gICAgbGV0IHBhc3Nwb3J0U2VydmljZSA9IGFwcC5nZXRTZXJ2aWNlKCdwYXNzcG9ydCcpO1xuXG4gICAgaWYgKCFwYXNzcG9ydFNlcnZpY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ1Bhc3Nwb3J0IGZlYXR1cmUgaXMgbm90IGVuYWJsZWQuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICdwYXNzcG9ydCdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0LmN1c3RvbUhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIChjdHgsIG5leHQpID0+IHBhc3Nwb3J0U2VydmljZS5hdXRoZW50aWNhdGUob3B0LnN0cmF0ZWd5LCBvcHQub3B0aW9ucywgKGVyciwgdXNlciwgaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbmZvO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdChpbmZvIHx8IGBJbnZhbGlkIGNyZWRlbnRpYWwuYCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5sb2dpbih1c2VyLCAob3B0ICYmIG9wdC5vcHRpb25zKSB8fCB7IHNlc3Npb246IGZhbHNlIH0pLnRoZW4obmV4dCk7XG4gICAgICAgIH0pKGN0eCwgbmV4dCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBwYXNzcG9ydFNlcnZpY2UuYXV0aGVudGljYXRlKG9wdC5zdHJhdGVneSwgb3B0Lm9wdGlvbnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVNaWRkbGV3YXJlOyJdfQ==