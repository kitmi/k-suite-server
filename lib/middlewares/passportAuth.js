"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration,
  BadRequest
} = require('../Errors');

let createMiddleware = (opt, app) => {
  if (!opt || !opt.strategy) {
    throw new InvalidConfiguration('Missing strategy name.', app, 'middlewares.passportAuth.strategy');
  }

  let passportService = app.getService('passport');

  if (!passportService) {
    throw new InvalidConfiguration('Passport feature is not enabled.', app, 'passport');
  }

  console.log(opt);

  if (opt.customHandler) {
    return ctx => passportService.authenticate(opt.strategy, opt.options, (err, user, info) => {
      if (err) {
        throw err;
      }

      if (!user) {
        throw new BadRequest(info || `Invalid credential.`);
      }

      return opt && !opt.session ? ctx.login(user, {
        session: false
      }) : ctx.login(user);
    })(ctx);
  }

  return passportService.authenticate(opt.strategy, opt.options);
};

module.exports = createMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9wYXNzcG9ydEF1dGguanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJvcHQiLCJhcHAiLCJzdHJhdGVneSIsInBhc3Nwb3J0U2VydmljZSIsImdldFNlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwiY3VzdG9tSGFuZGxlciIsImN0eCIsImF1dGhlbnRpY2F0ZSIsIm9wdGlvbnMiLCJlcnIiLCJ1c2VyIiwiaW5mbyIsInNlc3Npb24iLCJsb2dpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxvQkFBRjtBQUF3QkMsRUFBQUE7QUFBeEIsSUFBdUNDLE9BQU8sQ0FBQyxXQUFELENBQXBEOztBQWdCQSxJQUFJQyxnQkFBZ0IsR0FBRyxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNqQyxNQUFJLENBQUNELEdBQUQsSUFBUSxDQUFDQSxHQUFHLENBQUNFLFFBQWpCLEVBQTJCO0FBQ3ZCLFVBQU0sSUFBSU4sb0JBQUosQ0FDRix3QkFERSxFQUVGSyxHQUZFLEVBR0YsbUNBSEUsQ0FBTjtBQUtIOztBQUVELE1BQUlFLGVBQWUsR0FBR0YsR0FBRyxDQUFDRyxVQUFKLENBQWUsVUFBZixDQUF0Qjs7QUFFQSxNQUFJLENBQUNELGVBQUwsRUFBc0I7QUFDbEIsVUFBTSxJQUFJUCxvQkFBSixDQUNGLGtDQURFLEVBRUZLLEdBRkUsRUFHRixVQUhFLENBQU47QUFLSDs7QUFFREksRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlOLEdBQVo7O0FBRUEsTUFBSUEsR0FBRyxDQUFDTyxhQUFSLEVBQXVCO0FBQ25CLFdBQU9DLEdBQUcsSUFBSUwsZUFBZSxDQUFDTSxZQUFoQixDQUE2QlQsR0FBRyxDQUFDRSxRQUFqQyxFQUEyQ0YsR0FBRyxDQUFDVSxPQUEvQyxFQUF3RCxDQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBWUMsSUFBWixLQUFxQjtBQUNuRixVQUFJRixHQUFKLEVBQVM7QUFDTCxjQUFNQSxHQUFOO0FBQ0g7O0FBRUQsVUFBSSxDQUFDQyxJQUFMLEVBQVc7QUFDUCxjQUFNLElBQUlmLFVBQUosQ0FBZWdCLElBQUksSUFBSyxxQkFBeEIsQ0FBTjtBQUNIOztBQUVELGFBQVFiLEdBQUcsSUFBSSxDQUFDQSxHQUFHLENBQUNjLE9BQWIsR0FBd0JOLEdBQUcsQ0FBQ08sS0FBSixDQUFVSCxJQUFWLEVBQWdCO0FBQUVFLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQWhCLENBQXhCLEdBQThETixHQUFHLENBQUNPLEtBQUosQ0FBVUgsSUFBVixDQUFyRTtBQUNQLEtBVmEsRUFVWEosR0FWVyxDQUFkO0FBV0g7O0FBRUQsU0FBT0wsZUFBZSxDQUFDTSxZQUFoQixDQUE2QlQsR0FBRyxDQUFDRSxRQUFqQyxFQUEyQ0YsR0FBRyxDQUFDVSxPQUEvQyxDQUFQO0FBQ0gsQ0FwQ0Q7O0FBc0NBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiwgQmFkUmVxdWVzdCB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogUGFzc3BvcnQgaW5pdGlhbGl6YXRpb24gbWlkZGxld2FyZSwgcmVxdWlyZWQgdG8gaW5pdGlhbGl6ZSBQYXNzcG9ydCBzZXJ2aWNlLlxuICogQG1vZHVsZSBNaWRkbGV3YXJlX1Bhc3Nwb3J0QXV0aFxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgcGFzc3BvcnQgYXV0aGVudGljYXRpb24gbWlkZGxld2FyZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHQgLSBQYXNzcG9ydCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0LnN0cmF0ZWd5IC0gUGFzc3BvcnQgc3RyYXRlZ3lcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0Lm9wdGlvbnNdIC0gUGFzc3BvcnQgc3RyYXRlZ3kgb3B0aW9uc1xuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHQuY3VzdG9tSGFuZGxlcl0gLSBGbGFnIHRvIHVzZSBwYXNzcG9ydCBzdHJhdGVneSBjdXN0b21IYW5kbGVyIFxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwXG4gKiBAcmV0dXJucyB7S29hQWN0aW9uRnVuY3Rpb259XG4gKi9cbmxldCBjcmVhdGVNaWRkbGV3YXJlID0gKG9wdCwgYXBwKSA9PiB7XG4gICAgaWYgKCFvcHQgfHwgIW9wdC5zdHJhdGVneSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBzdHJhdGVneSBuYW1lLicsIFxuICAgICAgICAgICAgYXBwLCBcbiAgICAgICAgICAgICdtaWRkbGV3YXJlcy5wYXNzcG9ydEF1dGguc3RyYXRlZ3knXG4gICAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIGxldCBwYXNzcG9ydFNlcnZpY2UgPSBhcHAuZ2V0U2VydmljZSgncGFzc3BvcnQnKTtcblxuICAgIGlmICghcGFzc3BvcnRTZXJ2aWNlKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdQYXNzcG9ydCBmZWF0dXJlIGlzIG5vdCBlbmFibGVkLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAncGFzc3BvcnQnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2cob3B0KTtcblxuICAgIGlmIChvcHQuY3VzdG9tSGFuZGxlcikge1xuICAgICAgICByZXR1cm4gY3R4ID0+IHBhc3Nwb3J0U2VydmljZS5hdXRoZW50aWNhdGUob3B0LnN0cmF0ZWd5LCBvcHQub3B0aW9ucywgKGVyciwgdXNlciwgaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdChpbmZvIHx8IGBJbnZhbGlkIGNyZWRlbnRpYWwuYCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChvcHQgJiYgIW9wdC5zZXNzaW9uKSA/IGN0eC5sb2dpbih1c2VyLCB7IHNlc3Npb246IGZhbHNlIH0pIDogY3R4LmxvZ2luKHVzZXIpO1xuICAgICAgICB9KShjdHgpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGFzc3BvcnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShvcHQuc3RyYXRlZ3ksIG9wdC5vcHRpb25zKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWlkZGxld2FyZTsiXX0=