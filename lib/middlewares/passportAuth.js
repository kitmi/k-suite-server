"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration,
  BadRequest
} = require('../Errors');

let createMiddleware = (opt, app) => {
  if (!opt || !opt.strategy) {
    throw new InvalidConfiguration('Missing strategy name.', app, 'middlewares.passportAuth.strategy');
  }

  let passportService = app.getService('passport');

  if (!passportService) {
    throw new InvalidConfiguration('Passport feature is not enabled.', app, 'passport');
  }

  if (opt.customHandler) {
    return (ctx, next) => passportService.authenticate(opt.strategy, opt.options, (err, user, info) => {
      if (err) {
        throw err;
      }

      if (!user) {
        throw new BadRequest(info || `Invalid credential.`);
      }

      return (opt && !opt.session ? ctx.login(user, {
        session: false
      }) : ctx.login(user)).then(next);
    })(ctx, next);
  }

  return passportService.authenticate(opt.strategy, opt.options);
};

module.exports = createMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9wYXNzcG9ydEF1dGguanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJvcHQiLCJhcHAiLCJzdHJhdGVneSIsInBhc3Nwb3J0U2VydmljZSIsImdldFNlcnZpY2UiLCJjdXN0b21IYW5kbGVyIiwiY3R4IiwibmV4dCIsImF1dGhlbnRpY2F0ZSIsIm9wdGlvbnMiLCJlcnIiLCJ1c2VyIiwiaW5mbyIsInNlc3Npb24iLCJsb2dpbiIsInRoZW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsb0JBQUY7QUFBd0JDLEVBQUFBO0FBQXhCLElBQXVDQyxPQUFPLENBQUMsV0FBRCxDQUFwRDs7QUFnQkEsSUFBSUMsZ0JBQWdCLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDakMsTUFBSSxDQUFDRCxHQUFELElBQVEsQ0FBQ0EsR0FBRyxDQUFDRSxRQUFqQixFQUEyQjtBQUN2QixVQUFNLElBQUlOLG9CQUFKLENBQ0Ysd0JBREUsRUFFRkssR0FGRSxFQUdGLG1DQUhFLENBQU47QUFLSDs7QUFFRCxNQUFJRSxlQUFlLEdBQUdGLEdBQUcsQ0FBQ0csVUFBSixDQUFlLFVBQWYsQ0FBdEI7O0FBRUEsTUFBSSxDQUFDRCxlQUFMLEVBQXNCO0FBQ2xCLFVBQU0sSUFBSVAsb0JBQUosQ0FDRixrQ0FERSxFQUVGSyxHQUZFLEVBR0YsVUFIRSxDQUFOO0FBS0g7O0FBRUQsTUFBSUQsR0FBRyxDQUFDSyxhQUFSLEVBQXVCO0FBQ25CLFdBQU8sQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWVKLGVBQWUsQ0FBQ0ssWUFBaEIsQ0FBNkJSLEdBQUcsQ0FBQ0UsUUFBakMsRUFBMkNGLEdBQUcsQ0FBQ1MsT0FBL0MsRUFBd0QsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQVlDLElBQVosS0FBcUI7QUFDM0YsVUFBSUYsR0FBSixFQUFTO0FBQ0wsY0FBTUEsR0FBTjtBQUNIOztBQUVELFVBQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1AsY0FBTSxJQUFJZCxVQUFKLENBQWVlLElBQUksSUFBSyxxQkFBeEIsQ0FBTjtBQUNIOztBQUVELGFBQU8sQ0FBRVosR0FBRyxJQUFJLENBQUNBLEdBQUcsQ0FBQ2EsT0FBYixHQUF3QlAsR0FBRyxDQUFDUSxLQUFKLENBQVVILElBQVYsRUFBZ0I7QUFBRUUsUUFBQUEsT0FBTyxFQUFFO0FBQVgsT0FBaEIsQ0FBeEIsR0FBOERQLEdBQUcsQ0FBQ1EsS0FBSixDQUFVSCxJQUFWLENBQS9ELEVBQWdGSSxJQUFoRixDQUFxRlIsSUFBckYsQ0FBUDtBQUNQLEtBVnFCLEVBVW5CRCxHQVZtQixFQVVkQyxJQVZjLENBQXRCO0FBV0g7O0FBRUQsU0FBT0osZUFBZSxDQUFDSyxZQUFoQixDQUE2QlIsR0FBRyxDQUFDRSxRQUFqQyxFQUEyQ0YsR0FBRyxDQUFDUyxPQUEvQyxDQUFQO0FBQ0gsQ0FsQ0Q7O0FBb0NBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiwgQmFkUmVxdWVzdCB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG5cbi8qKlxuICogUGFzc3BvcnQgaW5pdGlhbGl6YXRpb24gbWlkZGxld2FyZSwgcmVxdWlyZWQgdG8gaW5pdGlhbGl6ZSBQYXNzcG9ydCBzZXJ2aWNlLlxuICogQG1vZHVsZSBNaWRkbGV3YXJlX1Bhc3Nwb3J0QXV0aFxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgcGFzc3BvcnQgYXV0aGVudGljYXRpb24gbWlkZGxld2FyZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHQgLSBQYXNzcG9ydCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0LnN0cmF0ZWd5IC0gUGFzc3BvcnQgc3RyYXRlZ3lcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0Lm9wdGlvbnNdIC0gUGFzc3BvcnQgc3RyYXRlZ3kgb3B0aW9uc1xuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHQuY3VzdG9tSGFuZGxlcl0gLSBGbGFnIHRvIHVzZSBwYXNzcG9ydCBzdHJhdGVneSBjdXN0b21IYW5kbGVyIFxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwXG4gKiBAcmV0dXJucyB7S29hQWN0aW9uRnVuY3Rpb259XG4gKi9cbmxldCBjcmVhdGVNaWRkbGV3YXJlID0gKG9wdCwgYXBwKSA9PiB7XG4gICAgaWYgKCFvcHQgfHwgIW9wdC5zdHJhdGVneSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBzdHJhdGVneSBuYW1lLicsIFxuICAgICAgICAgICAgYXBwLCBcbiAgICAgICAgICAgICdtaWRkbGV3YXJlcy5wYXNzcG9ydEF1dGguc3RyYXRlZ3knXG4gICAgICAgICk7XG4gICAgfSAgICBcbiAgICBcbiAgICBsZXQgcGFzc3BvcnRTZXJ2aWNlID0gYXBwLmdldFNlcnZpY2UoJ3Bhc3Nwb3J0Jyk7XG5cbiAgICBpZiAoIXBhc3Nwb3J0U2VydmljZSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnUGFzc3BvcnQgZmVhdHVyZSBpcyBub3QgZW5hYmxlZC4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgJ3Bhc3Nwb3J0J1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChvcHQuY3VzdG9tSGFuZGxlcikge1xuICAgICAgICByZXR1cm4gKGN0eCwgbmV4dCkgPT4gcGFzc3BvcnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShvcHQuc3RyYXRlZ3ksIG9wdC5vcHRpb25zLCAoZXJyLCB1c2VyLCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0KGluZm8gfHwgYEludmFsaWQgY3JlZGVudGlhbC5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKChvcHQgJiYgIW9wdC5zZXNzaW9uKSA/IGN0eC5sb2dpbih1c2VyLCB7IHNlc3Npb246IGZhbHNlIH0pIDogY3R4LmxvZ2luKHVzZXIpKS50aGVuKG5leHQpO1xuICAgICAgICB9KShjdHgsIG5leHQpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGFzc3BvcnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShvcHQuc3RyYXRlZ3ksIG9wdC5vcHRpb25zKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWlkZGxld2FyZTsiXX0=