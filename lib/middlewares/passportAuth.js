"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration,
  BadRequest
} = require('../Errors');

let createMiddleware = (opt, app) => {
  if (!opt || !opt.strategy) {
    throw new InvalidConfiguration('Missing strategy name.', app, 'middlewares.passportAuth.strategy');
  }

  let passportService = app.getService('passport');

  if (!passportService) {
    throw new InvalidConfiguration('Passport feature is not enabled.', app, 'passport');
  }

  console.log(opt);

  if (opt.customHandler) {
    return (ctx, next) => passportService.authenticate(opt.strategy, opt.options, (err, user, info) => {
      if (err) {
        throw err;
      }

      if (!user) {
        throw new BadRequest(info || `Invalid credential.`);
      }

      return (opt && !opt.session ? ctx.login(user, {
        session: false
      }) : ctx.login(user)).then(next);
    })(ctx, next);
  }

  return passportService.authenticate(opt.strategy, opt.options);
};

module.exports = createMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9wYXNzcG9ydEF1dGguanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJvcHQiLCJhcHAiLCJzdHJhdGVneSIsInBhc3Nwb3J0U2VydmljZSIsImdldFNlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwiY3VzdG9tSGFuZGxlciIsImN0eCIsIm5leHQiLCJhdXRoZW50aWNhdGUiLCJvcHRpb25zIiwiZXJyIiwidXNlciIsImluZm8iLCJzZXNzaW9uIiwibG9naW4iLCJ0aGVuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBLG9CQUFGO0FBQXdCQyxFQUFBQTtBQUF4QixJQUF1Q0MsT0FBTyxDQUFDLFdBQUQsQ0FBcEQ7O0FBZ0JBLElBQUlDLGdCQUFnQixHQUFHLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2pDLE1BQUksQ0FBQ0QsR0FBRCxJQUFRLENBQUNBLEdBQUcsQ0FBQ0UsUUFBakIsRUFBMkI7QUFDdkIsVUFBTSxJQUFJTixvQkFBSixDQUNGLHdCQURFLEVBRUZLLEdBRkUsRUFHRixtQ0FIRSxDQUFOO0FBS0g7O0FBRUQsTUFBSUUsZUFBZSxHQUFHRixHQUFHLENBQUNHLFVBQUosQ0FBZSxVQUFmLENBQXRCOztBQUVBLE1BQUksQ0FBQ0QsZUFBTCxFQUFzQjtBQUNsQixVQUFNLElBQUlQLG9CQUFKLENBQ0Ysa0NBREUsRUFFRkssR0FGRSxFQUdGLFVBSEUsQ0FBTjtBQUtIOztBQUVESSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWU4sR0FBWjs7QUFFQSxNQUFJQSxHQUFHLENBQUNPLGFBQVIsRUFBdUI7QUFDbkIsV0FBTyxDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZU4sZUFBZSxDQUFDTyxZQUFoQixDQUE2QlYsR0FBRyxDQUFDRSxRQUFqQyxFQUEyQ0YsR0FBRyxDQUFDVyxPQUEvQyxFQUF3RCxDQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBWUMsSUFBWixLQUFxQjtBQUMzRixVQUFJRixHQUFKLEVBQVM7QUFDTCxjQUFNQSxHQUFOO0FBQ0g7O0FBRUQsVUFBSSxDQUFDQyxJQUFMLEVBQVc7QUFDUCxjQUFNLElBQUloQixVQUFKLENBQWVpQixJQUFJLElBQUsscUJBQXhCLENBQU47QUFDSDs7QUFFRCxhQUFPLENBQUVkLEdBQUcsSUFBSSxDQUFDQSxHQUFHLENBQUNlLE9BQWIsR0FBd0JQLEdBQUcsQ0FBQ1EsS0FBSixDQUFVSCxJQUFWLEVBQWdCO0FBQUVFLFFBQUFBLE9BQU8sRUFBRTtBQUFYLE9BQWhCLENBQXhCLEdBQThEUCxHQUFHLENBQUNRLEtBQUosQ0FBVUgsSUFBVixDQUEvRCxFQUFnRkksSUFBaEYsQ0FBcUZSLElBQXJGLENBQVA7QUFDUCxLQVZxQixFQVVuQkQsR0FWbUIsRUFVZEMsSUFWYyxDQUF0QjtBQVdIOztBQUVELFNBQU9OLGVBQWUsQ0FBQ08sWUFBaEIsQ0FBNkJWLEdBQUcsQ0FBQ0UsUUFBakMsRUFBMkNGLEdBQUcsQ0FBQ1csT0FBL0MsQ0FBUDtBQUNILENBcENEOztBQXNDQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24sIEJhZFJlcXVlc3QgfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG4vKipcbiAqIFBhc3Nwb3J0IGluaXRpYWxpemF0aW9uIG1pZGRsZXdhcmUsIHJlcXVpcmVkIHRvIGluaXRpYWxpemUgUGFzc3BvcnQgc2VydmljZS5cbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9QYXNzcG9ydEF1dGhcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIHBhc3Nwb3J0IGF1dGhlbnRpY2F0aW9uIG1pZGRsZXdhcmUuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0IC0gUGFzc3BvcnQgb3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdC5zdHJhdGVneSAtIFBhc3Nwb3J0IHN0cmF0ZWd5XG4gKiBAcHJvcGVydHkge29iamVjdH0gW29wdC5vcHRpb25zXSAtIFBhc3Nwb3J0IHN0cmF0ZWd5IG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0LmN1c3RvbUhhbmRsZXJdIC0gRmxhZyB0byB1c2UgcGFzc3BvcnQgc3RyYXRlZ3kgY3VzdG9tSGFuZGxlciBcbiAqIEBwYXJhbSB7Um91dGFibGV9IGFwcFxuICogQHJldHVybnMge0tvYUFjdGlvbkZ1bmN0aW9ufVxuICovXG5sZXQgY3JlYXRlTWlkZGxld2FyZSA9IChvcHQsIGFwcCkgPT4ge1xuICAgIGlmICghb3B0IHx8ICFvcHQuc3RyYXRlZ3kpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc3RyYXRlZ3kgbmFtZS4nLCBcbiAgICAgICAgICAgIGFwcCwgXG4gICAgICAgICAgICAnbWlkZGxld2FyZXMucGFzc3BvcnRBdXRoLnN0cmF0ZWd5J1xuICAgICAgICApO1xuICAgIH1cbiAgICBcbiAgICBsZXQgcGFzc3BvcnRTZXJ2aWNlID0gYXBwLmdldFNlcnZpY2UoJ3Bhc3Nwb3J0Jyk7XG5cbiAgICBpZiAoIXBhc3Nwb3J0U2VydmljZSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnUGFzc3BvcnQgZmVhdHVyZSBpcyBub3QgZW5hYmxlZC4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgJ3Bhc3Nwb3J0J1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKG9wdCk7XG5cbiAgICBpZiAob3B0LmN1c3RvbUhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIChjdHgsIG5leHQpID0+IHBhc3Nwb3J0U2VydmljZS5hdXRoZW50aWNhdGUob3B0LnN0cmF0ZWd5LCBvcHQub3B0aW9ucywgKGVyciwgdXNlciwgaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdChpbmZvIHx8IGBJbnZhbGlkIGNyZWRlbnRpYWwuYCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgob3B0ICYmICFvcHQuc2Vzc2lvbikgPyBjdHgubG9naW4odXNlciwgeyBzZXNzaW9uOiBmYWxzZSB9KSA6IGN0eC5sb2dpbih1c2VyKSkudGhlbihuZXh0KTtcbiAgICAgICAgfSkoY3R4LCBuZXh0KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHBhc3Nwb3J0U2VydmljZS5hdXRoZW50aWNhdGUob3B0LnN0cmF0ZWd5LCBvcHQub3B0aW9ucyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU1pZGRsZXdhcmU7Il19