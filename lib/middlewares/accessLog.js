"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  InvalidConfiguration
} = require('../Errors');

const {
  requireFeatures
} = require('../utils/Helpers');

const HttpStatus = require('http-status-codes');

module.exports = (opt, app) => {
  requireFeatures(['timezone', 'loggers'], app, 'accessLog');

  if (!opt.logger) {
    throw new InvalidConfiguration('Missing logger id.', app, 'middlewares.accessLog.logger');
  }

  let logger = app.getService('logger:' + opt.logger);

  if (!logger) {
    throw new InvalidConfiguration('Logger not found. Id: ' + opt.logger, app, 'middlewares.accessLog.logger');
  }

  return async (ctx, next) => {
    let startAt = app.now();
    await next();
    let info = {
      ip: ctx.ip,
      method: ctx.method,
      url: ctx.url,
      originalUrl: ctx.originalUrl,
      httpVersion: ctx.req.httpVersion,
      protocol: ctx.protocol.toUpperCase(),
      status: ctx.status,
      size: ctx.length || '-',
      referer: ctx.header['referer'] || '-',
      userAgent: ctx.header['user-agent'] || '-',
      isoTimestamp: startAt.toISO(),
      duration: app.now().diff(startAt).milliseconds
    };
    let level = 'info';

    if (ctx.status >= 500) {
      level = 'error';
    } else if (ctx.status >= 400) {
      level = 'warn';
    }

    logger.log(level, HttpStatus.getStatusText(ctx.status), info);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9hY2Nlc3NMb2cuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsInJlcXVpcmVGZWF0dXJlcyIsIkh0dHBTdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiYXBwIiwibG9nZ2VyIiwiZ2V0U2VydmljZSIsImN0eCIsIm5leHQiLCJzdGFydEF0Iiwibm93IiwiaW5mbyIsImlwIiwibWV0aG9kIiwidXJsIiwib3JpZ2luYWxVcmwiLCJodHRwVmVyc2lvbiIsInJlcSIsInByb3RvY29sIiwidG9VcHBlckNhc2UiLCJzdGF0dXMiLCJzaXplIiwibGVuZ3RoIiwicmVmZXJlciIsImhlYWRlciIsInVzZXJBZ2VudCIsImlzb1RpbWVzdGFtcCIsInRvSVNPIiwiZHVyYXRpb24iLCJkaWZmIiwibWlsbGlzZWNvbmRzIiwibGV2ZWwiLCJsb2ciLCJnZXRTdGF0dXNUZXh0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCRCxPQUFPLENBQUMsV0FBRCxDQUF4Qzs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxrQkFBRCxDQUFuQzs7QUFDQSxNQUFNRyxVQUFVLEdBQUdILE9BQU8sQ0FBQyxtQkFBRCxDQUExQjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzNCTCxFQUFBQSxlQUFlLENBQUMsQ0FBRSxVQUFGLEVBQWMsU0FBZCxDQUFELEVBQTRCSyxHQUE1QixFQUFpQyxXQUFqQyxDQUFmOztBQUVBLE1BQUksQ0FBQ0QsR0FBRyxDQUFDRSxNQUFULEVBQWlCO0FBQ2IsVUFBTSxJQUFJUCxvQkFBSixDQUF5QixvQkFBekIsRUFBK0NNLEdBQS9DLEVBQW9ELDhCQUFwRCxDQUFOO0FBQ0g7O0FBRUQsTUFBSUMsTUFBTSxHQUFHRCxHQUFHLENBQUNFLFVBQUosQ0FBZSxZQUFZSCxHQUFHLENBQUNFLE1BQS9CLENBQWI7O0FBQ0EsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDVCxVQUFNLElBQUlQLG9CQUFKLENBQXlCLDJCQUEyQkssR0FBRyxDQUFDRSxNQUF4RCxFQUFnRUQsR0FBaEUsRUFBcUUsOEJBQXJFLENBQU47QUFDSDs7QUFFRCxTQUFPLE9BQU9HLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUN4QixRQUFJQyxPQUFPLEdBQUdMLEdBQUcsQ0FBQ00sR0FBSixFQUFkO0FBRUEsVUFBTUYsSUFBSSxFQUFWO0FBRUEsUUFBSUcsSUFBSSxHQUFHO0FBQ1BDLE1BQUFBLEVBQUUsRUFBRUwsR0FBRyxDQUFDSyxFQUREO0FBRVBDLE1BQUFBLE1BQU0sRUFBRU4sR0FBRyxDQUFDTSxNQUZMO0FBR1BDLE1BQUFBLEdBQUcsRUFBRVAsR0FBRyxDQUFDTyxHQUhGO0FBSVBDLE1BQUFBLFdBQVcsRUFBRVIsR0FBRyxDQUFDUSxXQUpWO0FBS1BDLE1BQUFBLFdBQVcsRUFBRVQsR0FBRyxDQUFDVSxHQUFKLENBQVFELFdBTGQ7QUFNUEUsTUFBQUEsUUFBUSxFQUFFWCxHQUFHLENBQUNXLFFBQUosQ0FBYUMsV0FBYixFQU5IO0FBT1BDLE1BQUFBLE1BQU0sRUFBRWIsR0FBRyxDQUFDYSxNQVBMO0FBUVBDLE1BQUFBLElBQUksRUFBRWQsR0FBRyxDQUFDZSxNQUFKLElBQWMsR0FSYjtBQVNQQyxNQUFBQSxPQUFPLEVBQUVoQixHQUFHLENBQUNpQixNQUFKLENBQVcsU0FBWCxLQUF5QixHQVQzQjtBQVVQQyxNQUFBQSxTQUFTLEVBQUVsQixHQUFHLENBQUNpQixNQUFKLENBQVcsWUFBWCxLQUE0QixHQVZoQztBQVdQRSxNQUFBQSxZQUFZLEVBQUVqQixPQUFPLENBQUNrQixLQUFSLEVBWFA7QUFZUEMsTUFBQUEsUUFBUSxFQUFFeEIsR0FBRyxDQUFDTSxHQUFKLEdBQVVtQixJQUFWLENBQWVwQixPQUFmLEVBQXdCcUI7QUFaM0IsS0FBWDtBQWVBLFFBQUlDLEtBQUssR0FBRyxNQUFaOztBQUVBLFFBQUl4QixHQUFHLENBQUNhLE1BQUosSUFBYyxHQUFsQixFQUF1QjtBQUNuQlcsTUFBQUEsS0FBSyxHQUFHLE9BQVI7QUFDSCxLQUZELE1BRU8sSUFBSXhCLEdBQUcsQ0FBQ2EsTUFBSixJQUFjLEdBQWxCLEVBQXVCO0FBQzFCVyxNQUFBQSxLQUFLLEdBQUcsTUFBUjtBQUNIOztBQUVEMUIsSUFBQUEsTUFBTSxDQUFDMkIsR0FBUCxDQUFXRCxLQUFYLEVBQWtCL0IsVUFBVSxDQUFDaUMsYUFBWCxDQUF5QjFCLEdBQUcsQ0FBQ2EsTUFBN0IsQ0FBbEIsRUFBd0RULElBQXhEO0FBQ0gsR0E3QkQ7QUE4QkgsQ0ExQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBBZGQgYWNjZXNzIGxvZyBmb3IgZXZlcnkgaHR0cCByZXF1ZXN0XG4gKiBAbW9kdWxlIE1pZGRsZXdhcmVfQWNjZXNzTG9nXG4gKi9cblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcbmNvbnN0IHsgcmVxdWlyZUZlYXR1cmVzIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCBIdHRwU3RhdHVzID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0LCBhcHApID0+IHsgICAgICAgIFxuICAgIHJlcXVpcmVGZWF0dXJlcyhbICd0aW1lem9uZScsICdsb2dnZXJzJyBdLCBhcHAsICdhY2Nlc3NMb2cnKTsgICAgXG5cbiAgICBpZiAoIW9wdC5sb2dnZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKCdNaXNzaW5nIGxvZ2dlciBpZC4nLCBhcHAsICdtaWRkbGV3YXJlcy5hY2Nlc3NMb2cubG9nZ2VyJyk7XG4gICAgfVxuXG4gICAgbGV0IGxvZ2dlciA9IGFwcC5nZXRTZXJ2aWNlKCdsb2dnZXI6JyArIG9wdC5sb2dnZXIpO1xuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbignTG9nZ2VyIG5vdCBmb3VuZC4gSWQ6ICcgKyBvcHQubG9nZ2VyLCBhcHAsICdtaWRkbGV3YXJlcy5hY2Nlc3NMb2cubG9nZ2VyJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgbGV0IHN0YXJ0QXQgPSBhcHAubm93KCk7ICAgICAgIFxuXG4gICAgICAgIGF3YWl0IG5leHQoKTtcblxuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIGlwOiBjdHguaXAsXG4gICAgICAgICAgICBtZXRob2Q6IGN0eC5tZXRob2QsXG4gICAgICAgICAgICB1cmw6IGN0eC51cmwsXG4gICAgICAgICAgICBvcmlnaW5hbFVybDogY3R4Lm9yaWdpbmFsVXJsLCAgICAgICAgICAgXG4gICAgICAgICAgICBodHRwVmVyc2lvbjogY3R4LnJlcS5odHRwVmVyc2lvbiwgICAgICAgIFxuICAgICAgICAgICAgcHJvdG9jb2w6IGN0eC5wcm90b2NvbC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgc3RhdHVzOiBjdHguc3RhdHVzLFxuICAgICAgICAgICAgc2l6ZTogY3R4Lmxlbmd0aCB8fCAnLScsXG4gICAgICAgICAgICByZWZlcmVyOiBjdHguaGVhZGVyWydyZWZlcmVyJ10gfHwgJy0nLFxuICAgICAgICAgICAgdXNlckFnZW50OiBjdHguaGVhZGVyWyd1c2VyLWFnZW50J10gfHwgJy0nLFxuICAgICAgICAgICAgaXNvVGltZXN0YW1wOiBzdGFydEF0LnRvSVNPKCksICAgICAgICBcbiAgICAgICAgICAgIGR1cmF0aW9uOiBhcHAubm93KCkuZGlmZihzdGFydEF0KS5taWxsaXNlY29uZHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgbGV2ZWwgPSAnaW5mbyc7XG5cbiAgICAgICAgaWYgKGN0eC5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgICAgICBsZXZlbCA9ICdlcnJvcic7XG4gICAgICAgIH0gZWxzZSBpZiAoY3R4LnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgICAgIGxldmVsID0gJ3dhcm4nO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsb2dnZXIubG9nKGxldmVsLCBIdHRwU3RhdHVzLmdldFN0YXR1c1RleHQoY3R4LnN0YXR1cyksIGluZm8pO1xuICAgIH07XG59OyJdfQ==