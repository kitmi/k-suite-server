"use strict";

require("source-map-support/register");

const {
  _,
  ensureLeftSlash,
  trimRightSlash
} = require('rk-utils');

const path = require('path');

const {
  ServiceContainer
} = require('@k-suite/app');

const Routable = require('./Routable');

const Literal = require('./enum/Literal');

class WebModule extends Routable(ServiceContainer) {
  constructor(server, name, route, appPath, options) {
    super(name, Object.assign({
      workingPath: appPath,
      configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH)
    }, options));
    this.server = server;
    this.route = ensureLeftSlash(trimRightSlash(route));
  }

  getService(name) {
    return super.getService(name) || this.server.getService(name);
  }

  log(level, message, ...rest) {
    if (this.options.logWithAppName) {
      message = '[' + this.name + '] ' + message;
    }

    this.server.log(level, message, ...rest);
    return this;
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH), path.resolve(__dirname, Literal.APP_FEATURES_PATH));
    return pathArray;
  }

  _initialize() {}

  _uninitialize() {}

}

module.exports = WebModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJNb2R1bGUuanMiXSwibmFtZXMiOlsiXyIsImVuc3VyZUxlZnRTbGFzaCIsInRyaW1SaWdodFNsYXNoIiwicmVxdWlyZSIsInBhdGgiLCJTZXJ2aWNlQ29udGFpbmVyIiwiUm91dGFibGUiLCJMaXRlcmFsIiwiV2ViTW9kdWxlIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJuYW1lIiwicm91dGUiLCJhcHBQYXRoIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsIndvcmtpbmdQYXRoIiwiY29uZmlnUGF0aCIsImpvaW4iLCJERUZBVUxUX0NPTkZJR19QQVRIIiwiZ2V0U2VydmljZSIsImxvZyIsImxldmVsIiwibWVzc2FnZSIsInJlc3QiLCJsb2dXaXRoQXBwTmFtZSIsIl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoIiwicGF0aEFycmF5Iiwic3BsaWNlIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIkZFQVRVUkVTX1BBVEgiLCJBUFBfRkVBVFVSRVNfUEFUSCIsIl9pbml0aWFsaXplIiwiX3VuaW5pdGlhbGl6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLGVBQUw7QUFBc0JDLEVBQUFBO0FBQXRCLElBQXlDQyxPQUFPLENBQUMsVUFBRCxDQUF0RDs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUF1QkYsT0FBTyxDQUFDLGNBQUQsQ0FBcEM7O0FBQ0EsTUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxnQkFBRCxDQUF2Qjs7QUFPQSxNQUFNSyxTQUFOLFNBQXdCRixRQUFRLENBQUNELGdCQUFELENBQWhDLENBQW1EO0FBUy9DSSxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxFQUFlQyxLQUFmLEVBQXNCQyxPQUF0QixFQUErQkMsT0FBL0IsRUFBd0M7QUFDL0MsVUFBTUgsSUFBTixFQUFZSSxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN0QkMsTUFBQUEsV0FBVyxFQUFFSixPQURTO0FBRXRCSyxNQUFBQSxVQUFVLEVBQUVkLElBQUksQ0FBQ2UsSUFBTCxDQUFVTixPQUFWLEVBQW1CTixPQUFPLENBQUNhLG1CQUEzQjtBQUZVLEtBQWQsRUFHVE4sT0FIUyxDQUFaO0FBU0EsU0FBS0osTUFBTCxHQUFjQSxNQUFkO0FBTUEsU0FBS0UsS0FBTCxHQUFhWCxlQUFlLENBQUNDLGNBQWMsQ0FBQ1UsS0FBRCxDQUFmLENBQTVCO0FBQ0g7O0FBT0RTLEVBQUFBLFVBQVUsQ0FBQ1YsSUFBRCxFQUFPO0FBQ2IsV0FBTyxNQUFNVSxVQUFOLENBQWlCVixJQUFqQixLQUEwQixLQUFLRCxNQUFMLENBQVlXLFVBQVosQ0FBdUJWLElBQXZCLENBQWpDO0FBQ0g7O0FBU0RXLEVBQUFBLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxPQUFSLEVBQWlCLEdBQUdDLElBQXBCLEVBQTBCO0FBQ3pCLFFBQUksS0FBS1gsT0FBTCxDQUFhWSxjQUFqQixFQUFpQztBQUM3QkYsTUFBQUEsT0FBTyxHQUFHLE1BQU0sS0FBS2IsSUFBWCxHQUFrQixJQUFsQixHQUF5QmEsT0FBbkM7QUFDSDs7QUFDRCxTQUFLZCxNQUFMLENBQVlZLEdBQVosQ0FBZ0JDLEtBQWhCLEVBQXVCQyxPQUF2QixFQUFnQyxHQUFHQyxJQUFuQztBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUVERSxFQUFBQSx1QkFBdUIsR0FBRztBQUN0QixRQUFJQyxTQUFTLEdBQUcsTUFBTUQsdUJBQU4sRUFBaEI7O0FBQ0FDLElBQUFBLFNBQVMsQ0FBQ0MsTUFBVixDQUFpQixDQUFqQixFQUFvQixDQUFwQixFQUF1QnpCLElBQUksQ0FBQzBCLE9BQUwsQ0FBYUMsU0FBYixFQUF3QnhCLE9BQU8sQ0FBQ3lCLGFBQWhDLENBQXZCLEVBQXVFNUIsSUFBSSxDQUFDMEIsT0FBTCxDQUFhQyxTQUFiLEVBQXdCeEIsT0FBTyxDQUFDMEIsaUJBQWhDLENBQXZFO0FBQ0EsV0FBT0wsU0FBUDtBQUNIOztBQUVETSxFQUFBQSxXQUFXLEdBQUcsQ0FDYjs7QUFFREMsRUFBQUEsYUFBYSxHQUFHLENBQ2Y7O0FBOUQ4Qzs7QUFpRW5EQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8sIGVuc3VyZUxlZnRTbGFzaCwgdHJpbVJpZ2h0U2xhc2ggfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBTZXJ2aWNlQ29udGFpbmVyIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAnKTtcbmNvbnN0IFJvdXRhYmxlID0gcmVxdWlyZSgnLi9Sb3V0YWJsZScpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogV2ViIGFwcGxpY2F0aW9uIG1vZHVsZSBjbGFzcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUm91dGFibGUoU2VydmljZUNvbnRhaW5lcilcbiAqL1xuY2xhc3MgV2ViTW9kdWxlIGV4dGVuZHMgUm91dGFibGUoU2VydmljZUNvbnRhaW5lcikge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvdXRlIC0gVGhlIGJhc2Ugcm91dGUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggLSBUaGUgcGF0aCB0byBsb2FkIHRoZSBhcHAncyBtb2R1bGUgZmlsZXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIGFwcCBtb2R1bGUncyBleHRyYSBvcHRpb25zIGRlZmluZWQgaW4gaXRzIHBhcmVudCdzIGNvbmZpZ3VyYXRpb24uICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMubG9nV2l0aEFwcE5hbWU9ZmFsc2VdIC0gRmxhZyB0byBpbmNsdWRlIGFwcCBuYW1lIGluIGxvZyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlcnZlciwgbmFtZSwgcm91dGUsIGFwcFBhdGgsIG9wdGlvbnMpIHsgICAgXG4gICAgICAgIHN1cGVyKG5hbWUsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgd29ya2luZ1BhdGg6IGFwcFBhdGgsIFxuICAgICAgICAgICAgY29uZmlnUGF0aDogcGF0aC5qb2luKGFwcFBhdGgsIExpdGVyYWwuREVGQVVMVF9DT05GSUdfUEFUSClcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0aW5nIHNlcnZlci5cbiAgICAgICAgICogQG1lbWJlciB7V2ViU2VydmVyfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyOyAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdW50aW5nIHJvdXRlLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJvdXRlID0gZW5zdXJlTGVmdFNsYXNoKHRyaW1SaWdodFNsYXNoKHJvdXRlKSk7ICAgICAgICBcbiAgICB9ICBcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHNlcnZpY2UgZnJvbSBtb2R1bGUgaGllcmFyY2h5ICAgICBcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0U2VydmljZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRTZXJ2aWNlKG5hbWUpIHx8IHRoaXMuc2VydmVyLmdldFNlcnZpY2UobmFtZSk7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbG9nIG1ldGhvZCwgbWF5IGJlIG92ZXJyaWRlIGJ5IGxvZ2dlcnMgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExvZyBsZXZlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTG9nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gey4uLm9iamVjdH0gcmVzdCAtIEV4dHJhIG1ldGEgZGF0YVxuICAgICAqIEByZXR1cm5zIHtSb3V0YWJsZX1cbiAgICAgKi9cbiAgICBsb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2dXaXRoQXBwTmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9ICdbJyArIHRoaXMubmFtZSArICddICcgKyBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VydmVyLmxvZyhsZXZlbCwgbWVzc2FnZSwgLi4ucmVzdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkge1xuICAgICAgICBsZXQgcGF0aEFycmF5ID0gc3VwZXIuX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKTtcbiAgICAgICAgcGF0aEFycmF5LnNwbGljZSgxLCAwLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkZFQVRVUkVTX1BBVEgpLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkFQUF9GRUFUVVJFU19QQVRIKSk7XG4gICAgICAgIHJldHVybiBwYXRoQXJyYXk7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemUoKSB7XG4gICAgfVxuXG4gICAgX3VuaW5pdGlhbGl6ZSgpIHtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViTW9kdWxlOyJdfQ==