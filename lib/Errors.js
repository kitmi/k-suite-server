"use strict";

require("source-map-support/register");

const {
  withName,
  withExtraInfo
} = require('@k-suite/app/lib/utils/Helpers');

const HttpCode = require('http-status-codes');

const withHttpStatus = (Base, STATUS) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.status = STATUS;
    }

  }, _temp;
};

class InvalidConfiguration extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR))) {
  constructor(message, app, item) {
    super(message, {
      app: app.name,
      configNode: item
    });
  }

}

class BadRequest extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.BAD_REQUEST))) {}

;

class MethodNotAllowed extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.METHOD_NOT_ALLOWED))) {}

;

class ServerError extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR))) {
  constructor(message, code, otherExtra) {
    if (arguments.length === 2 && typeof code === 'object') {
      otherExtra = code;
      code = undefined;
    } else if (code !== undefined && otherExtra && !('code' in otherExtra)) {
      otherExtra = Object.assign({}, otherExtra, {
        code
      });
    }

    super(message, otherExtra);

    if (code !== undefined) {
      this.code = code;
    }
  }

}

exports.withHttpStatus = withHttpStatus;
exports.BadRequest = BadRequest;
exports.MethodNotAllowed = MethodNotAllowed;
exports.InvalidConfiguration = InvalidConfiguration;
exports.ServerError = ServerError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FcnJvcnMuanMiXSwibmFtZXMiOlsid2l0aE5hbWUiLCJ3aXRoRXh0cmFJbmZvIiwicmVxdWlyZSIsIkh0dHBDb2RlIiwid2l0aEh0dHBTdGF0dXMiLCJCYXNlIiwiU1RBVFVTIiwic3RhdHVzIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImFwcCIsIml0ZW0iLCJuYW1lIiwiY29uZmlnTm9kZSIsIkJhZFJlcXVlc3QiLCJCQURfUkVRVUVTVCIsIk1ldGhvZE5vdEFsbG93ZWQiLCJNRVRIT0RfTk9UX0FMTE9XRUQiLCJTZXJ2ZXJFcnJvciIsImNvZGUiLCJvdGhlckV4dHJhIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUE7QUFBWixJQUE4QkMsT0FBTyxDQUFDLGdDQUFELENBQTNDOztBQUNBLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQXhCOztBQVFBLE1BQU1FLGNBQWMsR0FBRyxDQUFDQyxJQUFELEVBQU9DLE1BQVA7QUFBQTs7QUFBQSxpQkFBa0IsY0FBY0QsSUFBZCxDQUFtQjtBQUFBO0FBQUE7QUFBQSxXQUt4REUsTUFMd0QsR0FLL0NELE1BTCtDO0FBQUE7O0FBQUEsR0FBckM7QUFBQSxDQUF2Qjs7QUFnQkEsTUFBTUUsb0JBQU4sU0FBbUNQLGFBQWEsQ0FBQ0QsUUFBUSxDQUFDSSxjQUFjLENBQUNLLEtBQUQsRUFBUU4sUUFBUSxDQUFDTyxxQkFBakIsQ0FBZixDQUFULENBQWhELENBQWtIO0FBTTlHQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQzVCLFVBQU1GLE9BQU4sRUFBZTtBQUFFQyxNQUFBQSxHQUFHLEVBQUVBLEdBQUcsQ0FBQ0UsSUFBWDtBQUFpQkMsTUFBQUEsVUFBVSxFQUFFRjtBQUE3QixLQUFmO0FBQ0g7O0FBUjZHOztBQW1CbEgsTUFBTUcsVUFBTixTQUF5QmhCLGFBQWEsQ0FBQ0QsUUFBUSxDQUFDSSxjQUFjLENBQUNLLEtBQUQsRUFBUU4sUUFBUSxDQUFDZSxXQUFqQixDQUFmLENBQVQsQ0FBdEMsQ0FBOEY7O0FBRTdGOztBQVVELE1BQU1DLGdCQUFOLFNBQStCbEIsYUFBYSxDQUFDRCxRQUFRLENBQUNJLGNBQWMsQ0FBQ0ssS0FBRCxFQUFRTixRQUFRLENBQUNpQixrQkFBakIsQ0FBZixDQUFULENBQTVDLENBQTJHOztBQUUxRzs7QUFVRCxNQUFNQyxXQUFOLFNBQTBCcEIsYUFBYSxDQUFDRCxRQUFRLENBQUNJLGNBQWMsQ0FBQ0ssS0FBRCxFQUFRTixRQUFRLENBQUNPLHFCQUFqQixDQUFmLENBQVQsQ0FBdkMsQ0FBeUc7QUFNckdDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVVSxJQUFWLEVBQWdCQyxVQUFoQixFQUE0QjtBQUNuQyxRQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsSUFBMEIsT0FBT0gsSUFBUCxLQUFnQixRQUE5QyxFQUF3RDtBQUNwREMsTUFBQUEsVUFBVSxHQUFHRCxJQUFiO0FBQ0FBLE1BQUFBLElBQUksR0FBR0ksU0FBUDtBQUNILEtBSEQsTUFHTyxJQUFJSixJQUFJLEtBQUtJLFNBQVQsSUFBc0JILFVBQXRCLElBQW9DLEVBQUUsVUFBVUEsVUFBWixDQUF4QyxFQUFpRTtBQUNwRUEsTUFBQUEsVUFBVSxHQUFHSSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxVQUFsQixFQUE4QjtBQUFFRCxRQUFBQTtBQUFGLE9BQTlCLENBQWI7QUFDSDs7QUFFRCxVQUFNVixPQUFOLEVBQWVXLFVBQWY7O0FBRUEsUUFBSUQsSUFBSSxLQUFLSSxTQUFiLEVBQXdCO0FBS3BCLFdBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNIO0FBQ0o7O0FBdkJvRzs7QUEwQnpHTyxPQUFPLENBQUN6QixjQUFSLEdBQXlCQSxjQUF6QjtBQUNBeUIsT0FBTyxDQUFDWixVQUFSLEdBQXFCQSxVQUFyQjtBQUNBWSxPQUFPLENBQUNWLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQVUsT0FBTyxDQUFDckIsb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBcUIsT0FBTyxDQUFDUixXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVycm9yIGRlZmluaXRpb25zLlxuICogQG1vZHVsZSBFcnJvcnNcbiAqL1xuXG5jb25zdCB7IHdpdGhOYW1lLCB3aXRoRXh0cmFJbmZvIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEh0dHBDb2RlID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcblxuLyoqXG4gKiBBZGRzIGEgc3RhdHVzIHByb3BlcnR5IHRvIHRoZSBjbGFzcy5cbiAqIEBtaXhpblxuICogQHBhcmFtIHsqfSBCYXNlIFxuICogQHBhcmFtIHsqfSBTVEFUVVMgXG4gKi9cbmNvbnN0IHdpdGhIdHRwU3RhdHVzID0gKEJhc2UsIFNUQVRVUykgPT4gY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKiBIdHRwIHN0YXR1cyBjb2RlLlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBzdGF0dXMgPSBTVEFUVVM7XG59O1xuXG4vKipcbiAqIEVycm9yIGNhdXNlZCBieSBpbnZhbGlkIGNvbmZpZ3VyYXRpb24uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEVycm9yICBcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb24gZXh0ZW5kcyB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKSkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7QXBwfSBbYXBwXSAtIFRoZSByZWxhdGVkIGFwcCBtb2R1bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2l0ZW1dIC0gVGhlIHJlbGF0ZWQgY29uZmlnIGl0ZW0gICBcbiAgICAgKi8gXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYXBwLCBpdGVtKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBhcHA6IGFwcC5uYW1lLCBjb25maWdOb2RlOiBpdGVtIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIdHRwIEJhZFJlcXVlc3QsIDQwMC5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aEh0dHBTdGF0dXNcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm8gXG4gKi9cbmNsYXNzIEJhZFJlcXVlc3QgZXh0ZW5kcyB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5CQURfUkVRVUVTVCkpKSB7XG5cbn07XG5cbi8qKlxuICogSHR0cCBNZXRob2ROb3RBbGxvd2VkLCA0MDUuXG4gKiBAY2xhc3MgXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQG1peGVzIHdpdGhIdHRwU3RhdHVzXG4gKiBAbWl4ZXMgd2l0aE5hbWVcbiAqIEBtaXhlcyB3aXRoRXh0cmFJbmZvIFxuICovXG5jbGFzcyBNZXRob2ROb3RBbGxvd2VkIGV4dGVuZHMgd2l0aEV4dHJhSW5mbyh3aXRoTmFtZSh3aXRoSHR0cFN0YXR1cyhFcnJvciwgSHR0cENvZGUuTUVUSE9EX05PVF9BTExPV0VEKSkpIHtcblxufTtcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgYWxsIGtpbmRzIG9mIHJ1bnRpbWUgZXJyb3JzLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBFcnJvciBcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKSkge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlXG4gICAgICogQHBhcmFtIHsqfSBjb2RlIFxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXJFeHRyYVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIG90aGVyRXh0cmEpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGNvZGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBvdGhlckV4dHJhID0gY29kZTtcbiAgICAgICAgICAgIGNvZGUgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gdW5kZWZpbmVkICYmIG90aGVyRXh0cmEgJiYgISgnY29kZScgaW4gb3RoZXJFeHRyYSkpIHtcbiAgICAgICAgICAgIG90aGVyRXh0cmEgPSBPYmplY3QuYXNzaWduKHt9LCBvdGhlckV4dHJhLCB7IGNvZGUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihtZXNzYWdlLCBvdGhlckV4dHJhKTtcblxuICAgICAgICBpZiAoY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVycm9yIENvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXIge2ludGVnZXJ8c3RyaW5nfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLndpdGhIdHRwU3RhdHVzID0gd2l0aEh0dHBTdGF0dXM7XG5leHBvcnRzLkJhZFJlcXVlc3QgPSBCYWRSZXF1ZXN0O1xuZXhwb3J0cy5NZXRob2ROb3RBbGxvd2VkID0gTWV0aG9kTm90QWxsb3dlZDtcbmV4cG9ydHMuSW52YWxpZENvbmZpZ3VyYXRpb24gPSBJbnZhbGlkQ29uZmlndXJhdGlvbjtcbmV4cG9ydHMuU2VydmVyRXJyb3IgPSBTZXJ2ZXJFcnJvcjsiXX0=