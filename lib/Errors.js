"use strict";

require("source-map-support/register");

const {
  withStatus,
  withExpose,
  withName,
  withExtraInfo
} = require('@k-suite/app/lib/utils/Helpers');

const HttpCode = require('http-status-codes');

const RichInfoError = withExtraInfo(withName(Error));
const RequestError = withExpose(RichInfoError);

class BadRequest extends withStatus(RequestError, HttpCode.BAD_REQUEST) {}

;

class NotFound extends withStatus(RequestError, HttpCode.NOT_FOUND) {}

;

class MethodNotAllowed extends withStatus(RequestError, HttpCode.METHOD_NOT_ALLOWED) {}

;

class ServerError extends withStatus(RichInfoError, HttpCode.INTERNAL_SERVER_ERROR) {
  constructor(message, code, otherExtra) {
    if (arguments.length === 2 && typeof code === 'object') {
      otherExtra = code;
      code = undefined;
    } else if (code !== undefined && otherExtra && !('code' in otherExtra)) {
      otherExtra = Object.assign({}, otherExtra, {
        code
      });
    }

    super(message, otherExtra);

    if (code !== undefined) {
      this.code = code;
    }
  }

}

class InvalidConfiguration extends ServerError {
  constructor(message, app, item) {
    super(message, 'E_INVALID_CONFIG', {
      app: app.name,
      configNode: item
    });
  }

}

exports.BadRequest = BadRequest;
exports.NotFound = NotFound;
exports.MethodNotAllowed = MethodNotAllowed;
exports.ServerError = ServerError;
exports.InvalidConfiguration = InvalidConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FcnJvcnMuanMiXSwibmFtZXMiOlsid2l0aFN0YXR1cyIsIndpdGhFeHBvc2UiLCJ3aXRoTmFtZSIsIndpdGhFeHRyYUluZm8iLCJyZXF1aXJlIiwiSHR0cENvZGUiLCJSaWNoSW5mb0Vycm9yIiwiRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJCYWRSZXF1ZXN0IiwiQkFEX1JFUVVFU1QiLCJOb3RGb3VuZCIsIk5PVF9GT1VORCIsIk1ldGhvZE5vdEFsbG93ZWQiLCJNRVRIT0RfTk9UX0FMTE9XRUQiLCJTZXJ2ZXJFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJvdGhlckV4dHJhIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJhcHAiLCJpdGVtIiwibmFtZSIsImNvbmZpZ05vZGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU07QUFBRUEsRUFBQUEsVUFBRjtBQUFjQyxFQUFBQSxVQUFkO0FBQTBCQyxFQUFBQSxRQUExQjtBQUFvQ0MsRUFBQUE7QUFBcEMsSUFBc0RDLE9BQU8sQ0FBQyxnQ0FBRCxDQUFuRTs7QUFDQSxNQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxtQkFBRCxDQUF4Qjs7QUFFQSxNQUFNRSxhQUFhLEdBQUdILGFBQWEsQ0FBQ0QsUUFBUSxDQUFDSyxLQUFELENBQVQsQ0FBbkM7QUFDQSxNQUFNQyxZQUFZLEdBQUdQLFVBQVUsQ0FBQ0ssYUFBRCxDQUEvQjs7QUFVQSxNQUFNRyxVQUFOLFNBQXlCVCxVQUFVLENBQUNRLFlBQUQsRUFBZUgsUUFBUSxDQUFDSyxXQUF4QixDQUFuQyxDQUF3RTs7QUFDdkU7O0FBVUQsTUFBTUMsUUFBTixTQUF1QlgsVUFBVSxDQUFDUSxZQUFELEVBQWVILFFBQVEsQ0FBQ08sU0FBeEIsQ0FBakMsQ0FBb0U7O0FBRW5FOztBQVVELE1BQU1DLGdCQUFOLFNBQStCYixVQUFVLENBQUNRLFlBQUQsRUFBZUgsUUFBUSxDQUFDUyxrQkFBeEIsQ0FBekMsQ0FBcUY7O0FBRXBGOztBQVVELE1BQU1DLFdBQU4sU0FBMEJmLFVBQVUsQ0FBQ00sYUFBRCxFQUFnQkQsUUFBUSxDQUFDVyxxQkFBekIsQ0FBcEMsQ0FBb0Y7QUFNaEZDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCQyxVQUFoQixFQUE0QjtBQUNuQyxRQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsSUFBMEIsT0FBT0gsSUFBUCxLQUFnQixRQUE5QyxFQUF3RDtBQUNwREMsTUFBQUEsVUFBVSxHQUFHRCxJQUFiO0FBQ0FBLE1BQUFBLElBQUksR0FBR0ksU0FBUDtBQUNILEtBSEQsTUFHTyxJQUFJSixJQUFJLEtBQUtJLFNBQVQsSUFBc0JILFVBQXRCLElBQW9DLEVBQUUsVUFBVUEsVUFBWixDQUF4QyxFQUFpRTtBQUNwRUEsTUFBQUEsVUFBVSxHQUFHSSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxVQUFsQixFQUE4QjtBQUFFRCxRQUFBQTtBQUFGLE9BQTlCLENBQWI7QUFDSDs7QUFFRCxVQUFNRCxPQUFOLEVBQWVFLFVBQWY7O0FBRUEsUUFBSUQsSUFBSSxLQUFLSSxTQUFiLEVBQXdCO0FBS3BCLFdBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNIO0FBQ0o7O0FBdkIrRTs7QUFrQ3BGLE1BQU1PLG9CQUFOLFNBQW1DWCxXQUFuQyxDQUErQztBQU0zQ0UsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVTLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtBQUM1QixVQUFNVixPQUFOLEVBQWUsa0JBQWYsRUFBbUM7QUFBRVMsTUFBQUEsR0FBRyxFQUFFQSxHQUFHLENBQUNFLElBQVg7QUFBaUJDLE1BQUFBLFVBQVUsRUFBRUY7QUFBN0IsS0FBbkM7QUFDSDs7QUFSMEM7O0FBVy9DRyxPQUFPLENBQUN0QixVQUFSLEdBQXFCQSxVQUFyQjtBQUNBc0IsT0FBTyxDQUFDcEIsUUFBUixHQUFtQkEsUUFBbkI7QUFDQW9CLE9BQU8sQ0FBQ2xCLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQWtCLE9BQU8sQ0FBQ2hCLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0FnQixPQUFPLENBQUNMLG9CQUFSLEdBQStCQSxvQkFBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFcnJvciBkZWZpbml0aW9ucy5cbiAqIEBtb2R1bGUgRXJyb3JzXG4gKi9cblxuY29uc3QgeyB3aXRoU3RhdHVzLCB3aXRoRXhwb3NlLCB3aXRoTmFtZSwgd2l0aEV4dHJhSW5mbyB9ID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCBIdHRwQ29kZSA9IHJlcXVpcmUoJ2h0dHAtc3RhdHVzLWNvZGVzJyk7XG5cbmNvbnN0IFJpY2hJbmZvRXJyb3IgPSB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKEVycm9yKSk7XG5jb25zdCBSZXF1ZXN0RXJyb3IgPSB3aXRoRXhwb3NlKFJpY2hJbmZvRXJyb3IpO1xuXG4vKipcbiAqIEh0dHAgQmFkUmVxdWVzdCwgNDAwLlxuICogQGNsYXNzIFxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgQmFkUmVxdWVzdCBleHRlbmRzIHdpdGhTdGF0dXMoUmVxdWVzdEVycm9yLCBIdHRwQ29kZS5CQURfUkVRVUVTVCkgeyAgICAgICAgXG59O1xuXG4vKipcbiAqIEh0dHAgTm90Rm91bmQsIDQwNC5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aEh0dHBTdGF0dXNcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm8gXG4gKi9cbmNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgd2l0aFN0YXR1cyhSZXF1ZXN0RXJyb3IsIEh0dHBDb2RlLk5PVF9GT1VORCkge1xuXG59O1xuXG4vKipcbiAqIEh0dHAgTWV0aG9kTm90QWxsb3dlZCwgNDA1LlxuICogQGNsYXNzIFxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgTWV0aG9kTm90QWxsb3dlZCBleHRlbmRzIHdpdGhTdGF0dXMoUmVxdWVzdEVycm9yLCBIdHRwQ29kZS5NRVRIT0RfTk9UX0FMTE9XRUQpIHtcblxufTtcblxuLyoqXG4gKiBFcnJvciBjYXVzZWQgYnkgYWxsIGtpbmRzIG9mIHJ1bnRpbWUgZXJyb3JzLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBFcnJvciBcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyB3aXRoU3RhdHVzKFJpY2hJbmZvRXJyb3IsIEh0dHBDb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUikge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlXG4gICAgICogQHBhcmFtIHsqfSBjb2RlIFxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXJFeHRyYVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIG90aGVyRXh0cmEpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGNvZGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBvdGhlckV4dHJhID0gY29kZTtcbiAgICAgICAgICAgIGNvZGUgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gdW5kZWZpbmVkICYmIG90aGVyRXh0cmEgJiYgISgnY29kZScgaW4gb3RoZXJFeHRyYSkpIHtcbiAgICAgICAgICAgIG90aGVyRXh0cmEgPSBPYmplY3QuYXNzaWduKHt9LCBvdGhlckV4dHJhLCB7IGNvZGUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihtZXNzYWdlLCBvdGhlckV4dHJhKTtcblxuICAgICAgICBpZiAoY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVycm9yIENvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXIge2ludGVnZXJ8c3RyaW5nfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEVycm9yIGNhdXNlZCBieSBpbnZhbGlkIGNvbmZpZ3VyYXRpb24uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEVycm9yICBcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb24gZXh0ZW5kcyBTZXJ2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFcnJvciBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtBcHB9IFthcHBdIC0gVGhlIHJlbGF0ZWQgYXBwIG1vZHVsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbaXRlbV0gLSBUaGUgcmVsYXRlZCBjb25maWcgaXRlbSAgIFxuICAgICAqLyBcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBhcHAsIGl0ZW0pIHsgICAgICAgIFxuICAgICAgICBzdXBlcihtZXNzYWdlLCAnRV9JTlZBTElEX0NPTkZJRycsIHsgYXBwOiBhcHAubmFtZSwgY29uZmlnTm9kZTogaXRlbSB9KTtcbiAgICB9XG59XG5cbmV4cG9ydHMuQmFkUmVxdWVzdCA9IEJhZFJlcXVlc3Q7XG5leHBvcnRzLk5vdEZvdW5kID0gTm90Rm91bmQ7XG5leHBvcnRzLk1ldGhvZE5vdEFsbG93ZWQgPSBNZXRob2ROb3RBbGxvd2VkO1xuZXhwb3J0cy5TZXJ2ZXJFcnJvciA9IFNlcnZlckVycm9yO1xuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbiA9IEludmFsaWRDb25maWd1cmF0aW9uOyJdfQ==