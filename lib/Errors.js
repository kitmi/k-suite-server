"use strict";

require("source-map-support/register");

const {
  withName,
  withExtraInfo
} = require('@k-suite/app/lib/utils/Helpers');

const HttpCode = require('http-status-codes');

const withHttpStatus = (Base, STATUS) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.status = STATUS;
    }

  }, _temp;
};

class InvalidConfiguration extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR))) {
  constructor(message, app, item) {
    super(message, {
      app: app.name,
      configNode: item
    });
  }

}

class BadRequest extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.BAD_REQUEST))) {}

;

class ServerError extends withExtraInfo(withName(withHttpStatus(Error, HttpCode.INTERNAL_SERVER_ERROR))) {
  constructor(message, code, otherExtra) {
    if (arguments.length === 2 && typeof code === 'object') {
      otherExtra = code;
      code = undefined;
    } else if (code !== undefined && otherExtra && !('code' in otherExtra)) {
      otherExtra = Object.assign({}, otherExtra, {
        code
      });
    }

    super(message, otherExtra);

    if (code !== undefined) {
      this.code = code;
    }
  }

}

exports.withHttpStatus = withHttpStatus;
exports.BadRequest = BadRequest;
exports.InvalidConfiguration = InvalidConfiguration;
exports.ServerError = ServerError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FcnJvcnMuanMiXSwibmFtZXMiOlsid2l0aE5hbWUiLCJ3aXRoRXh0cmFJbmZvIiwicmVxdWlyZSIsIkh0dHBDb2RlIiwid2l0aEh0dHBTdGF0dXMiLCJCYXNlIiwiU1RBVFVTIiwic3RhdHVzIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImFwcCIsIml0ZW0iLCJuYW1lIiwiY29uZmlnTm9kZSIsIkJhZFJlcXVlc3QiLCJCQURfUkVRVUVTVCIsIlNlcnZlckVycm9yIiwiY29kZSIsIm90aGVyRXh0cmEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU07QUFBRUEsRUFBQUEsUUFBRjtBQUFZQyxFQUFBQTtBQUFaLElBQThCQyxPQUFPLENBQUMsZ0NBQUQsQ0FBM0M7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBUUEsTUFBTUUsY0FBYyxHQUFHLENBQUNDLElBQUQsRUFBT0MsTUFBUDtBQUFBOztBQUFBLGlCQUFrQixjQUFjRCxJQUFkLENBQW1CO0FBQUE7QUFBQTtBQUFBLFdBS3hERSxNQUx3RCxHQUsvQ0QsTUFMK0M7QUFBQTs7QUFBQSxHQUFyQztBQUFBLENBQXZCOztBQWdCQSxNQUFNRSxvQkFBTixTQUFtQ1AsYUFBYSxDQUFDRCxRQUFRLENBQUNJLGNBQWMsQ0FBQ0ssS0FBRCxFQUFRTixRQUFRLENBQUNPLHFCQUFqQixDQUFmLENBQVQsQ0FBaEQsQ0FBa0g7QUFNOUdDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDNUIsVUFBTUYsT0FBTixFQUFlO0FBQUVDLE1BQUFBLEdBQUcsRUFBRUEsR0FBRyxDQUFDRSxJQUFYO0FBQWlCQyxNQUFBQSxVQUFVLEVBQUVGO0FBQTdCLEtBQWY7QUFDSDs7QUFSNkc7O0FBbUJsSCxNQUFNRyxVQUFOLFNBQXlCaEIsYUFBYSxDQUFDRCxRQUFRLENBQUNJLGNBQWMsQ0FBQ0ssS0FBRCxFQUFRTixRQUFRLENBQUNlLFdBQWpCLENBQWYsQ0FBVCxDQUF0QyxDQUE4Rjs7QUFFN0Y7O0FBVUQsTUFBTUMsV0FBTixTQUEwQmxCLGFBQWEsQ0FBQ0QsUUFBUSxDQUFDSSxjQUFjLENBQUNLLEtBQUQsRUFBUU4sUUFBUSxDQUFDTyxxQkFBakIsQ0FBZixDQUFULENBQXZDLENBQXlHO0FBTXJHQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVVEsSUFBVixFQUFnQkMsVUFBaEIsRUFBNEI7QUFDbkMsUUFBSUMsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXJCLElBQTBCLE9BQU9ILElBQVAsS0FBZ0IsUUFBOUMsRUFBd0Q7QUFDcERDLE1BQUFBLFVBQVUsR0FBR0QsSUFBYjtBQUNBQSxNQUFBQSxJQUFJLEdBQUdJLFNBQVA7QUFDSCxLQUhELE1BR08sSUFBSUosSUFBSSxLQUFLSSxTQUFULElBQXNCSCxVQUF0QixJQUFvQyxFQUFFLFVBQVVBLFVBQVosQ0FBeEMsRUFBaUU7QUFDcEVBLE1BQUFBLFVBQVUsR0FBR0ksTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsVUFBbEIsRUFBOEI7QUFBRUQsUUFBQUE7QUFBRixPQUE5QixDQUFiO0FBQ0g7O0FBRUQsVUFBTVIsT0FBTixFQUFlUyxVQUFmOztBQUVBLFFBQUlELElBQUksS0FBS0ksU0FBYixFQUF3QjtBQUtwQixXQUFLSixJQUFMLEdBQVlBLElBQVo7QUFDSDtBQUNKOztBQXZCb0c7O0FBMEJ6R08sT0FBTyxDQUFDdkIsY0FBUixHQUF5QkEsY0FBekI7QUFDQXVCLE9BQU8sQ0FBQ1YsVUFBUixHQUFxQkEsVUFBckI7QUFDQVUsT0FBTyxDQUFDbkIsb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBbUIsT0FBTyxDQUFDUixXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVycm9yIGRlZmluaXRpb25zLlxuICogQG1vZHVsZSBFcnJvcnNcbiAqL1xuXG5jb25zdCB7IHdpdGhOYW1lLCB3aXRoRXh0cmFJbmZvIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEh0dHBDb2RlID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcblxuLyoqXG4gKiBBZGRzIGEgc3RhdHVzIHByb3BlcnR5IHRvIHRoZSBjbGFzcy5cbiAqIEBtaXhpblxuICogQHBhcmFtIHsqfSBCYXNlIFxuICogQHBhcmFtIHsqfSBTVEFUVVMgXG4gKi9cbmNvbnN0IHdpdGhIdHRwU3RhdHVzID0gKEJhc2UsIFNUQVRVUykgPT4gY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKiBIdHRwIHN0YXR1cyBjb2RlLlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICBzdGF0dXMgPSBTVEFUVVM7XG59O1xuXG4vKipcbiAqIEVycm9yIGNhdXNlZCBieSBpbnZhbGlkIGNvbmZpZ3VyYXRpb24uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEVycm9yICBcbiAqIEBtaXhlcyB3aXRoSHR0cFN0YXR1c1xuICogQG1peGVzIHdpdGhOYW1lXG4gKiBAbWl4ZXMgd2l0aEV4dHJhSW5mbyBcbiAqL1xuY2xhc3MgSW52YWxpZENvbmZpZ3VyYXRpb24gZXh0ZW5kcyB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKSkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7QXBwfSBbYXBwXSAtIFRoZSByZWxhdGVkIGFwcCBtb2R1bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2l0ZW1dIC0gVGhlIHJlbGF0ZWQgY29uZmlnIGl0ZW0gICBcbiAgICAgKi8gXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYXBwLCBpdGVtKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBhcHA6IGFwcC5uYW1lLCBjb25maWdOb2RlOiBpdGVtIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBIdHRwIEJhZFJlcXVlc3QsIDQwMC5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aEh0dHBTdGF0dXNcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm8gXG4gKi9cbmNsYXNzIEJhZFJlcXVlc3QgZXh0ZW5kcyB3aXRoRXh0cmFJbmZvKHdpdGhOYW1lKHdpdGhIdHRwU3RhdHVzKEVycm9yLCBIdHRwQ29kZS5CQURfUkVRVUVTVCkpKSB7XG5cbn07XG5cbi8qKlxuICogRXJyb3IgY2F1c2VkIGJ5IGFsbCBraW5kcyBvZiBydW50aW1lIGVycm9ycy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgRXJyb3IgXG4gKiBAbWl4ZXMgd2l0aEh0dHBTdGF0dXNcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm8gXG4gKi9cbmNsYXNzIFNlcnZlckVycm9yIGV4dGVuZHMgd2l0aEV4dHJhSW5mbyh3aXRoTmFtZSh3aXRoSHR0cFN0YXR1cyhFcnJvciwgSHR0cENvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SKSkpIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7Kn0gY29kZSBcbiAgICAgKiBAcGFyYW0geyp9IG90aGVyRXh0cmFcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBvdGhlckV4dHJhKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBjb2RlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3RoZXJFeHRyYSA9IGNvZGU7XG4gICAgICAgICAgICBjb2RlID0gdW5kZWZpbmVkOyAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgIT09IHVuZGVmaW5lZCAmJiBvdGhlckV4dHJhICYmICEoJ2NvZGUnIGluIG90aGVyRXh0cmEpKSB7XG4gICAgICAgICAgICBvdGhlckV4dHJhID0gT2JqZWN0LmFzc2lnbih7fSwgb3RoZXJFeHRyYSwgeyBjb2RlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIobWVzc2FnZSwgb3RoZXJFeHRyYSk7XG5cbiAgICAgICAgaWYgKGNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFcnJvciBDb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtpbnRlZ2VyfHN0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0cy53aXRoSHR0cFN0YXR1cyA9IHdpdGhIdHRwU3RhdHVzO1xuZXhwb3J0cy5CYWRSZXF1ZXN0ID0gQmFkUmVxdWVzdDtcbmV4cG9ydHMuSW52YWxpZENvbmZpZ3VyYXRpb24gPSBJbnZhbGlkQ29uZmlndXJhdGlvbjtcbmV4cG9ydHMuU2VydmVyRXJyb3IgPSBTZXJ2ZXJFcnJvcjsiXX0=