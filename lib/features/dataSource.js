"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const {
  Feature
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: async (app, dataSources) => {
    const {
      Connector
    } = tryRequire('@k-suite/oolong');

    _.forOwn(dataSources, (dataSource, dbms) => {
      _.forOwn(dataSource, (config, connectorName) => {
        let serviceName = dbms + '.' + connectorName;

        if (!config.connection) {
          throw new InvalidConfiguration(`Missing connection config for data source "${serviceName}".`, app, `dataSource.${dbms}.${connectorName}`);
        }

        let {
          connection: connectionString,
          ...other
        } = config;
        let connectorService = Connector.createConnector(dbms, connectionString, {
          logger: app.server.logger,
          ...other
        });
        app.registerService(serviceName, connectorService);
        app.on('stopping', () => {
          connectorService.end_().then();
        });
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kYXRhU291cmNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkZlYXR1cmUiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlNFUlZJQ0UiLCJsb2FkXyIsImFwcCIsImRhdGFTb3VyY2VzIiwiQ29ubmVjdG9yIiwiZm9yT3duIiwiZGF0YVNvdXJjZSIsImRibXMiLCJjb25maWciLCJjb25uZWN0b3JOYW1lIiwic2VydmljZU5hbWUiLCJjb25uZWN0aW9uIiwiY29ubmVjdGlvblN0cmluZyIsIm90aGVyIiwiY29ubmVjdG9yU2VydmljZSIsImNyZWF0ZUNvbm5lY3RvciIsImxvZ2dlciIsInNlcnZlciIsInJlZ2lzdGVyU2VydmljZSIsIm9uIiwiZW5kXyIsInRoZW4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLGdDQUFELENBQTlCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFjRixPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNHLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkosT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFLYkMsRUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNNLE9BTEQ7QUFhYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsV0FBWixLQUE0QjtBQUMvQixVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZ0JYLFVBQVUsQ0FBQyxpQkFBRCxDQUFoQzs7QUFFQUYsSUFBQUEsQ0FBQyxDQUFDYyxNQUFGLENBQVNGLFdBQVQsRUFBc0IsQ0FBQ0csVUFBRCxFQUFhQyxJQUFiLEtBQXNCO0FBQ3hDaEIsTUFBQUEsQ0FBQyxDQUFDYyxNQUFGLENBQVNDLFVBQVQsRUFBcUIsQ0FBQ0UsTUFBRCxFQUFTQyxhQUFULEtBQTJCO0FBQzVDLFlBQUlDLFdBQVcsR0FBR0gsSUFBSSxHQUFHLEdBQVAsR0FBYUUsYUFBL0I7O0FBRUEsWUFBSSxDQUFDRCxNQUFNLENBQUNHLFVBQVosRUFBd0I7QUFDcEIsZ0JBQU0sSUFBSWYsb0JBQUosQ0FDRCw4Q0FBNkNjLFdBQVksSUFEeEQsRUFFRlIsR0FGRSxFQUdELGNBQWFLLElBQUssSUFBR0UsYUFBYyxFQUhsQyxDQUFOO0FBS0g7O0FBRUQsWUFBSTtBQUFFRSxVQUFBQSxVQUFVLEVBQUVDLGdCQUFkO0FBQWdDLGFBQUdDO0FBQW5DLFlBQTZDTCxNQUFqRDtBQUVBLFlBQUlNLGdCQUFnQixHQUFHVixTQUFTLENBQUNXLGVBQVYsQ0FBMEJSLElBQTFCLEVBQWdDSyxnQkFBaEMsRUFBa0Q7QUFBRUksVUFBQUEsTUFBTSxFQUFFZCxHQUFHLENBQUNlLE1BQUosQ0FBV0QsTUFBckI7QUFBNkIsYUFBR0g7QUFBaEMsU0FBbEQsQ0FBdkI7QUFDQVgsUUFBQUEsR0FBRyxDQUFDZ0IsZUFBSixDQUFvQlIsV0FBcEIsRUFBaUNJLGdCQUFqQztBQUVBWixRQUFBQSxHQUFHLENBQUNpQixFQUFKLENBQU8sVUFBUCxFQUFtQixNQUFNO0FBQ3JCTCxVQUFBQSxnQkFBZ0IsQ0FBQ00sSUFBakIsR0FBd0JDLElBQXhCO0FBQ0gsU0FGRDtBQUdILE9BbkJEO0FBb0JILEtBckJEO0FBc0JIO0FBdENZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGRhdGEgc291cmNlIGZlYXR1cmVcbiAqIEBtb2R1bGUgRmVhdHVyZV9EYXRhU291cmNlXG4gKi9cblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVNvdXJjZXMgLSBEYXRhc291cmNlIHNldHRpbmdzXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCBkYXRhU291cmNlcykgPT4ge1xuICAgICAgICBjb25zdCB7IENvbm5lY3RvciB9ID0gdHJ5UmVxdWlyZSgnQGstc3VpdGUvb29sb25nJyk7XG5cbiAgICAgICAgXy5mb3JPd24oZGF0YVNvdXJjZXMsIChkYXRhU291cmNlLCBkYm1zKSA9PiB7XG4gICAgICAgICAgICBfLmZvck93bihkYXRhU291cmNlLCAoY29uZmlnLCBjb25uZWN0b3JOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcnZpY2VOYW1lID0gZGJtcyArICcuJyArIGNvbm5lY3Rvck5hbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGBNaXNzaW5nIGNvbm5lY3Rpb24gY29uZmlnIGZvciBkYXRhIHNvdXJjZSBcIiR7c2VydmljZU5hbWV9XCIuYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkYXRhU291cmNlLiR7ZGJtc30uJHtjb25uZWN0b3JOYW1lfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHsgY29ubmVjdGlvbjogY29ubmVjdGlvblN0cmluZywgLi4ub3RoZXIgfSA9IGNvbmZpZzsgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0b3JTZXJ2aWNlID0gQ29ubmVjdG9yLmNyZWF0ZUNvbm5lY3RvcihkYm1zLCBjb25uZWN0aW9uU3RyaW5nLCB7IGxvZ2dlcjogYXBwLnNlcnZlci5sb2dnZXIsIC4uLm90aGVyIH0pO1xuICAgICAgICAgICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2Uoc2VydmljZU5hbWUsIGNvbm5lY3RvclNlcnZpY2UpO1xuXG4gICAgICAgICAgICAgICAgYXBwLm9uKCdzdG9wcGluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yU2VydmljZS5lbmRfKCkudGhlbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgfVxufTsiXX0=