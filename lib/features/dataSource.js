"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const {
  Feature
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: async (app, dataSources) => {
    const {
      Connector
    } = tryRequire('@k-suite/oolong');

    _.forOwn(dataSources, (dataSource, dbms) => {
      _.forOwn(dataSource, (config, connectorName) => {
        let serviceName = dbms + '.' + connectorName;

        if (!config.connection) {
          throw new InvalidConfiguration(`Missing connection config for data source "${serviceName}".`, app, `dataSource.${dbms}.${connectorName}`);
        }

        let {
          connection: connectionString,
          ...other
        } = config;
        let connectorService = Connector.createConnector(dbms, connectionString, {
          logger: app.server.logger,
          ...other
        });
        app.registerService(serviceName, connectorService);
        app.log('info', `Data source [${serviceName}] connects to "${connectorService.getConnectionStringWithoutCredential()}".`);
        app.on('stopping', () => {
          connectorService.end_().then();
        });
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9kYXRhU291cmNlLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidHJ5UmVxdWlyZSIsIkZlYXR1cmUiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlNFUlZJQ0UiLCJsb2FkXyIsImFwcCIsImRhdGFTb3VyY2VzIiwiQ29ubmVjdG9yIiwiZm9yT3duIiwiZGF0YVNvdXJjZSIsImRibXMiLCJjb25maWciLCJjb25uZWN0b3JOYW1lIiwic2VydmljZU5hbWUiLCJjb25uZWN0aW9uIiwiY29ubmVjdGlvblN0cmluZyIsIm90aGVyIiwiY29ubmVjdG9yU2VydmljZSIsImNyZWF0ZUNvbm5lY3RvciIsImxvZ2dlciIsInNlcnZlciIsInJlZ2lzdGVyU2VydmljZSIsImxvZyIsImdldENvbm5lY3Rpb25TdHJpbmdXaXRob3V0Q3JlZGVudGlhbCIsIm9uIiwiZW5kXyIsInRoZW4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLGdDQUFELENBQTlCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFjRixPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNHLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkosT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFLYkMsRUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNNLE9BTEQ7QUFhYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsV0FBWixLQUE0QjtBQUMvQixVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZ0JYLFVBQVUsQ0FBQyxpQkFBRCxDQUFoQzs7QUFFQUYsSUFBQUEsQ0FBQyxDQUFDYyxNQUFGLENBQVNGLFdBQVQsRUFBc0IsQ0FBQ0csVUFBRCxFQUFhQyxJQUFiLEtBQXNCO0FBQ3hDaEIsTUFBQUEsQ0FBQyxDQUFDYyxNQUFGLENBQVNDLFVBQVQsRUFBcUIsQ0FBQ0UsTUFBRCxFQUFTQyxhQUFULEtBQTJCO0FBQzVDLFlBQUlDLFdBQVcsR0FBR0gsSUFBSSxHQUFHLEdBQVAsR0FBYUUsYUFBL0I7O0FBRUEsWUFBSSxDQUFDRCxNQUFNLENBQUNHLFVBQVosRUFBd0I7QUFDcEIsZ0JBQU0sSUFBSWYsb0JBQUosQ0FDRCw4Q0FBNkNjLFdBQVksSUFEeEQsRUFFRlIsR0FGRSxFQUdELGNBQWFLLElBQUssSUFBR0UsYUFBYyxFQUhsQyxDQUFOO0FBS0g7O0FBRUQsWUFBSTtBQUFFRSxVQUFBQSxVQUFVLEVBQUVDLGdCQUFkO0FBQWdDLGFBQUdDO0FBQW5DLFlBQTZDTCxNQUFqRDtBQUVBLFlBQUlNLGdCQUFnQixHQUFHVixTQUFTLENBQUNXLGVBQVYsQ0FBMEJSLElBQTFCLEVBQWdDSyxnQkFBaEMsRUFBa0Q7QUFBRUksVUFBQUEsTUFBTSxFQUFFZCxHQUFHLENBQUNlLE1BQUosQ0FBV0QsTUFBckI7QUFBNkIsYUFBR0g7QUFBaEMsU0FBbEQsQ0FBdkI7QUFDQVgsUUFBQUEsR0FBRyxDQUFDZ0IsZUFBSixDQUFvQlIsV0FBcEIsRUFBaUNJLGdCQUFqQztBQUVBWixRQUFBQSxHQUFHLENBQUNpQixHQUFKLENBQVEsTUFBUixFQUFpQixnQkFBZVQsV0FBWSxrQkFBaUJJLGdCQUFnQixDQUFDTSxvQ0FBakIsRUFBd0QsSUFBckg7QUFFQWxCLFFBQUFBLEdBQUcsQ0FBQ21CLEVBQUosQ0FBTyxVQUFQLEVBQW1CLE1BQU07QUFDckJQLFVBQUFBLGdCQUFnQixDQUFDUSxJQUFqQixHQUF3QkMsSUFBeEI7QUFDSCxTQUZEO0FBR0gsT0FyQkQ7QUFzQkgsS0F2QkQ7QUF3Qkg7QUF4Q1ksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgZGF0YSBzb3VyY2UgZmVhdHVyZVxuICogQG1vZHVsZSBGZWF0dXJlX0RhdGFTb3VyY2VcbiAqL1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcC9saWIvdXRpbHMvSGVscGVycycpO1xuY29uc3QgeyBGZWF0dXJlIH0gPSByZXF1aXJlKCcuLicpLmVudW07XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VDb250YWluZXJ9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhU291cmNlcyAtIERhdGFzb3VyY2Ugc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIGRhdGFTb3VyY2VzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgQ29ubmVjdG9yIH0gPSB0cnlSZXF1aXJlKCdAay1zdWl0ZS9vb2xvbmcnKTtcblxuICAgICAgICBfLmZvck93bihkYXRhU291cmNlcywgKGRhdGFTb3VyY2UsIGRibXMpID0+IHtcbiAgICAgICAgICAgIF8uZm9yT3duKGRhdGFTb3VyY2UsIChjb25maWcsIGNvbm5lY3Rvck5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VydmljZU5hbWUgPSBkYm1zICsgJy4nICsgY29ubmVjdG9yTmFtZTtcblxuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgYE1pc3NpbmcgY29ubmVjdGlvbiBjb25maWcgZm9yIGRhdGEgc291cmNlIFwiJHtzZXJ2aWNlTmFtZX1cIi5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYGRhdGFTb3VyY2UuJHtkYm1zfS4ke2Nvbm5lY3Rvck5hbWV9YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgeyBjb25uZWN0aW9uOiBjb25uZWN0aW9uU3RyaW5nLCAuLi5vdGhlciB9ID0gY29uZmlnOyAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RvclNlcnZpY2UgPSBDb25uZWN0b3IuY3JlYXRlQ29ubmVjdG9yKGRibXMsIGNvbm5lY3Rpb25TdHJpbmcsIHsgbG9nZ2VyOiBhcHAuc2VydmVyLmxvZ2dlciwgLi4ub3RoZXIgfSk7XG4gICAgICAgICAgICAgICAgYXBwLnJlZ2lzdGVyU2VydmljZShzZXJ2aWNlTmFtZSwgY29ubmVjdG9yU2VydmljZSk7XG5cbiAgICAgICAgICAgICAgICBhcHAubG9nKCdpbmZvJywgYERhdGEgc291cmNlIFske3NlcnZpY2VOYW1lfV0gY29ubmVjdHMgdG8gXCIke2Nvbm5lY3RvclNlcnZpY2UuZ2V0Q29ubmVjdGlvblN0cmluZ1dpdGhvdXRDcmVkZW50aWFsKCl9XCIuYCk7XG5cbiAgICAgICAgICAgICAgICBhcHAub24oJ3N0b3BwaW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0b3JTZXJ2aWNlLmVuZF8oKS50aGVuKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9XG59OyJdfQ==