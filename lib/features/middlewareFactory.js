"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = {
  type: Feature.INIT,
  load_: (app, factories) => {
    _.forOwn(factories, (factoryInfo, name) => {
      app.registerMiddlewareFactory(name, (opt, ownerApp) => {
        if (!_.isEmpty(opt)) {
          throw new Error(`Pre-configured middleware factory "${name}" should be used with empty options.`);
        }

        let chains;

        if (_.isPlainObject(factoryInfo)) {
          chains = [];

          _.forOwn(factoryInfo, (options, middleware) => {
            chains.push(app.getMiddlewareFactory(middleware)(options, ownerApp));
          });
        } else if (Array.isArray(factoryInfo)) {
          chains = factoryInfo.map((middlewareInfo, i) => {
            if (_.isPlainObject(middlewareInfo)) {
              if (!middlewareInfo.name) {
                throw new InvalidConfiguration('Missing referenced middleware name.', app, `middlewareFactory.${name}[${i}].name`);
              }

              return app.getMiddlewareFactory(middlewareInfo.name)(middlewareInfo.options, ownerApp);
            }

            if (Array.isArray(middlewareInfo)) {
              if (middlewareInfo.length < 1 || middlewareInfo.length > 2 || typeof middlewareInfo[0] !== 'string') {
                throw new InvalidConfiguration('Invalid middleware factory item config.', app, `middlewareFactory.${name}[${i}]`);
              }

              return app.getMiddlewareFactory(middlewareInfo[0])(middlewareInfo.length > 1 ? middlewareInfo[1] : undefined, ownerApp);
            }

            if (typeof middlewareInfo === 'string') {
              return app.getMiddlewareFactory(middlewareInfo)(undefined, ownerApp);
            }

            throw new InvalidConfiguration('Invalid middleware factory item config.', app, `middlewareFactory.${name}[${i}]`);
          });
        } else {
          throw new InvalidConfiguration('Invalid middleware factory config.', app, `middlewareFactory.${name}`);
        }

        return chains.length === 1 ? chains[0] : chains;
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9taWRkbGV3YXJlRmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkZlYXR1cmUiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIklOSVQiLCJsb2FkXyIsImFwcCIsImZhY3RvcmllcyIsImZvck93biIsImZhY3RvcnlJbmZvIiwibmFtZSIsInJlZ2lzdGVyTWlkZGxld2FyZUZhY3RvcnkiLCJvcHQiLCJvd25lckFwcCIsImlzRW1wdHkiLCJjaGFpbnMiLCJpc1BsYWluT2JqZWN0Iiwib3B0aW9ucyIsIm1pZGRsZXdhcmUiLCJwdXNoIiwiZ2V0TWlkZGxld2FyZUZhY3RvcnkiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJtaWRkbGV3YXJlSW5mbyIsImkiLCJsZW5ndGgiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFjRCxPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNFLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkgsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBR0FJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ00sSUFMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxTQUFOLEtBQW9CO0FBQ3ZCWCxJQUFBQSxDQUFDLENBQUNZLE1BQUYsQ0FBU0QsU0FBVCxFQUFvQixDQUFDRSxXQUFELEVBQWNDLElBQWQsS0FBdUI7QUFDdkNKLE1BQUFBLEdBQUcsQ0FBQ0sseUJBQUosQ0FBOEJELElBQTlCLEVBQW9DLENBQUNFLEdBQUQsRUFBTUMsUUFBTixLQUFtQjtBQUFBLGFBQzNDakIsQ0FBQyxDQUFDa0IsT0FBRixDQUFVRixHQUFWLENBRDJDO0FBQUEsMEJBQzFCLHNDQUFxQ0YsSUFBSyxzQ0FEaEI7QUFBQTs7QUFFbkQsWUFBSUssTUFBSjs7QUFFQSxZQUFJbkIsQ0FBQyxDQUFDb0IsYUFBRixDQUFnQlAsV0FBaEIsQ0FBSixFQUFrQztBQUM5Qk0sVUFBQUEsTUFBTSxHQUFHLEVBQVQ7O0FBRUFuQixVQUFBQSxDQUFDLENBQUNZLE1BQUYsQ0FBU0MsV0FBVCxFQUFzQixDQUFDUSxPQUFELEVBQVVDLFVBQVYsS0FBeUI7QUFDM0NILFlBQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZYixHQUFHLENBQUNjLG9CQUFKLENBQXlCRixVQUF6QixFQUFxQ0QsT0FBckMsRUFBOENKLFFBQTlDLENBQVo7QUFDSCxXQUZEO0FBR0gsU0FORCxNQU1PLElBQUlRLEtBQUssQ0FBQ0MsT0FBTixDQUFjYixXQUFkLENBQUosRUFBZ0M7QUFDbkNNLFVBQUFBLE1BQU0sR0FBR04sV0FBVyxDQUFDYyxHQUFaLENBQWdCLENBQUNDLGNBQUQsRUFBaUJDLENBQWpCLEtBQXVCO0FBQzVDLGdCQUFJN0IsQ0FBQyxDQUFDb0IsYUFBRixDQUFnQlEsY0FBaEIsQ0FBSixFQUFxQztBQUNqQyxrQkFBSSxDQUFDQSxjQUFjLENBQUNkLElBQXBCLEVBQTBCO0FBQ3RCLHNCQUFNLElBQUlWLG9CQUFKLENBQ0YscUNBREUsRUFFRk0sR0FGRSxFQUdELHFCQUFvQkksSUFBSyxJQUFHZSxDQUFFLFFBSDdCLENBQU47QUFJSDs7QUFFRCxxQkFBT25CLEdBQUcsQ0FBQ2Msb0JBQUosQ0FBeUJJLGNBQWMsQ0FBQ2QsSUFBeEMsRUFBOENjLGNBQWMsQ0FBQ1AsT0FBN0QsRUFBc0VKLFFBQXRFLENBQVA7QUFDSDs7QUFFRCxnQkFBSVEsS0FBSyxDQUFDQyxPQUFOLENBQWNFLGNBQWQsQ0FBSixFQUFtQztBQUMvQixrQkFBSUEsY0FBYyxDQUFDRSxNQUFmLEdBQXdCLENBQXhCLElBQTZCRixjQUFjLENBQUNFLE1BQWYsR0FBd0IsQ0FBckQsSUFBMEQsT0FBT0YsY0FBYyxDQUFDLENBQUQsQ0FBckIsS0FBNkIsUUFBM0YsRUFBcUc7QUFDakcsc0JBQU0sSUFBSXhCLG9CQUFKLENBQ0YseUNBREUsRUFFRk0sR0FGRSxFQUdELHFCQUFvQkksSUFBSyxJQUFHZSxDQUFFLEdBSDdCLENBQU47QUFJSDs7QUFFRCxxQkFBT25CLEdBQUcsQ0FBQ2Msb0JBQUosQ0FBeUJJLGNBQWMsQ0FBQyxDQUFELENBQXZDLEVBQTRDQSxjQUFjLENBQUNFLE1BQWYsR0FBd0IsQ0FBeEIsR0FBNEJGLGNBQWMsQ0FBQyxDQUFELENBQTFDLEdBQWdERyxTQUE1RixFQUF1R2QsUUFBdkcsQ0FBUDtBQUNIOztBQUVELGdCQUFJLE9BQU9XLGNBQVAsS0FBMEIsUUFBOUIsRUFBd0M7QUFDcEMscUJBQU9sQixHQUFHLENBQUNjLG9CQUFKLENBQXlCSSxjQUF6QixFQUF5Q0csU0FBekMsRUFBb0RkLFFBQXBELENBQVA7QUFDSDs7QUFFRCxrQkFBTSxJQUFJYixvQkFBSixDQUNGLHlDQURFLEVBRUZNLEdBRkUsRUFHRCxxQkFBb0JJLElBQUssSUFBR2UsQ0FBRSxHQUg3QixDQUFOO0FBSUgsV0EvQlEsQ0FBVDtBQWdDSCxTQWpDTSxNQWlDQTtBQUNILGdCQUFNLElBQUl6QixvQkFBSixDQUNGLG9DQURFLEVBRUZNLEdBRkUsRUFHRCxxQkFBb0JJLElBQUssRUFIeEIsQ0FBTjtBQUlIOztBQUVELGVBQU9LLE1BQU0sQ0FBQ1csTUFBUCxLQUFrQixDQUFsQixHQUFzQlgsTUFBTSxDQUFDLENBQUQsQ0FBNUIsR0FBa0NBLE1BQXpDO0FBQ0gsT0FuREQ7QUFvREgsS0FyREQ7QUFzREg7QUFwRVksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgb2JqZWN0IHN0b3JlIGZlYXR1cmVcbiAqIEBtb2R1bGUgRmVhdHVyZV9PYmplY3RTdG9yZVxuICovXG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG4gXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgaW5pdCBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLklOSVQsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtBcHB9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmYWN0b3JpZXMgLSBPYmplY3QgZmFjdG9yaWVzXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiAoYXBwLCBmYWN0b3JpZXMpID0+IHtcbiAgICAgICAgXy5mb3JPd24oZmFjdG9yaWVzLCAoZmFjdG9yeUluZm8sIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGFwcC5yZWdpc3Rlck1pZGRsZXdhcmVGYWN0b3J5KG5hbWUsIChvcHQsIG93bmVyQXBwKSA9PiB7IFxuICAgICAgICAgICAgICAgIGFzc2VydDogXy5pc0VtcHR5KG9wdCksIGBQcmUtY29uZmlndXJlZCBtaWRkbGV3YXJlIGZhY3RvcnkgXCIke25hbWV9XCIgc2hvdWxkIGJlIHVzZWQgd2l0aCBlbXB0eSBvcHRpb25zLmA7XG4gICAgICAgICAgICAgICAgbGV0IGNoYWlucztcblxuICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZmFjdG9yeUluZm8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlucyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBfLmZvck93bihmYWN0b3J5SW5mbywgKG9wdGlvbnMsIG1pZGRsZXdhcmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWlucy5wdXNoKGFwcC5nZXRNaWRkbGV3YXJlRmFjdG9yeShtaWRkbGV3YXJlKShvcHRpb25zLCBvd25lckFwcCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmYWN0b3J5SW5mbykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5zID0gZmFjdG9yeUluZm8ubWFwKChtaWRkbGV3YXJlSW5mbywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChtaWRkbGV3YXJlSW5mbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1pZGRsZXdhcmVJbmZvLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01pc3NpbmcgcmVmZXJlbmNlZCBtaWRkbGV3YXJlIG5hbWUuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtaWRkbGV3YXJlRmFjdG9yeS4ke25hbWV9WyR7aX1dLm5hbWVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVJbmZvLm5hbWUpKG1pZGRsZXdhcmVJbmZvLm9wdGlvbnMsIG93bmVyQXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWlkZGxld2FyZUluZm8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pZGRsZXdhcmVJbmZvLmxlbmd0aCA8IDEgfHwgbWlkZGxld2FyZUluZm8ubGVuZ3RoID4gMiB8fCB0eXBlb2YgbWlkZGxld2FyZUluZm9bMF0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIG1pZGRsZXdhcmUgZmFjdG9yeSBpdGVtIGNvbmZpZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG1pZGRsZXdhcmVGYWN0b3J5LiR7bmFtZX1bJHtpfV1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVJbmZvWzBdKShtaWRkbGV3YXJlSW5mby5sZW5ndGggPiAxID8gbWlkZGxld2FyZUluZm9bMV0gOiB1bmRlZmluZWQsIG93bmVyQXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtaWRkbGV3YXJlSW5mbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVJbmZvKSh1bmRlZmluZWQsIG93bmVyQXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIG1pZGRsZXdhcmUgZmFjdG9yeSBpdGVtIGNvbmZpZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbWlkZGxld2FyZUZhY3RvcnkuJHtuYW1lfVske2l9XWApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBtaWRkbGV3YXJlIGZhY3RvcnkgY29uZmlnLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBgbWlkZGxld2FyZUZhY3RvcnkuJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbnMubGVuZ3RoID09PSAxID8gY2hhaW5zWzBdIDogY2hhaW5zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07Il19