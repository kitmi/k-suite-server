"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  Promise,
  pascalCase,
  eachAsync_
} = require('rk-utils');

const {
  Feature,
  Literal
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../Errors');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, oolong) => {
    app.oolong = oolong;

    if (!oolong.schemaDeployment) {
      throw new InvalidConfiguration(`Missing "schemaDeployment" in oolong config.`, app, 'oolong.schemaDeployment');
    }

    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = oolong.schemaDeployment[schemaName];

      if (!schemaInfo || !schemaInfo.dataSource) {
        throw new InvalidConfiguration(`Missing "dataSource" in schemaDeployment section of oolong config.`, app, `oolong.schemaDeployment.${schemaName}.dataSource`);
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new InvalidConfiguration(`Invalid data source.`, app, schemaInfo.dataSource);
      }

      let i18n = app.getService('i18n') || app.__;

      const Db = require(path.join(app.backendPath, Literal.MODELS_PATH, pascalCase(schemaName)));

      let db = new Db(connector, i18n);
      db.app = app;
      DbCache[schemaName] = db;
      return db;
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vb2xvbmcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiUHJvbWlzZSIsInBhc2NhbENhc2UiLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsIkxpdGVyYWwiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJEYkNhY2hlIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJJTklUIiwibG9hZF8iLCJhcHAiLCJvb2xvbmciLCJzY2hlbWFEZXBsb3ltZW50IiwiZGIiLCJzY2hlbWFOYW1lIiwic2NoZW1hSW5mbyIsImRhdGFTb3VyY2UiLCJjb25uZWN0b3IiLCJnZXRTZXJ2aWNlIiwiaTE4biIsIl9fIiwiRGIiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJNT0RFTFNfUEFUSCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxPQUFMO0FBQWNDLEVBQUFBLFVBQWQ7QUFBMEJDLEVBQUFBO0FBQTFCLElBQXlDSixPQUFPLENBQUMsVUFBRCxDQUF0RDs7QUFDQSxNQUFNO0FBQUVLLEVBQUFBLE9BQUY7QUFBV0MsRUFBQUE7QUFBWCxJQUF1Qk4sT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjTyxJQUEzQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJSLE9BQU8sQ0FBQyxXQUFELENBQXhDOztBQUVBLE1BQU1TLE9BQU8sR0FBRyxFQUFoQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFLYkMsRUFBQUEsSUFBSSxFQUFFUCxPQUFPLENBQUNRLElBTEQ7QUFjYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQkQsSUFBQUEsR0FBRyxDQUFDQyxNQUFKLEdBQWFBLE1BQWI7O0FBRUEsUUFBSSxDQUFDQSxNQUFNLENBQUNDLGdCQUFaLEVBQThCO0FBQzFCLFlBQU0sSUFBSVQsb0JBQUosQ0FDRCw4Q0FEQyxFQUVGTyxHQUZFLEVBR0YseUJBSEUsQ0FBTjtBQUtIOztBQUVEQSxJQUFBQSxHQUFHLENBQUNHLEVBQUosR0FBVUMsVUFBRCxJQUFnQjtBQUNyQixVQUFJVixPQUFPLENBQUNVLFVBQUQsQ0FBWCxFQUF5QixPQUFPVixPQUFPLENBQUNVLFVBQUQsQ0FBZDtBQUV6QixVQUFJQyxVQUFVLEdBQUdKLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JFLFVBQXhCLENBQWpCOztBQUNBLFVBQUksQ0FBQ0MsVUFBRCxJQUFlLENBQUNBLFVBQVUsQ0FBQ0MsVUFBL0IsRUFBMkM7QUFDdkMsY0FBTSxJQUFJYixvQkFBSixDQUNELG9FQURDLEVBRUZPLEdBRkUsRUFHRCwyQkFBMEJJLFVBQVcsYUFIcEMsQ0FBTjtBQUtIOztBQUVELFVBQUlHLFNBQVMsR0FBR1AsR0FBRyxDQUFDUSxVQUFKLENBQWVILFVBQVUsQ0FBQ0MsVUFBMUIsQ0FBaEI7O0FBQ0EsVUFBSSxDQUFDQyxTQUFMLEVBQWdCO0FBQ1osY0FBTSxJQUFJZCxvQkFBSixDQUNELHNCQURDLEVBRUZPLEdBRkUsRUFHRkssVUFBVSxDQUFDQyxVQUhULENBQU47QUFLSDs7QUFFRCxVQUFJRyxJQUFJLEdBQUdULEdBQUcsQ0FBQ1EsVUFBSixDQUFlLE1BQWYsS0FBMEJSLEdBQUcsQ0FBQ1UsRUFBekM7O0FBRUEsWUFBTUMsRUFBRSxHQUFHMUIsT0FBTyxDQUFDRCxJQUFJLENBQUM0QixJQUFMLENBQVVaLEdBQUcsQ0FBQ2EsV0FBZCxFQUEyQnRCLE9BQU8sQ0FBQ3VCLFdBQW5DLEVBQWdEMUIsVUFBVSxDQUFDZ0IsVUFBRCxDQUExRCxDQUFELENBQWxCOztBQUNBLFVBQUlELEVBQUUsR0FBRyxJQUFJUSxFQUFKLENBQU9KLFNBQVAsRUFBa0JFLElBQWxCLENBQVQ7QUFDQU4sTUFBQUEsRUFBRSxDQUFDSCxHQUFILEdBQVNBLEdBQVQ7QUFFQU4sTUFBQUEsT0FBTyxDQUFDVSxVQUFELENBQVAsR0FBc0JELEVBQXRCO0FBRUEsYUFBT0EsRUFBUDtBQUNILEtBOUJEO0FBK0JIO0FBeERZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIG9vbG9uZyBEU0xcbiAqIEBtb2R1bGUgRmVhdHVyZV9Pb2xvbmdcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBQcm9taXNlLCBwYXNjYWxDYXNlLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBGZWF0dXJlLCBMaXRlcmFsIH0gPSByZXF1aXJlKCcuLicpLmVudW07XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcblxuY29uc3QgRGJDYWNoZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IGluaXQgc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5JTklULFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7QXBwfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb29sb25nIC0gT29sb25nIHNldHRpbmdzXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb29sb25nLmxvZ1NxbFN0YXRlbWVudF0gLSBGbGFnIHRvIHR1cm4gb24gc3FsIGRlYnVnZ2luZyBsb2dcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIChhcHAsIG9vbG9uZykgPT4ge1xuICAgICAgICBhcHAub29sb25nID0gb29sb25nO1xuXG4gICAgICAgIGlmICghb29sb25nLnNjaGVtYURlcGxveW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICBgTWlzc2luZyBcInNjaGVtYURlcGxveW1lbnRcIiBpbiBvb2xvbmcgY29uZmlnLmAsXG4gICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICdvb2xvbmcuc2NoZW1hRGVwbG95bWVudCdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHAuZGIgPSAoc2NoZW1hTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKERiQ2FjaGVbc2NoZW1hTmFtZV0pIHJldHVybiBEYkNhY2hlW3NjaGVtYU5hbWVdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgc2NoZW1hSW5mbyA9IG9vbG9uZy5zY2hlbWFEZXBsb3ltZW50W3NjaGVtYU5hbWVdO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFJbmZvIHx8ICFzY2hlbWFJbmZvLmRhdGFTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIGBNaXNzaW5nIFwiZGF0YVNvdXJjZVwiIGluIHNjaGVtYURlcGxveW1lbnQgc2VjdGlvbiBvZiBvb2xvbmcgY29uZmlnLmAsXG4gICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgYG9vbG9uZy5zY2hlbWFEZXBsb3ltZW50LiR7c2NoZW1hTmFtZX0uZGF0YVNvdXJjZWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY29ubmVjdG9yID0gYXBwLmdldFNlcnZpY2Uoc2NoZW1hSW5mby5kYXRhU291cmNlKTtcbiAgICAgICAgICAgIGlmICghY29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICBgSW52YWxpZCBkYXRhIHNvdXJjZS5gLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYUluZm8uZGF0YVNvdXJjZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpMThuID0gYXBwLmdldFNlcnZpY2UoJ2kxOG4nKSB8fCBhcHAuX187XG5cbiAgICAgICAgICAgIGNvbnN0IERiID0gcmVxdWlyZShwYXRoLmpvaW4oYXBwLmJhY2tlbmRQYXRoLCBMaXRlcmFsLk1PREVMU19QQVRILCBwYXNjYWxDYXNlKHNjaGVtYU5hbWUpKSk7XG4gICAgICAgICAgICBsZXQgZGIgPSBuZXcgRGIoY29ubmVjdG9yLCBpMThuKTtcbiAgICAgICAgICAgIGRiLmFwcCA9IGFwcDtcblxuICAgICAgICAgICAgRGJDYWNoZVtzY2hlbWFOYW1lXSA9IGRiOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICByZXR1cm4gZGI7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cbn07Il19