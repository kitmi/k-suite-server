"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  Promise,
  pascalCase,
  eachAsync_
} = require('rk-utils');

const {
  Feature,
  Literal
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../Errors');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, oolong) => {
    app.oolong = oolong;

    if (!oolong.schemaDeployment) {
      throw new InvalidConfiguration(`Missing "schemaDeployment" in oolong config.`, app, 'oolong.schemaDeployment');
    }

    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = oolong.schemaDeployment[schemaName];

      if (!schemaInfo || !schemaInfo.dataSource) {
        throw new InvalidConfiguration(`Missing "dataSource" in schemaDeployment section of oolong config.`, app, `oolong.schemaDeployment.${schemaName}.dataSource`);
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new InvalidConfiguration(`Invalid data source.`, app, schemaInfo.dataSource);
      }

      let i18n = app.getService('i18n') || app.__;

      const Db = require(path.join(app.backendPath, Literal.MODELS_PATH, pascalCase(schemaName)));

      let db = new Db(connector, i18n);
      db.app = app;
      DbCache[schemaName] = db;
      return db;
    };

    app.model = modelFullName => {
      let [schemaName, modelName] = modelFullName.split('.');
      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vb2xvbmcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiUHJvbWlzZSIsInBhc2NhbENhc2UiLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsIkxpdGVyYWwiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJEYkNhY2hlIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJJTklUIiwibG9hZF8iLCJhcHAiLCJvb2xvbmciLCJzY2hlbWFEZXBsb3ltZW50IiwiZGIiLCJzY2hlbWFOYW1lIiwic2NoZW1hSW5mbyIsImRhdGFTb3VyY2UiLCJjb25uZWN0b3IiLCJnZXRTZXJ2aWNlIiwiaTE4biIsIl9fIiwiRGIiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJNT0RFTFNfUEFUSCIsIm1vZGVsIiwibW9kZWxGdWxsTmFtZSIsIm1vZGVsTmFtZSIsInNwbGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLE9BQUw7QUFBY0MsRUFBQUEsVUFBZDtBQUEwQkMsRUFBQUE7QUFBMUIsSUFBeUNKLE9BQU8sQ0FBQyxVQUFELENBQXREOztBQUNBLE1BQU07QUFBRUssRUFBQUEsT0FBRjtBQUFXQyxFQUFBQTtBQUFYLElBQXVCTixPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNPLElBQTNDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQlIsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBRUEsTUFBTVMsT0FBTyxHQUFHLEVBQWhCO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsSUFMRDtBQWNiQyxFQUFBQSxLQUFLLEVBQUUsT0FBT0MsR0FBUCxFQUFZQyxNQUFaLEtBQXVCO0FBQzFCRCxJQUFBQSxHQUFHLENBQUNDLE1BQUosR0FBYUEsTUFBYjs7QUFFQSxRQUFJLENBQUNBLE1BQU0sQ0FBQ0MsZ0JBQVosRUFBOEI7QUFDMUIsWUFBTSxJQUFJVCxvQkFBSixDQUNELDhDQURDLEVBRUZPLEdBRkUsRUFHRix5QkFIRSxDQUFOO0FBS0g7O0FBRURBLElBQUFBLEdBQUcsQ0FBQ0csRUFBSixHQUFVQyxVQUFELElBQWdCO0FBQ3JCLFVBQUlWLE9BQU8sQ0FBQ1UsVUFBRCxDQUFYLEVBQXlCLE9BQU9WLE9BQU8sQ0FBQ1UsVUFBRCxDQUFkO0FBRXpCLFVBQUlDLFVBQVUsR0FBR0osTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkUsVUFBeEIsQ0FBakI7O0FBQ0EsVUFBSSxDQUFDQyxVQUFELElBQWUsQ0FBQ0EsVUFBVSxDQUFDQyxVQUEvQixFQUEyQztBQUV2QyxjQUFNLElBQUliLG9CQUFKLENBQ0Qsb0VBREMsRUFFRk8sR0FGRSxFQUdELDJCQUEwQkksVUFBVyxhQUhwQyxDQUFOO0FBS0g7O0FBRUQsVUFBSUcsU0FBUyxHQUFHUCxHQUFHLENBQUNRLFVBQUosQ0FBZUgsVUFBVSxDQUFDQyxVQUExQixDQUFoQjs7QUFDQSxVQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDWixjQUFNLElBQUlkLG9CQUFKLENBQ0Qsc0JBREMsRUFFRk8sR0FGRSxFQUdGSyxVQUFVLENBQUNDLFVBSFQsQ0FBTjtBQUtIOztBQUVELFVBQUlHLElBQUksR0FBR1QsR0FBRyxDQUFDUSxVQUFKLENBQWUsTUFBZixLQUEwQlIsR0FBRyxDQUFDVSxFQUF6Qzs7QUFFQSxZQUFNQyxFQUFFLEdBQUcxQixPQUFPLENBQUNELElBQUksQ0FBQzRCLElBQUwsQ0FBVVosR0FBRyxDQUFDYSxXQUFkLEVBQTJCdEIsT0FBTyxDQUFDdUIsV0FBbkMsRUFBZ0QxQixVQUFVLENBQUNnQixVQUFELENBQTFELENBQUQsQ0FBbEI7O0FBQ0EsVUFBSUQsRUFBRSxHQUFHLElBQUlRLEVBQUosQ0FBT0osU0FBUCxFQUFrQkUsSUFBbEIsQ0FBVDtBQUNBTixNQUFBQSxFQUFFLENBQUNILEdBQUgsR0FBU0EsR0FBVDtBQUVBTixNQUFBQSxPQUFPLENBQUNVLFVBQUQsQ0FBUCxHQUFzQkQsRUFBdEI7QUFFQSxhQUFPQSxFQUFQO0FBQ0gsS0EvQkQ7O0FBaUNBSCxJQUFBQSxHQUFHLENBQUNlLEtBQUosR0FBYUMsYUFBRCxJQUFtQjtBQUMzQixVQUFJLENBQUVaLFVBQUYsRUFBY2EsU0FBZCxJQUE0QkQsYUFBYSxDQUFDRSxLQUFkLENBQW9CLEdBQXBCLENBQWhDO0FBQ0EsYUFBT2xCLEdBQUcsQ0FBQ0csRUFBSixDQUFPQyxVQUFQLEVBQW1CVyxLQUFuQixDQUF5QkUsU0FBekIsQ0FBUDtBQUNILEtBSEQ7QUFJSDtBQTlEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBvb2xvbmcgRFNMXG4gKiBAbW9kdWxlIEZlYXR1cmVfT29sb25nXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgUHJvbWlzZSwgcGFzY2FsQ2FzZSwgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSwgTGl0ZXJhbCB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG5cbmNvbnN0IERiQ2FjaGUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBpbml0IHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuSU5JVCxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9vbG9uZyAtIE9vbG9uZyBzZXR0aW5nc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29vbG9uZy5sb2dTcWxTdGF0ZW1lbnRdIC0gRmxhZyB0byB0dXJuIG9uIHNxbCBkZWJ1Z2dpbmcgbG9nXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyAoYXBwLCBvb2xvbmcpID0+IHtcbiAgICAgICAgYXBwLm9vbG9uZyA9IG9vbG9uZztcblxuICAgICAgICBpZiAoIW9vbG9uZy5zY2hlbWFEZXBsb3ltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgYE1pc3NpbmcgXCJzY2hlbWFEZXBsb3ltZW50XCIgaW4gb29sb25nIGNvbmZpZy5gLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAnb29sb25nLnNjaGVtYURlcGxveW1lbnQnXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwLmRiID0gKHNjaGVtYU5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChEYkNhY2hlW3NjaGVtYU5hbWVdKSByZXR1cm4gRGJDYWNoZVtzY2hlbWFOYW1lXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHNjaGVtYUluZm8gPSBvb2xvbmcuc2NoZW1hRGVwbG95bWVudFtzY2hlbWFOYW1lXTtcbiAgICAgICAgICAgIGlmICghc2NoZW1hSW5mbyB8fCAhc2NoZW1hSW5mby5kYXRhU291cmNlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICBgTWlzc2luZyBcImRhdGFTb3VyY2VcIiBpbiBzY2hlbWFEZXBsb3ltZW50IHNlY3Rpb24gb2Ygb29sb25nIGNvbmZpZy5gLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGBvb2xvbmcuc2NoZW1hRGVwbG95bWVudC4ke3NjaGVtYU5hbWV9LmRhdGFTb3VyY2VgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbm5lY3RvciA9IGFwcC5nZXRTZXJ2aWNlKHNjaGVtYUluZm8uZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgYEludmFsaWQgZGF0YSBzb3VyY2UuYCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBzY2hlbWFJbmZvLmRhdGFTb3VyY2VcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaTE4biA9IGFwcC5nZXRTZXJ2aWNlKCdpMThuJykgfHwgYXBwLl9fO1xuXG4gICAgICAgICAgICBjb25zdCBEYiA9IHJlcXVpcmUocGF0aC5qb2luKGFwcC5iYWNrZW5kUGF0aCwgTGl0ZXJhbC5NT0RFTFNfUEFUSCwgcGFzY2FsQ2FzZShzY2hlbWFOYW1lKSkpO1xuICAgICAgICAgICAgbGV0IGRiID0gbmV3IERiKGNvbm5lY3RvciwgaTE4bik7XG4gICAgICAgICAgICBkYi5hcHAgPSBhcHA7XG5cbiAgICAgICAgICAgIERiQ2FjaGVbc2NoZW1hTmFtZV0gPSBkYjsgICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIGRiO1xuICAgICAgICB9OyAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGFwcC5tb2RlbCA9IChtb2RlbEZ1bGxOYW1lKSA9PiB7XG4gICAgICAgICAgICBsZXQgWyBzY2hlbWFOYW1lLCBtb2RlbE5hbWUgXSA9IG1vZGVsRnVsbE5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHJldHVybiBhcHAuZGIoc2NoZW1hTmFtZSkubW9kZWwobW9kZWxOYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG59OyJdfQ==