"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  Promise,
  pascalCase,
  eachAsync_
} = require('rk-utils');

const {
  Feature,
  Literal
} = require('..').enum;

const {
  InvalidConfiguration
} = require('../utils/Errors');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, oolong) => {
    app.oolong = oolong;

    if (!oolong.schemaDeployment) {
      throw new InvalidConfiguration(`Missing "schemaDeployment" in oolong config.`, app, 'oolong.schemaDeployment');
    }

    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = oolong.schemaDeployment[schemaName];

      if (!schemaInfo || !schemaInfo.dataSource) {
        throw new InvalidConfiguration(`Missing "dataSource" in schemaDeployment section of oolong config.`, app, `oolong.schemaDeployment.${schemaName}.dataSource`);
      }

      let connector = app.getService(schemaInfo.dataSource);

      if (!connector) {
        throw new InvalidConfiguration(`Invalid data source.`, app, schemaInfo.dataSource);
      }

      let i18n = app.getService('i18n') || app.__;

      const Db = require(path.join(app.backendPath, Literal.MODELS_PATH, pascalCase(schemaName)));

      let db = new Db(connector, i18n);
      db.app = app;
      DbCache[schemaName] = db;
      return db;
    };

    app.model = modelFullName => {
      let [schemaName, modelName] = modelFullName.split('.');
      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9vb2xvbmcuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiUHJvbWlzZSIsInBhc2NhbENhc2UiLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsIkxpdGVyYWwiLCJlbnVtIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJEYkNhY2hlIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJJTklUIiwibG9hZF8iLCJhcHAiLCJvb2xvbmciLCJzY2hlbWFEZXBsb3ltZW50IiwiZGIiLCJzY2hlbWFOYW1lIiwic2NoZW1hSW5mbyIsImRhdGFTb3VyY2UiLCJjb25uZWN0b3IiLCJnZXRTZXJ2aWNlIiwiaTE4biIsIl9fIiwiRGIiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJNT0RFTFNfUEFUSCIsIm1vZGVsIiwibW9kZWxGdWxsTmFtZSIsIm1vZGVsTmFtZSIsInNwbGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLE9BQUw7QUFBY0MsRUFBQUEsVUFBZDtBQUEwQkMsRUFBQUE7QUFBMUIsSUFBeUNKLE9BQU8sQ0FBQyxVQUFELENBQXREOztBQUNBLE1BQU07QUFBRUssRUFBQUEsT0FBRjtBQUFXQyxFQUFBQTtBQUFYLElBQXVCTixPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNPLElBQTNDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQlIsT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUVBLE1BQU1TLE9BQU8sR0FBRyxFQUFoQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFLYkMsRUFBQUEsSUFBSSxFQUFFUCxPQUFPLENBQUNRLElBTEQ7QUFjYkMsRUFBQUEsS0FBSyxFQUFFLE9BQU9DLEdBQVAsRUFBWUMsTUFBWixLQUF1QjtBQUMxQkQsSUFBQUEsR0FBRyxDQUFDQyxNQUFKLEdBQWFBLE1BQWI7O0FBRUEsUUFBSSxDQUFDQSxNQUFNLENBQUNDLGdCQUFaLEVBQThCO0FBQzFCLFlBQU0sSUFBSVQsb0JBQUosQ0FDRCw4Q0FEQyxFQUVGTyxHQUZFLEVBR0YseUJBSEUsQ0FBTjtBQUtIOztBQUVEQSxJQUFBQSxHQUFHLENBQUNHLEVBQUosR0FBVUMsVUFBRCxJQUFnQjtBQUNyQixVQUFJVixPQUFPLENBQUNVLFVBQUQsQ0FBWCxFQUF5QixPQUFPVixPQUFPLENBQUNVLFVBQUQsQ0FBZDtBQUV6QixVQUFJQyxVQUFVLEdBQUdKLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JFLFVBQXhCLENBQWpCOztBQUNBLFVBQUksQ0FBQ0MsVUFBRCxJQUFlLENBQUNBLFVBQVUsQ0FBQ0MsVUFBL0IsRUFBMkM7QUFFdkMsY0FBTSxJQUFJYixvQkFBSixDQUNELG9FQURDLEVBRUZPLEdBRkUsRUFHRCwyQkFBMEJJLFVBQVcsYUFIcEMsQ0FBTjtBQUtIOztBQUVELFVBQUlHLFNBQVMsR0FBR1AsR0FBRyxDQUFDUSxVQUFKLENBQWVILFVBQVUsQ0FBQ0MsVUFBMUIsQ0FBaEI7O0FBQ0EsVUFBSSxDQUFDQyxTQUFMLEVBQWdCO0FBQ1osY0FBTSxJQUFJZCxvQkFBSixDQUNELHNCQURDLEVBRUZPLEdBRkUsRUFHRkssVUFBVSxDQUFDQyxVQUhULENBQU47QUFLSDs7QUFFRCxVQUFJRyxJQUFJLEdBQUdULEdBQUcsQ0FBQ1EsVUFBSixDQUFlLE1BQWYsS0FBMEJSLEdBQUcsQ0FBQ1UsRUFBekM7O0FBRUEsWUFBTUMsRUFBRSxHQUFHMUIsT0FBTyxDQUFDRCxJQUFJLENBQUM0QixJQUFMLENBQVVaLEdBQUcsQ0FBQ2EsV0FBZCxFQUEyQnRCLE9BQU8sQ0FBQ3VCLFdBQW5DLEVBQWdEMUIsVUFBVSxDQUFDZ0IsVUFBRCxDQUExRCxDQUFELENBQWxCOztBQUNBLFVBQUlELEVBQUUsR0FBRyxJQUFJUSxFQUFKLENBQU9KLFNBQVAsRUFBa0JFLElBQWxCLENBQVQ7QUFDQU4sTUFBQUEsRUFBRSxDQUFDSCxHQUFILEdBQVNBLEdBQVQ7QUFFQU4sTUFBQUEsT0FBTyxDQUFDVSxVQUFELENBQVAsR0FBc0JELEVBQXRCO0FBRUEsYUFBT0EsRUFBUDtBQUNILEtBL0JEOztBQWlDQUgsSUFBQUEsR0FBRyxDQUFDZSxLQUFKLEdBQWFDLGFBQUQsSUFBbUI7QUFDM0IsVUFBSSxDQUFFWixVQUFGLEVBQWNhLFNBQWQsSUFBNEJELGFBQWEsQ0FBQ0UsS0FBZCxDQUFvQixHQUFwQixDQUFoQztBQUNBLGFBQU9sQixHQUFHLENBQUNHLEVBQUosQ0FBT0MsVUFBUCxFQUFtQlcsS0FBbkIsQ0FBeUJFLFNBQXpCLENBQVA7QUFDSCxLQUhEO0FBSUg7QUE5RFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgb29sb25nIERTTFxuICogQG1vZHVsZSBGZWF0dXJlX09vbG9uZ1xuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIFByb21pc2UsIHBhc2NhbENhc2UsIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEZlYXR1cmUsIExpdGVyYWwgfSA9IHJlcXVpcmUoJy4uJykuZW51bTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG5jb25zdCBEYkNhY2hlID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgaW5pdCBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLklOSVQsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtBcHB9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvb2xvbmcgLSBPb2xvbmcgc2V0dGluZ3NcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvb2xvbmcubG9nU3FsU3RhdGVtZW50XSAtIEZsYWcgdG8gdHVybiBvbiBzcWwgZGVidWdnaW5nIGxvZ1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgb29sb25nKSA9PiB7XG4gICAgICAgIGFwcC5vb2xvbmcgPSBvb2xvbmc7XG5cbiAgICAgICAgaWYgKCFvb2xvbmcuc2NoZW1hRGVwbG95bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgIGBNaXNzaW5nIFwic2NoZW1hRGVwbG95bWVudFwiIGluIG9vbG9uZyBjb25maWcuYCxcbiAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgJ29vbG9uZy5zY2hlbWFEZXBsb3ltZW50J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcC5kYiA9IChzY2hlbWFOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoRGJDYWNoZVtzY2hlbWFOYW1lXSkgcmV0dXJuIERiQ2FjaGVbc2NoZW1hTmFtZV07XG5cbiAgICAgICAgICAgIGxldCBzY2hlbWFJbmZvID0gb29sb25nLnNjaGVtYURlcGxveW1lbnRbc2NoZW1hTmFtZV07XG4gICAgICAgICAgICBpZiAoIXNjaGVtYUluZm8gfHwgIXNjaGVtYUluZm8uZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgYE1pc3NpbmcgXCJkYXRhU291cmNlXCIgaW4gc2NoZW1hRGVwbG95bWVudCBzZWN0aW9uIG9mIG9vbG9uZyBjb25maWcuYCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgb29sb25nLnNjaGVtYURlcGxveW1lbnQuJHtzY2hlbWFOYW1lfS5kYXRhU291cmNlYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjb25uZWN0b3IgPSBhcHAuZ2V0U2VydmljZShzY2hlbWFJbmZvLmRhdGFTb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFjb25uZWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIGBJbnZhbGlkIGRhdGEgc291cmNlLmAsXG4gICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hSW5mby5kYXRhU291cmNlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGkxOG4gPSBhcHAuZ2V0U2VydmljZSgnaTE4bicpIHx8IGFwcC5fXztcblxuICAgICAgICAgICAgY29uc3QgRGIgPSByZXF1aXJlKHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuTU9ERUxTX1BBVEgsIHBhc2NhbENhc2Uoc2NoZW1hTmFtZSkpKTtcbiAgICAgICAgICAgIGxldCBkYiA9IG5ldyBEYihjb25uZWN0b3IsIGkxOG4pO1xuICAgICAgICAgICAgZGIuYXBwID0gYXBwO1xuXG4gICAgICAgICAgICBEYkNhY2hlW3NjaGVtYU5hbWVdID0gZGI7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiBkYjtcbiAgICAgICAgfTsgICAgICAgXG4gICAgICAgIFxuICAgICAgICBhcHAubW9kZWwgPSAobW9kZWxGdWxsTmFtZSkgPT4ge1xuICAgICAgICAgICAgbGV0IFsgc2NoZW1hTmFtZSwgbW9kZWxOYW1lIF0gPSBtb2RlbEZ1bGxOYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICByZXR1cm4gYXBwLmRiKHNjaGVtYU5hbWUpLm1vZGVsKG1vZGVsTmFtZSk7XG4gICAgICAgIH07XG4gICAgfVxufTsiXX0=