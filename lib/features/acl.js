"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const Acl = tryRequire('acl');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.PLUGIN,
  load_: async function (app, config) {
    let backend = config.backend || 'memory';
    let backendStore;

    switch (backend) {
      case 'memory':
        backendStore = new Acl.memoryBackend();
        break;

      case 'mongodb':
        if (!config.dataSource) {
          throw new InvalidConfiguration('"dataSource" is required for mongodb backend of acl.', app, 'acl.dataSource');
        }

        let mongodb = app.getService(config.dataSource);

        if (!mongodb) {
          throw new InvalidConfiguration(`Data source "${config.dataSource}" not found.`, app, 'acl.dataSource');
        }

        backendStore = new Acl.mongodbBackend((await mongodb.connect_()), config.prefix);
        break;

      case 'redis':
        throw new Error('to be implemented');
        break;

      default:
        throw new InvalidConfiguration('Unsupported acl backend: ' + backend, app, 'acl.backend');
    }

    app.acl = new Acl(backendStore);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9hY2wuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZWFjaEFzeW5jXyIsIkZlYXR1cmUiLCJlbnVtIiwidHJ5UmVxdWlyZSIsIkFjbCIsIkludmFsaWRDb25maWd1cmF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJQTFVHSU4iLCJsb2FkXyIsImFwcCIsImNvbmZpZyIsImJhY2tlbmQiLCJiYWNrZW5kU3RvcmUiLCJtZW1vcnlCYWNrZW5kIiwiZGF0YVNvdXJjZSIsIm1vbmdvZGIiLCJnZXRTZXJ2aWNlIiwibW9uZ29kYkJhY2tlbmQiLCJjb25uZWN0XyIsInByZWZpeCIsIkVycm9yIiwiYWNsIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JGLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFjSCxPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNJLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkwsT0FBTyxDQUFDLGdDQUFELENBQTlCOztBQUNBLE1BQU1NLEdBQUcsR0FBR0QsVUFBVSxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQTJCUCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBRUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsTUFORDtBQWlCYkMsRUFBQUEsS0FBSyxFQUFFLGdCQUFnQkMsR0FBaEIsRUFBcUJDLE1BQXJCLEVBQTZCO0FBQ2hDLFFBQUlDLE9BQU8sR0FBR0QsTUFBTSxDQUFDQyxPQUFQLElBQWtCLFFBQWhDO0FBQ0EsUUFBSUMsWUFBSjs7QUFFQSxZQUFRRCxPQUFSO0FBQ0ksV0FBSyxRQUFMO0FBQ0FDLFFBQUFBLFlBQVksR0FBRyxJQUFJVixHQUFHLENBQUNXLGFBQVIsRUFBZjtBQUNBOztBQUVBLFdBQUssU0FBTDtBQUNBLFlBQUksQ0FBQ0gsTUFBTSxDQUFDSSxVQUFaLEVBQXdCO0FBQ3BCLGdCQUFNLElBQUlYLG9CQUFKLENBQXlCLHNEQUF6QixFQUFpRk0sR0FBakYsRUFBc0YsZ0JBQXRGLENBQU47QUFDSDs7QUFFRCxZQUFJTSxPQUFPLEdBQUdOLEdBQUcsQ0FBQ08sVUFBSixDQUFlTixNQUFNLENBQUNJLFVBQXRCLENBQWQ7O0FBQ0EsWUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDVixnQkFBTSxJQUFJWixvQkFBSixDQUEwQixnQkFBZU8sTUFBTSxDQUFDSSxVQUFXLGNBQTNELEVBQTBFTCxHQUExRSxFQUErRSxnQkFBL0UsQ0FBTjtBQUNIOztBQUVERyxRQUFBQSxZQUFZLEdBQUcsSUFBSVYsR0FBRyxDQUFDZSxjQUFSLEVBQXVCLE1BQU1GLE9BQU8sQ0FBQ0csUUFBUixFQUE3QixHQUFpRFIsTUFBTSxDQUFDUyxNQUF4RCxDQUFmO0FBQ0E7O0FBRUEsV0FBSyxPQUFMO0FBQ0EsY0FBTSxJQUFJQyxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNBOztBQUVBO0FBQ0EsY0FBTSxJQUFJakIsb0JBQUosQ0FBeUIsOEJBQThCUSxPQUF2RCxFQUFnRUYsR0FBaEUsRUFBcUUsYUFBckUsQ0FBTjtBQXZCSjs7QUEwQkFBLElBQUFBLEdBQUcsQ0FBQ1ksR0FBSixHQUFVLElBQUluQixHQUFKLENBQVFVLFlBQVIsQ0FBVjtBQUNIO0FBaERZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGFjbCBmZWF0dXJlXG4gKiBAbW9kdWxlIEZlYXR1cmVfQWNsXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEFjbCA9IHRyeVJlcXVpcmUoJ2FjbCcpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuUExVR0lOLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7Um91dGFibGV9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBBY2wgc2V0dGluZ3NcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmJhY2tlbmQgLSBCYWNrZW5kIHN0b3JlIHR5cGUgb2YgYWNsLCBtZW1vcnksIG1vbmdvZGIsIHJlZGlzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuZGF0YVNvdXJjZV0gLSBTdG9yZSB0eXBlIG9mIGFjbFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29uZmlnLnByZWZpeF0gLSBTdG9yZSBvcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBhc3luYyBmdW5jdGlvbiAoYXBwLCBjb25maWcpIHtcbiAgICAgICAgbGV0IGJhY2tlbmQgPSBjb25maWcuYmFja2VuZCB8fCAnbWVtb3J5JztcbiAgICAgICAgbGV0IGJhY2tlbmRTdG9yZTtcblxuICAgICAgICBzd2l0Y2ggKGJhY2tlbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ21lbW9yeSc6XG4gICAgICAgICAgICBiYWNrZW5kU3RvcmUgPSBuZXcgQWNsLm1lbW9yeUJhY2tlbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb25nb2RiJzpcbiAgICAgICAgICAgIGlmICghY29uZmlnLmRhdGFTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oJ1wiZGF0YVNvdXJjZVwiIGlzIHJlcXVpcmVkIGZvciBtb25nb2RiIGJhY2tlbmQgb2YgYWNsLicsIGFwcCwgJ2FjbC5kYXRhU291cmNlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBtb25nb2RiID0gYXBwLmdldFNlcnZpY2UoY29uZmlnLmRhdGFTb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFtb25nb2RiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKGBEYXRhIHNvdXJjZSBcIiR7Y29uZmlnLmRhdGFTb3VyY2V9XCIgbm90IGZvdW5kLmAsIGFwcCwgJ2FjbC5kYXRhU291cmNlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJhY2tlbmRTdG9yZSA9IG5ldyBBY2wubW9uZ29kYkJhY2tlbmQoYXdhaXQgbW9uZ29kYi5jb25uZWN0XygpLCBjb25maWcucHJlZml4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyZWRpcyc6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvIGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbignVW5zdXBwb3J0ZWQgYWNsIGJhY2tlbmQ6ICcgKyBiYWNrZW5kLCBhcHAsICdhY2wuYmFja2VuZCcpO1xuICAgICAgICB9ICAgICAgICBcbiAgICBcbiAgICAgICAgYXBwLmFjbCA9IG5ldyBBY2woYmFja2VuZFN0b3JlKTsgICAgICAgXG4gICAgfVxufTsiXX0=