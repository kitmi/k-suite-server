"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const KoaPassport = tryRequire('koa-passport').KoaPassport;

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, config) {
    let passport = new KoaPassport();

    if (_.isEmpty(config) || _.isEmpty(config.strategies)) {
      throw new InvalidConfiguration('Missing passport strategies.', app, 'passport.strategies');
    }

    let initializeMiddleware = passport.initialize(config.init);
    app.on('before:' + Feature.PLUGIN, () => {
      app.useMiddlewares(app.router, config.useSession ? [initializeMiddleware, passport.session()] : initializeMiddleware);
    });
    app.registerService('passport', passport);
    let strategies = Array.isArray(config.strategies) ? config.strategies : [config.strategies];
    return eachAsync_(strategies, async strategy => {
      let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');

      let strategyInitiator = require(strategyScript);

      return strategyInitiator(app, passport);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsImVudW0iLCJ0cnlSZXF1aXJlIiwiS29hUGFzc3BvcnQiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiY29uZmlnIiwicGFzc3BvcnQiLCJpc0VtcHR5Iiwic3RyYXRlZ2llcyIsImluaXRpYWxpemVNaWRkbGV3YXJlIiwiaW5pdGlhbGl6ZSIsImluaXQiLCJvbiIsIlBMVUdJTiIsInVzZU1pZGRsZXdhcmVzIiwicm91dGVyIiwidXNlU2Vzc2lvbiIsInNlc3Npb24iLCJyZWdpc3RlclNlcnZpY2UiLCJBcnJheSIsImlzQXJyYXkiLCJzdHJhdGVneSIsInN0cmF0ZWd5U2NyaXB0Iiwiam9pbiIsImJhY2tlbmRQYXRoIiwic3RyYXRlZ3lJbml0aWF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWNILE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FBY0ksSUFBbEM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCTCxPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBQ0EsTUFBTU0sV0FBVyxHQUFHRCxVQUFVLENBQUMsY0FBRCxDQUFWLENBQTJCQyxXQUEvQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJQLE9BQU8sQ0FBQyxXQUFELENBQXhDOztBQUVBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFUCxPQUFPLENBQUNRLE9BTkQ7QUFvQmJDLEVBQUFBLEtBQUssRUFBRSxVQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDMUIsUUFBSUMsUUFBUSxHQUFHLElBQUlULFdBQUosRUFBZjs7QUFDQSxRQUFJTCxDQUFDLENBQUNlLE9BQUYsQ0FBVUYsTUFBVixLQUFxQmIsQ0FBQyxDQUFDZSxPQUFGLENBQVVGLE1BQU0sQ0FBQ0csVUFBakIsQ0FBekIsRUFBdUQ7QUFDbkQsWUFBTSxJQUFJVixvQkFBSixDQUNGLDhCQURFLEVBRUZNLEdBRkUsRUFHRixxQkFIRSxDQUFOO0FBS0g7O0FBRUQsUUFBSUssb0JBQW9CLEdBQUdILFFBQVEsQ0FBQ0ksVUFBVCxDQUFvQkwsTUFBTSxDQUFDTSxJQUEzQixDQUEzQjtBQUVBUCxJQUFBQSxHQUFHLENBQUNRLEVBQUosQ0FBTyxZQUFZbEIsT0FBTyxDQUFDbUIsTUFBM0IsRUFBbUMsTUFBTTtBQUNyQ1QsTUFBQUEsR0FBRyxDQUFDVSxjQUFKLENBQW1CVixHQUFHLENBQUNXLE1BQXZCLEVBQStCVixNQUFNLENBQUNXLFVBQVAsR0FBb0IsQ0FBRVAsb0JBQUYsRUFBd0JILFFBQVEsQ0FBQ1csT0FBVCxFQUF4QixDQUFwQixHQUFtRVIsb0JBQWxHO0FBQ0gsS0FGRDtBQUlBTCxJQUFBQSxHQUFHLENBQUNjLGVBQUosQ0FBb0IsVUFBcEIsRUFBZ0NaLFFBQWhDO0FBRUEsUUFBSUUsVUFBVSxHQUFHVyxLQUFLLENBQUNDLE9BQU4sQ0FBY2YsTUFBTSxDQUFDRyxVQUFyQixJQUFtQ0gsTUFBTSxDQUFDRyxVQUExQyxHQUF1RCxDQUFFSCxNQUFNLENBQUNHLFVBQVQsQ0FBeEU7QUFFQSxXQUFPZixVQUFVLENBQUNlLFVBQUQsRUFBYSxNQUFNYSxRQUFOLElBQWtCO0FBQzVDLFVBQUlDLGNBQWMsR0FBR2hDLElBQUksQ0FBQ2lDLElBQUwsQ0FBVW5CLEdBQUcsQ0FBQ29CLFdBQWQsRUFBMkIsV0FBM0IsRUFBd0NILFFBQVEsR0FBRyxLQUFuRCxDQUFyQjs7QUFDQSxVQUFJSSxpQkFBaUIsR0FBR2xDLE9BQU8sQ0FBQytCLGNBQUQsQ0FBL0I7O0FBQ0EsYUFBT0csaUJBQWlCLENBQUNyQixHQUFELEVBQU1FLFFBQU4sQ0FBeEI7QUFDSCxLQUpnQixDQUFqQjtBQUtIO0FBN0NZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIHBhc3Nwb3J0IGZlYXR1cmVcbiAqIEBtb2R1bGUgRmVhdHVyZV9QYXNzcG9ydFxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEZlYXR1cmUgfSA9IHJlcXVpcmUoJy4uJykuZW51bTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnQGstc3VpdGUvYXBwL2xpYi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCBLb2FQYXNzcG9ydCA9IHRyeVJlcXVpcmUoJ2tvYS1wYXNzcG9ydCcpLktvYVBhc3Nwb3J0O1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuU0VSVklDRSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gUGFzc3BvcnQgc2V0dGluZ3NcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtjb25maWcudXNlU2Vzc2lvbj1mYWxzZV0gLSBVc2Ugc2Vzc2lvbiBvciBub3QsIGRlZmF1bHQ6IGZhbHNlXG4gICAgICogIFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb25maWcuaW5pdCAtIFBhc3Nwb3J0IGluaXRpYWxpemF0aW9uIHNldHRpbmdzICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5pbml0LnVzZXJQcm9wZXJ0eT0ndXNlciddIC0gVXNlciBwcm9wZXJ0eSBuYW1lLCBkZWZhdWx0OiB1c2VyICAgICAgXG4gICAgICogXG4gICAgICogQHByb3BlcnR5IHthcnJheX0gY29uZmlnLnN0cmF0ZWdpZXMgLSBQYXNzcG9ydCBzdHJhdGVnaWVzLCBlLmcuIFsgJ2xvY2FsJywgJ2ZhY2Vib29rJyBdXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoYXBwLCBjb25maWcpIHtcbiAgICAgICAgbGV0IHBhc3Nwb3J0ID0gbmV3IEtvYVBhc3Nwb3J0KCk7XG4gICAgICAgIGlmIChfLmlzRW1wdHkoY29uZmlnKSB8fCBfLmlzRW1wdHkoY29uZmlnLnN0cmF0ZWdpZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgJ01pc3NpbmcgcGFzc3BvcnQgc3RyYXRlZ2llcy4nLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAncGFzc3BvcnQuc3RyYXRlZ2llcydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGxldCBpbml0aWFsaXplTWlkZGxld2FyZSA9IHBhc3Nwb3J0LmluaXRpYWxpemUoY29uZmlnLmluaXQpO1xuXG4gICAgICAgIGFwcC5vbignYmVmb3JlOicgKyBGZWF0dXJlLlBMVUdJTiwgKCkgPT4ge1xuICAgICAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKGFwcC5yb3V0ZXIsIGNvbmZpZy51c2VTZXNzaW9uID8gWyBpbml0aWFsaXplTWlkZGxld2FyZSwgcGFzc3BvcnQuc2Vzc2lvbigpIF0gOiBpbml0aWFsaXplTWlkZGxld2FyZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ3Bhc3Nwb3J0JywgcGFzc3BvcnQpO1xuXG4gICAgICAgIGxldCBzdHJhdGVnaWVzID0gQXJyYXkuaXNBcnJheShjb25maWcuc3RyYXRlZ2llcykgPyBjb25maWcuc3RyYXRlZ2llcyA6IFsgY29uZmlnLnN0cmF0ZWdpZXMgXTtcblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhzdHJhdGVnaWVzLCBhc3luYyBzdHJhdGVneSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RyYXRlZ3lTY3JpcHQgPSBwYXRoLmpvaW4oYXBwLmJhY2tlbmRQYXRoLCAncGFzc3BvcnRzJywgc3RyYXRlZ3kgKyAnLmpzJyk7XG4gICAgICAgICAgICBsZXQgc3RyYXRlZ3lJbml0aWF0b3IgPSByZXF1aXJlKHN0cmF0ZWd5U2NyaXB0KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJhdGVneUluaXRpYXRvcihhcHAsIHBhc3Nwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTsiXX0=