"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const KoaPassport = tryRequire('koa-passport').KoaPassport;

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, config) {
    let passport = new KoaPassport();

    if (_.isEmpty(config) || _.isEmpty(config.strategies)) {
      throw new InvalidConfiguration('Missing passport strategies.', app, 'passport.strategies');
    }

    passport.config = {
      init: { ...config.init
      },
      auth: {
        loginUrl: '/login',
        successReturnToOrRedirect: '/',
        ...config.auth
      },
      ..._.omit(config, ['init', 'auth'])
    };
    let initializeMiddleware = passport.initialize(passport.config.init);
    app.on('before:' + Feature.PLUGIN, () => {
      app.useMiddlewares(app.router, passport.config.useSession ? [initializeMiddleware, passport.session()] : initializeMiddleware);
    });
    app.registerService('passport', passport);
    let strategies = Array.isArray(config.strategies) ? config.strategies : [config.strategies];
    return eachAsync_(strategies, async strategy => {
      let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');

      let strategyInitiator = require(strategyScript);

      return strategyInitiator(app, passport);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsImVudW0iLCJ0cnlSZXF1aXJlIiwiS29hUGFzc3BvcnQiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiY29uZmlnIiwicGFzc3BvcnQiLCJpc0VtcHR5Iiwic3RyYXRlZ2llcyIsImluaXQiLCJhdXRoIiwibG9naW5VcmwiLCJzdWNjZXNzUmV0dXJuVG9PclJlZGlyZWN0Iiwib21pdCIsImluaXRpYWxpemVNaWRkbGV3YXJlIiwiaW5pdGlhbGl6ZSIsIm9uIiwiUExVR0lOIiwidXNlTWlkZGxld2FyZXMiLCJyb3V0ZXIiLCJ1c2VTZXNzaW9uIiwic2Vzc2lvbiIsInJlZ2lzdGVyU2VydmljZSIsIkFycmF5IiwiaXNBcnJheSIsInN0cmF0ZWd5Iiwic3RyYXRlZ3lTY3JpcHQiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJzdHJhdGVneUluaXRpYXRvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CRixPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBY0gsT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjSSxJQUFsQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBaUJMLE9BQU8sQ0FBQyxnQ0FBRCxDQUE5Qjs7QUFDQSxNQUFNTSxXQUFXLEdBQUdELFVBQVUsQ0FBQyxjQUFELENBQVYsQ0FBMkJDLFdBQS9DOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQlAsT0FBTyxDQUFDLFdBQUQsQ0FBeEM7O0FBRUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsT0FORDtBQXlCYkMsRUFBQUEsS0FBSyxFQUFFLFVBQVVDLEdBQVYsRUFBZUMsTUFBZixFQUF1QjtBQUMxQixRQUFJQyxRQUFRLEdBQUcsSUFBSVQsV0FBSixFQUFmOztBQUNBLFFBQUlMLENBQUMsQ0FBQ2UsT0FBRixDQUFVRixNQUFWLEtBQXFCYixDQUFDLENBQUNlLE9BQUYsQ0FBVUYsTUFBTSxDQUFDRyxVQUFqQixDQUF6QixFQUF1RDtBQUNuRCxZQUFNLElBQUlWLG9CQUFKLENBQ0YsOEJBREUsRUFFRk0sR0FGRSxFQUdGLHFCQUhFLENBQU47QUFLSDs7QUFFREUsSUFBQUEsUUFBUSxDQUFDRCxNQUFULEdBQWtCO0FBQ2RJLE1BQUFBLElBQUksRUFBRSxFQUFFLEdBQUdKLE1BQU0sQ0FBQ0k7QUFBWixPQURRO0FBRWRDLE1BQUFBLElBQUksRUFBRTtBQUFFQyxRQUFBQSxRQUFRLEVBQUUsUUFBWjtBQUFzQkMsUUFBQUEseUJBQXlCLEVBQUUsR0FBakQ7QUFBc0QsV0FBR1AsTUFBTSxDQUFDSztBQUFoRSxPQUZRO0FBR2QsU0FBR2xCLENBQUMsQ0FBQ3FCLElBQUYsQ0FBT1IsTUFBUCxFQUFlLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBZjtBQUhXLEtBQWxCO0FBTUEsUUFBSVMsb0JBQW9CLEdBQUdSLFFBQVEsQ0FBQ1MsVUFBVCxDQUFvQlQsUUFBUSxDQUFDRCxNQUFULENBQWdCSSxJQUFwQyxDQUEzQjtBQUVBTCxJQUFBQSxHQUFHLENBQUNZLEVBQUosQ0FBTyxZQUFZdEIsT0FBTyxDQUFDdUIsTUFBM0IsRUFBbUMsTUFBTTtBQUNyQ2IsTUFBQUEsR0FBRyxDQUFDYyxjQUFKLENBQW1CZCxHQUFHLENBQUNlLE1BQXZCLEVBQStCYixRQUFRLENBQUNELE1BQVQsQ0FBZ0JlLFVBQWhCLEdBQTZCLENBQUVOLG9CQUFGLEVBQXdCUixRQUFRLENBQUNlLE9BQVQsRUFBeEIsQ0FBN0IsR0FBNEVQLG9CQUEzRztBQUNILEtBRkQ7QUFJQVYsSUFBQUEsR0FBRyxDQUFDa0IsZUFBSixDQUFvQixVQUFwQixFQUFnQ2hCLFFBQWhDO0FBRUEsUUFBSUUsVUFBVSxHQUFHZSxLQUFLLENBQUNDLE9BQU4sQ0FBY25CLE1BQU0sQ0FBQ0csVUFBckIsSUFBbUNILE1BQU0sQ0FBQ0csVUFBMUMsR0FBdUQsQ0FBRUgsTUFBTSxDQUFDRyxVQUFULENBQXhFO0FBRUEsV0FBT2YsVUFBVSxDQUFDZSxVQUFELEVBQWEsTUFBTWlCLFFBQU4sSUFBa0I7QUFDNUMsVUFBSUMsY0FBYyxHQUFHcEMsSUFBSSxDQUFDcUMsSUFBTCxDQUFVdkIsR0FBRyxDQUFDd0IsV0FBZCxFQUEyQixXQUEzQixFQUF3Q0gsUUFBUSxHQUFHLEtBQW5ELENBQXJCOztBQUNBLFVBQUlJLGlCQUFpQixHQUFHdEMsT0FBTyxDQUFDbUMsY0FBRCxDQUEvQjs7QUFDQSxhQUFPRyxpQkFBaUIsQ0FBQ3pCLEdBQUQsRUFBTUUsUUFBTixDQUF4QjtBQUNILEtBSmdCLENBQWpCO0FBS0g7QUF4RFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgcGFzc3BvcnQgZmVhdHVyZVxuICogQG1vZHVsZSBGZWF0dXJlX1Bhc3Nwb3J0XG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEtvYVBhc3Nwb3J0ID0gdHJ5UmVxdWlyZSgna29hLXBhc3Nwb3J0JykuS29hUGFzc3BvcnQ7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi9FcnJvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7Um91dGFibGV9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBQYXNzcG9ydCBzZXR0aW5nc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NvbmZpZy51c2VTZXNzaW9uPWZhbHNlXSAtIFVzZSBzZXNzaW9uIG9yIG5vdCwgZGVmYXVsdDogZmFsc2VcbiAgICAgKiAgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IGNvbmZpZy5pbml0IC0gUGFzc3BvcnQgaW5pdGlhbGl6YXRpb24gc2V0dGluZ3MgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmluaXQudXNlclByb3BlcnR5PSd1c2VyJ10gLSBVc2VyIHByb3BlcnR5IG5hbWUsIGRlZmF1bHQ6IHVzZXIgICAgICBcbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gY29uZmlnLmF1dGggLSBQYXNzcG9ydCBhdXRoZW50aWNhdGlvbiBzZXR0aW5ncyAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbmZpZy5hdXRoLmxvZ2luVXJsIC0gVGhlIHVybCBvZiBsb2dpbiBwYWdlICAgICAgICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpZy5hdXRoLnN1Y2Nlc3NSZWRpcmVjdF0gLSBBZnRlciBzdWNjZXNzZnVsIGxvZ2luLCB1c2VyIHdpbGwgcmVkaXJlY3QgdG8gZ2l2ZW4gVVJMIGlmIHN1Y2Nlc3NSZXR1cm5Ub09yUmVkaXJlY3Qgbm90IHNldFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmF1dGguc3VjY2Vzc1JldHVyblRvT3JSZWRpcmVjdD0nLyddIC0gQWZ0ZXIgc3VjY2Vzc2Z1bCBsb2dpbiwgaWYgc2Vzc2lvbi5yZXR1cm5UbyBleGlzdHMsIHRoZW4gdGhlIHVzZXIgd2lsbCBiZSByZWRpcmVjdGVkIHRvIHNlc3Npb24ucmV0dXJuVG8gZWxzZSB0byB0aGUgZ2l2ZW4gVVJMICAgICBcbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkge2FycmF5fSBjb25maWcuc3RyYXRlZ2llcyAtIFBhc3Nwb3J0IHN0cmF0ZWdpZXMsIGUuZy4gWyAnbG9jYWwnLCAnZmFjZWJvb2snIF1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGZ1bmN0aW9uIChhcHAsIGNvbmZpZykge1xuICAgICAgICBsZXQgcGFzc3BvcnQgPSBuZXcgS29hUGFzc3BvcnQoKTtcbiAgICAgICAgaWYgKF8uaXNFbXB0eShjb25maWcpIHx8IF8uaXNFbXB0eShjb25maWcuc3RyYXRlZ2llcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAnTWlzc2luZyBwYXNzcG9ydCBzdHJhdGVnaWVzLicsXG4gICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICdwYXNzcG9ydC5zdHJhdGVnaWVzJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgcGFzc3BvcnQuY29uZmlnID0geyAgICAgICAgICAgICBcbiAgICAgICAgICAgIGluaXQ6IHsgLi4uY29uZmlnLmluaXQgfSxcbiAgICAgICAgICAgIGF1dGg6IHsgbG9naW5Vcmw6ICcvbG9naW4nLCBzdWNjZXNzUmV0dXJuVG9PclJlZGlyZWN0OiAnLycsIC4uLmNvbmZpZy5hdXRoIH0sIFxuICAgICAgICAgICAgLi4uXy5vbWl0KGNvbmZpZywgWydpbml0JywgJ2F1dGgnXSlcbiAgICAgICAgfTsgICAgICAgIFxuXG4gICAgICAgIGxldCBpbml0aWFsaXplTWlkZGxld2FyZSA9IHBhc3Nwb3J0LmluaXRpYWxpemUocGFzc3BvcnQuY29uZmlnLmluaXQpO1xuXG4gICAgICAgIGFwcC5vbignYmVmb3JlOicgKyBGZWF0dXJlLlBMVUdJTiwgKCkgPT4ge1xuICAgICAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKGFwcC5yb3V0ZXIsIHBhc3Nwb3J0LmNvbmZpZy51c2VTZXNzaW9uID8gWyBpbml0aWFsaXplTWlkZGxld2FyZSwgcGFzc3BvcnQuc2Vzc2lvbigpIF0gOiBpbml0aWFsaXplTWlkZGxld2FyZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcC5yZWdpc3RlclNlcnZpY2UoJ3Bhc3Nwb3J0JywgcGFzc3BvcnQpO1xuXG4gICAgICAgIGxldCBzdHJhdGVnaWVzID0gQXJyYXkuaXNBcnJheShjb25maWcuc3RyYXRlZ2llcykgPyBjb25maWcuc3RyYXRlZ2llcyA6IFsgY29uZmlnLnN0cmF0ZWdpZXMgXTtcblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhzdHJhdGVnaWVzLCBhc3luYyBzdHJhdGVneSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RyYXRlZ3lTY3JpcHQgPSBwYXRoLmpvaW4oYXBwLmJhY2tlbmRQYXRoLCAncGFzc3BvcnRzJywgc3RyYXRlZ3kgKyAnLmpzJyk7XG4gICAgICAgICAgICBsZXQgc3RyYXRlZ3lJbml0aWF0b3IgPSByZXF1aXJlKHN0cmF0ZWd5U2NyaXB0KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJhdGVneUluaXRpYXRvcihhcHAsIHBhc3Nwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTsiXX0=