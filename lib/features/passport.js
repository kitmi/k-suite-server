"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const KoaPassport = tryRequire('koa-passport').KoaPassport;

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, config) {
    let passport = new KoaPassport();

    if (_.isEmpty(config) || _.isEmpty(config.strategies)) {
      throw new InvalidConfiguration('Missing passport strategies.', app, 'passport.strategies');
    }

    let initializeMiddleware = passport.initialize(config.init);
    passport.middlewares = config.useSession ? [initializeMiddleware, passport.session()] : initializeMiddleware;
    app.on('before:' + Feature.PLUGIN, () => {
      app.useMiddlewares(app.router, passport.middlewares);
    });

    passport.hasStrategy = name => {
      return name in passport._strategies;
    };

    app.registerService('passport', passport);

    if (config.exposeToServer && app !== app.server) {
      app.server.registerService('passport', passport);
    }

    let strategies = Array.isArray(config.strategies) ? config.strategies : [config.strategies];
    return eachAsync_(strategies, async strategy => {
      let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');

      let strategyInitiator = require(strategyScript);

      return strategyInitiator(app, passport);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsImVudW0iLCJ0cnlSZXF1aXJlIiwiS29hUGFzc3BvcnQiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiY29uZmlnIiwicGFzc3BvcnQiLCJpc0VtcHR5Iiwic3RyYXRlZ2llcyIsImluaXRpYWxpemVNaWRkbGV3YXJlIiwiaW5pdGlhbGl6ZSIsImluaXQiLCJtaWRkbGV3YXJlcyIsInVzZVNlc3Npb24iLCJzZXNzaW9uIiwib24iLCJQTFVHSU4iLCJ1c2VNaWRkbGV3YXJlcyIsInJvdXRlciIsImhhc1N0cmF0ZWd5IiwibmFtZSIsIl9zdHJhdGVnaWVzIiwicmVnaXN0ZXJTZXJ2aWNlIiwiZXhwb3NlVG9TZXJ2ZXIiLCJzZXJ2ZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzdHJhdGVneSIsInN0cmF0ZWd5U2NyaXB0Iiwiam9pbiIsImJhY2tlbmRQYXRoIiwic3RyYXRlZ3lJbml0aWF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWNILE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FBY0ksSUFBbEM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCTCxPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBQ0EsTUFBTU0sV0FBVyxHQUFHRCxVQUFVLENBQUMsY0FBRCxDQUFWLENBQTJCQyxXQUEvQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJQLE9BQU8sQ0FBQyxpQkFBRCxDQUF4Qzs7QUFFQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRVAsT0FBTyxDQUFDUSxPQU5EO0FBcUJiQyxFQUFBQSxLQUFLLEVBQUUsVUFBVUMsR0FBVixFQUFlQyxNQUFmLEVBQXVCO0FBQzFCLFFBQUlDLFFBQVEsR0FBRyxJQUFJVCxXQUFKLEVBQWY7O0FBQ0EsUUFBSUwsQ0FBQyxDQUFDZSxPQUFGLENBQVVGLE1BQVYsS0FBcUJiLENBQUMsQ0FBQ2UsT0FBRixDQUFVRixNQUFNLENBQUNHLFVBQWpCLENBQXpCLEVBQXVEO0FBQ25ELFlBQU0sSUFBSVYsb0JBQUosQ0FDRiw4QkFERSxFQUVGTSxHQUZFLEVBR0YscUJBSEUsQ0FBTjtBQUtIOztBQUVELFFBQUlLLG9CQUFvQixHQUFHSCxRQUFRLENBQUNJLFVBQVQsQ0FBb0JMLE1BQU0sQ0FBQ00sSUFBM0IsQ0FBM0I7QUFFQUwsSUFBQUEsUUFBUSxDQUFDTSxXQUFULEdBQXVCUCxNQUFNLENBQUNRLFVBQVAsR0FBb0IsQ0FBRUosb0JBQUYsRUFBd0JILFFBQVEsQ0FBQ1EsT0FBVCxFQUF4QixDQUFwQixHQUFtRUwsb0JBQTFGO0FBRUFMLElBQUFBLEdBQUcsQ0FBQ1csRUFBSixDQUFPLFlBQVlyQixPQUFPLENBQUNzQixNQUEzQixFQUFtQyxNQUFNO0FBQ3JDWixNQUFBQSxHQUFHLENBQUNhLGNBQUosQ0FBbUJiLEdBQUcsQ0FBQ2MsTUFBdkIsRUFBK0JaLFFBQVEsQ0FBQ00sV0FBeEM7QUFDSCxLQUZEOztBQUlBTixJQUFBQSxRQUFRLENBQUNhLFdBQVQsR0FBd0JDLElBQUQsSUFBVTtBQUM3QixhQUFPQSxJQUFJLElBQUlkLFFBQVEsQ0FBQ2UsV0FBeEI7QUFDSCxLQUZEOztBQUlBakIsSUFBQUEsR0FBRyxDQUFDa0IsZUFBSixDQUFvQixVQUFwQixFQUFnQ2hCLFFBQWhDOztBQUVBLFFBQUlELE1BQU0sQ0FBQ2tCLGNBQVAsSUFBeUJuQixHQUFHLEtBQUtBLEdBQUcsQ0FBQ29CLE1BQXpDLEVBQWlEO0FBQzdDcEIsTUFBQUEsR0FBRyxDQUFDb0IsTUFBSixDQUFXRixlQUFYLENBQTJCLFVBQTNCLEVBQXVDaEIsUUFBdkM7QUFDSDs7QUFFRCxRQUFJRSxVQUFVLEdBQUdpQixLQUFLLENBQUNDLE9BQU4sQ0FBY3JCLE1BQU0sQ0FBQ0csVUFBckIsSUFBbUNILE1BQU0sQ0FBQ0csVUFBMUMsR0FBdUQsQ0FBRUgsTUFBTSxDQUFDRyxVQUFULENBQXhFO0FBRUEsV0FBT2YsVUFBVSxDQUFDZSxVQUFELEVBQWEsTUFBTW1CLFFBQU4sSUFBa0I7QUFDNUMsVUFBSUMsY0FBYyxHQUFHdEMsSUFBSSxDQUFDdUMsSUFBTCxDQUFVekIsR0FBRyxDQUFDMEIsV0FBZCxFQUEyQixXQUEzQixFQUF3Q0gsUUFBUSxHQUFHLEtBQW5ELENBQXJCOztBQUNBLFVBQUlJLGlCQUFpQixHQUFHeEMsT0FBTyxDQUFDcUMsY0FBRCxDQUEvQjs7QUFDQSxhQUFPRyxpQkFBaUIsQ0FBQzNCLEdBQUQsRUFBTUUsUUFBTixDQUF4QjtBQUNILEtBSmdCLENBQWpCO0FBS0g7QUF4RFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgcGFzc3BvcnQgZmVhdHVyZVxuICogQG1vZHVsZSBGZWF0dXJlX1Bhc3Nwb3J0XG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAay1zdWl0ZS9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEtvYVBhc3Nwb3J0ID0gdHJ5UmVxdWlyZSgna29hLXBhc3Nwb3J0JykuS29hUGFzc3BvcnQ7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHNlcnZpY2Ugc3RhZ2VcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5TRVJWSUNFLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7Um91dGFibGV9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBQYXNzcG9ydCBzZXR0aW5nc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NvbmZpZy51c2VTZXNzaW9uPWZhbHNlXSAtIFVzZSBzZXNzaW9uIG9yIG5vdCwgZGVmYXVsdDogZmFsc2VcbiAgICAgKiAgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IGNvbmZpZy5pbml0IC0gUGFzc3BvcnQgaW5pdGlhbGl6YXRpb24gc2V0dGluZ3MgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29uZmlnLmluaXQudXNlclByb3BlcnR5PSd1c2VyJ10gLSBVc2VyIHByb3BlcnR5IG5hbWUsIGRlZmF1bHQ6IHVzZXIgICAgICBcbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkge2FycmF5fSBjb25maWcuc3RyYXRlZ2llcyAtIFBhc3Nwb3J0IHN0cmF0ZWdpZXMsIGUuZy4gWyAnbG9jYWwnLCAnZmFjZWJvb2snIF1cbiAgICAgKiBAcHJvcGVydHkge2FycmF5fSBjb25maWcuZXhwb3NlVG9TZXJ2ZXIgLSBFeHBvc2UgdGhlIHBhc3Nwb3J0IHNlcnZjaWUgdG8gd2hpbGUgc2VydmVyXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoYXBwLCBjb25maWcpIHtcbiAgICAgICAgbGV0IHBhc3Nwb3J0ID0gbmV3IEtvYVBhc3Nwb3J0KCk7XG4gICAgICAgIGlmIChfLmlzRW1wdHkoY29uZmlnKSB8fCBfLmlzRW1wdHkoY29uZmlnLnN0cmF0ZWdpZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgJ01pc3NpbmcgcGFzc3BvcnQgc3RyYXRlZ2llcy4nLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAncGFzc3BvcnQuc3RyYXRlZ2llcydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGxldCBpbml0aWFsaXplTWlkZGxld2FyZSA9IHBhc3Nwb3J0LmluaXRpYWxpemUoY29uZmlnLmluaXQpO1xuXG4gICAgICAgIHBhc3Nwb3J0Lm1pZGRsZXdhcmVzID0gY29uZmlnLnVzZVNlc3Npb24gPyBbIGluaXRpYWxpemVNaWRkbGV3YXJlLCBwYXNzcG9ydC5zZXNzaW9uKCkgXSA6IGluaXRpYWxpemVNaWRkbGV3YXJlO1xuXG4gICAgICAgIGFwcC5vbignYmVmb3JlOicgKyBGZWF0dXJlLlBMVUdJTiwgKCkgPT4ge1xuICAgICAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKGFwcC5yb3V0ZXIsIHBhc3Nwb3J0Lm1pZGRsZXdhcmVzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGFzc3BvcnQuaGFzU3RyYXRlZ3kgPSAobmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWUgaW4gcGFzc3BvcnQuX3N0cmF0ZWdpZXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBwLnJlZ2lzdGVyU2VydmljZSgncGFzc3BvcnQnLCBwYXNzcG9ydCk7ICAgICAgICBcblxuICAgICAgICBpZiAoY29uZmlnLmV4cG9zZVRvU2VydmVyICYmIGFwcCAhPT0gYXBwLnNlcnZlcikge1xuICAgICAgICAgICAgYXBwLnNlcnZlci5yZWdpc3RlclNlcnZpY2UoJ3Bhc3Nwb3J0JywgcGFzc3BvcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0cmF0ZWdpZXMgPSBBcnJheS5pc0FycmF5KGNvbmZpZy5zdHJhdGVnaWVzKSA/IGNvbmZpZy5zdHJhdGVnaWVzIDogWyBjb25maWcuc3RyYXRlZ2llcyBdO1xuXG4gICAgICAgIHJldHVybiBlYWNoQXN5bmNfKHN0cmF0ZWdpZXMsIGFzeW5jIHN0cmF0ZWd5ID0+IHtcbiAgICAgICAgICAgIGxldCBzdHJhdGVneVNjcmlwdCA9IHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsICdwYXNzcG9ydHMnLCBzdHJhdGVneSArICcuanMnKTtcbiAgICAgICAgICAgIGxldCBzdHJhdGVneUluaXRpYXRvciA9IHJlcXVpcmUoc3RyYXRlZ3lTY3JpcHQpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmF0ZWd5SW5pdGlhdG9yKGFwcCwgcGFzc3BvcnQpO1xuICAgICAgICB9KTtcbiAgICB9XG59OyJdfQ==