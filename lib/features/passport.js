"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@k-suite/app/lib/utils/Helpers');

const KoaPassport = tryRequire('koa-passport').KoaPassport;

const {
  InvalidConfiguration
} = require('../Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, config) {
    let passport = new KoaPassport();

    if (_.isEmpty(config) || _.isEmpty(config.strategies)) {
      throw new InvalidConfiguration('Missing passport strategies.', app, 'passport.strategies');
    }

    let initializeMiddleware = passport.initialize(config.init);
    passport.middlewares = config.useSession ? [initializeMiddleware, passport.session()] : initializeMiddleware;
    app.on('before:' + Feature.PLUGIN, () => {
      app.useMiddlewares(app.router, passport.middlewares);
    });

    passport.hasStrategy = name => {
      return name in passport._strategies;
    };

    app.registerService('passport', passport);

    if (config.exposeToServer && app !== app.server) {
      app.server.registerService('passport', passport);
    }

    let strategies = Array.isArray(config.strategies) ? config.strategies : [config.strategies];
    return eachAsync_(strategies, async strategy => {
      let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');

      let strategyInitiator = require(strategyScript);

      return strategyInitiator(app, passport);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsImVudW0iLCJ0cnlSZXF1aXJlIiwiS29hUGFzc3BvcnQiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwiYXBwIiwiY29uZmlnIiwicGFzc3BvcnQiLCJpc0VtcHR5Iiwic3RyYXRlZ2llcyIsImluaXRpYWxpemVNaWRkbGV3YXJlIiwiaW5pdGlhbGl6ZSIsImluaXQiLCJtaWRkbGV3YXJlcyIsInVzZVNlc3Npb24iLCJzZXNzaW9uIiwib24iLCJQTFVHSU4iLCJ1c2VNaWRkbGV3YXJlcyIsInJvdXRlciIsImhhc1N0cmF0ZWd5IiwibmFtZSIsIl9zdHJhdGVnaWVzIiwicmVnaXN0ZXJTZXJ2aWNlIiwiZXhwb3NlVG9TZXJ2ZXIiLCJzZXJ2ZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzdHJhdGVneSIsInN0cmF0ZWd5U2NyaXB0Iiwiam9pbiIsImJhY2tlbmRQYXRoIiwic3RyYXRlZ3lJbml0aWF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWNILE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FBY0ksSUFBbEM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCTCxPQUFPLENBQUMsZ0NBQUQsQ0FBOUI7O0FBQ0EsTUFBTU0sV0FBVyxHQUFHRCxVQUFVLENBQUMsY0FBRCxDQUFWLENBQTJCQyxXQUEvQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMkJQLE9BQU8sQ0FBQyxXQUFELENBQXhDOztBQUVBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFNYkMsRUFBQUEsSUFBSSxFQUFFUCxPQUFPLENBQUNRLE9BTkQ7QUFxQmJDLEVBQUFBLEtBQUssRUFBRSxVQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDMUIsUUFBSUMsUUFBUSxHQUFHLElBQUlULFdBQUosRUFBZjs7QUFDQSxRQUFJTCxDQUFDLENBQUNlLE9BQUYsQ0FBVUYsTUFBVixLQUFxQmIsQ0FBQyxDQUFDZSxPQUFGLENBQVVGLE1BQU0sQ0FBQ0csVUFBakIsQ0FBekIsRUFBdUQ7QUFDbkQsWUFBTSxJQUFJVixvQkFBSixDQUNGLDhCQURFLEVBRUZNLEdBRkUsRUFHRixxQkFIRSxDQUFOO0FBS0g7O0FBRUQsUUFBSUssb0JBQW9CLEdBQUdILFFBQVEsQ0FBQ0ksVUFBVCxDQUFvQkwsTUFBTSxDQUFDTSxJQUEzQixDQUEzQjtBQUVBTCxJQUFBQSxRQUFRLENBQUNNLFdBQVQsR0FBdUJQLE1BQU0sQ0FBQ1EsVUFBUCxHQUFvQixDQUFFSixvQkFBRixFQUF3QkgsUUFBUSxDQUFDUSxPQUFULEVBQXhCLENBQXBCLEdBQW1FTCxvQkFBMUY7QUFFQUwsSUFBQUEsR0FBRyxDQUFDVyxFQUFKLENBQU8sWUFBWXJCLE9BQU8sQ0FBQ3NCLE1BQTNCLEVBQW1DLE1BQU07QUFDckNaLE1BQUFBLEdBQUcsQ0FBQ2EsY0FBSixDQUFtQmIsR0FBRyxDQUFDYyxNQUF2QixFQUErQlosUUFBUSxDQUFDTSxXQUF4QztBQUNILEtBRkQ7O0FBSUFOLElBQUFBLFFBQVEsQ0FBQ2EsV0FBVCxHQUF3QkMsSUFBRCxJQUFVO0FBQzdCLGFBQU9BLElBQUksSUFBSWQsUUFBUSxDQUFDZSxXQUF4QjtBQUNILEtBRkQ7O0FBSUFqQixJQUFBQSxHQUFHLENBQUNrQixlQUFKLENBQW9CLFVBQXBCLEVBQWdDaEIsUUFBaEM7O0FBRUEsUUFBSUQsTUFBTSxDQUFDa0IsY0FBUCxJQUF5Qm5CLEdBQUcsS0FBS0EsR0FBRyxDQUFDb0IsTUFBekMsRUFBaUQ7QUFDN0NwQixNQUFBQSxHQUFHLENBQUNvQixNQUFKLENBQVdGLGVBQVgsQ0FBMkIsVUFBM0IsRUFBdUNoQixRQUF2QztBQUNIOztBQUVELFFBQUlFLFVBQVUsR0FBR2lCLEtBQUssQ0FBQ0MsT0FBTixDQUFjckIsTUFBTSxDQUFDRyxVQUFyQixJQUFtQ0gsTUFBTSxDQUFDRyxVQUExQyxHQUF1RCxDQUFFSCxNQUFNLENBQUNHLFVBQVQsQ0FBeEU7QUFFQSxXQUFPZixVQUFVLENBQUNlLFVBQUQsRUFBYSxNQUFNbUIsUUFBTixJQUFrQjtBQUM1QyxVQUFJQyxjQUFjLEdBQUd0QyxJQUFJLENBQUN1QyxJQUFMLENBQVV6QixHQUFHLENBQUMwQixXQUFkLEVBQTJCLFdBQTNCLEVBQXdDSCxRQUFRLEdBQUcsS0FBbkQsQ0FBckI7O0FBQ0EsVUFBSUksaUJBQWlCLEdBQUd4QyxPQUFPLENBQUNxQyxjQUFELENBQS9COztBQUNBLGFBQU9HLGlCQUFpQixDQUFDM0IsR0FBRCxFQUFNRSxRQUFOLENBQXhCO0FBQ0gsS0FKZ0IsQ0FBakI7QUFLSDtBQXhEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBwYXNzcG9ydCBmZWF0dXJlXG4gKiBAbW9kdWxlIEZlYXR1cmVfUGFzc3BvcnRcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBGZWF0dXJlIH0gPSByZXF1aXJlKCcuLicpLmVudW07XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcC9saWIvdXRpbHMvSGVscGVycycpO1xuY29uc3QgS29hUGFzc3BvcnQgPSB0cnlSZXF1aXJlKCdrb2EtcGFzc3BvcnQnKS5Lb2FQYXNzcG9ydDtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL0Vycm9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAtIFBhc3Nwb3J0IHNldHRpbmdzXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY29uZmlnLnVzZVNlc3Npb249ZmFsc2VdIC0gVXNlIHNlc3Npb24gb3Igbm90LCBkZWZhdWx0OiBmYWxzZVxuICAgICAqICBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gY29uZmlnLmluaXQgLSBQYXNzcG9ydCBpbml0aWFsaXphdGlvbiBzZXR0aW5ncyAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuaW5pdC51c2VyUHJvcGVydHk9J3VzZXInXSAtIFVzZXIgcHJvcGVydHkgbmFtZSwgZGVmYXVsdDogdXNlciAgICAgIFxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IGNvbmZpZy5zdHJhdGVnaWVzIC0gUGFzc3BvcnQgc3RyYXRlZ2llcywgZS5nLiBbICdsb2NhbCcsICdmYWNlYm9vaycgXVxuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IGNvbmZpZy5leHBvc2VUb1NlcnZlciAtIEV4cG9zZSB0aGUgcGFzc3BvcnQgc2VydmNpZSB0byB3aGlsZSBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGZ1bmN0aW9uIChhcHAsIGNvbmZpZykge1xuICAgICAgICBsZXQgcGFzc3BvcnQgPSBuZXcgS29hUGFzc3BvcnQoKTtcbiAgICAgICAgaWYgKF8uaXNFbXB0eShjb25maWcpIHx8IF8uaXNFbXB0eShjb25maWcuc3RyYXRlZ2llcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAnTWlzc2luZyBwYXNzcG9ydCBzdHJhdGVnaWVzLicsXG4gICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICdwYXNzcG9ydC5zdHJhdGVnaWVzJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgbGV0IGluaXRpYWxpemVNaWRkbGV3YXJlID0gcGFzc3BvcnQuaW5pdGlhbGl6ZShjb25maWcuaW5pdCk7XG5cbiAgICAgICAgcGFzc3BvcnQubWlkZGxld2FyZXMgPSBjb25maWcudXNlU2Vzc2lvbiA/IFsgaW5pdGlhbGl6ZU1pZGRsZXdhcmUsIHBhc3Nwb3J0LnNlc3Npb24oKSBdIDogaW5pdGlhbGl6ZU1pZGRsZXdhcmU7XG5cbiAgICAgICAgYXBwLm9uKCdiZWZvcmU6JyArIEZlYXR1cmUuUExVR0lOLCAoKSA9PiB7XG4gICAgICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMoYXBwLnJvdXRlciwgcGFzc3BvcnQubWlkZGxld2FyZXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwYXNzcG9ydC5oYXNTdHJhdGVneSA9IChuYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZSBpbiBwYXNzcG9ydC5fc3RyYXRlZ2llcztcbiAgICAgICAgfTtcblxuICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdwYXNzcG9ydCcsIHBhc3Nwb3J0KTsgICAgICAgIFxuXG4gICAgICAgIGlmIChjb25maWcuZXhwb3NlVG9TZXJ2ZXIgJiYgYXBwICE9PSBhcHAuc2VydmVyKSB7XG4gICAgICAgICAgICBhcHAuc2VydmVyLnJlZ2lzdGVyU2VydmljZSgncGFzc3BvcnQnLCBwYXNzcG9ydCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RyYXRlZ2llcyA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnN0cmF0ZWdpZXMpID8gY29uZmlnLnN0cmF0ZWdpZXMgOiBbIGNvbmZpZy5zdHJhdGVnaWVzIF07XG5cbiAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oc3RyYXRlZ2llcywgYXN5bmMgc3RyYXRlZ3kgPT4ge1xuICAgICAgICAgICAgbGV0IHN0cmF0ZWd5U2NyaXB0ID0gcGF0aC5qb2luKGFwcC5iYWNrZW5kUGF0aCwgJ3Bhc3Nwb3J0cycsIHN0cmF0ZWd5ICsgJy5qcycpO1xuICAgICAgICAgICAgbGV0IHN0cmF0ZWd5SW5pdGlhdG9yID0gcmVxdWlyZShzdHJhdGVneVNjcmlwdCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyYXRlZ3lJbml0aWF0b3IoYXBwLCBwYXNzcG9ydCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07Il19